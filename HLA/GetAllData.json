{"d":[{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCiAgPCEtLSBIRUFEIC0tPg0KICA8aGVhZD4NCiAgICA8IS0tIEZPUiBERVZFTE9QTUVOVCAtLT4NCiAgICA8IS0tIEZPUiBERVBMT1lNRU5UIC0tPg0KICAgIDwhLS0gTUVUQSBEQVRBIC0tPg0KICAgIDxtZXRhIGNoYXJzZXQ9J3V0Zi04Jz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSAtIEJMRVNTJyBuYW1lPSdhcHBsaWNhdGlvbi1uYW1lJz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSBFbGVjdHJvbmljIFN1Ym1pc3Npb24uJyBuYW1lPSdkZXNjcmlwdGlvbic+DQogICAgPG1ldGEgY29udGVudD0nQkNBIExpZmUgRWxlY3Ryb25pYyBTdWJtaXNzaW9uLicgbmFtZT0na2V5d29yZHMnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdhdXRob3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0licmFoaW0gQXppeicgbmFtZT0nZGVzaWduZXInPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0NvcHlyaWdodCAyMDE2IEJDQSBMaWZlJyBuYW1lPSdjb3B5cmlnaHQnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlIEVsZWN0cm9uaWMgU3VibWlzc2lvbi4nIG5hbWU9J2RjdGVybXMuZGVzY3JpcHRpb24nPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLmNyZWF0b3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLnJpZ2h0c0hvbGRlcic+DQogICAgPG1ldGEgY29udGVudD0nQWxsIHJpZ2h0cyByZXNlcnZlZC4gTm8gcGFydCBvZiB0aGlzIGRvY3VtZW50IG1heSBiZSByZXByb2R1Y2VkIG9yIHRyYW5zbWl0dGVkIGluIGFueSBmb3JtIG9yIGJ5IGFueSBtZWFucywgZWxlY3Ryb25pYywgbWVjaGFuaWNhbCwgcGhvdG9jb3B5aW5nLCByZWNvcmRpbmcsIG9yIG90aGVyd2lzZSwgd2l0aG91dCBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gZnJvbSB0aGUgQXV0aG9yLCBCQ0EgTGlmZS4nIG5hbWU9J2RjdGVybXMucmlnaHRzJz4NCiAgICA8bWV0YSBjb250ZW50PScyMDE2JyBuYW1lPSdkY3Rlcm1zLmRhdGVDb3B5cmlnaHRlZCc+DQogICAgPG1ldGEgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBtaW5pbXVtLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9bm8nIG5hbWU9J3ZpZXdwb3J0Jz4NCiAgICA8IS0tIEZBVklDT04gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iIH0gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iLCA6dHlwZSA9PiAiaW1hZ2UveC1pY29uIiB9IC0tPg0KICAgIDwhLS0gJWxpbmt7IDpyZWwgPT4gImljb24iLCA6aHJlZiA9PiAiI3t1cmxSZXNvdXJjZX1sb2dvX2Zhdmljb24uaWNvIiwgOnR5cGUgPT4gImltYWdlL3gtaWNvbiIgfSAtLT4NCiAgICA8IS0tIENTUyAtLT4NCiAgICA8IS0tICVsaW5reyA6aWQgPT4gImNzc3Jlc3BvbnNpdmUiLCA6aHJlZiA9PiAiI3t1cmxDU1N9anF1ZXJ5Lm1vYmlsZS0xLjQuNS5taW4uY3NzIiwgOnJlbCA9PiAic3R5bGVzaGVldCIsIDp0eXBlID0+ICJ0ZXh0L2NzcyIgfSAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9zcGFqZm9ybS1sYXlvdXQtZ2VuZXJhbC5jc3MnIGlkPSdjc3NsYXlvdXQnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvU3R5bGUvQ1NTL3NwYWpmb3JtLWZvbnQtZ2VuZXJhbC5jc3MnIGlkPSdjc3Nmb250JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9zcGFqZm9ybS1pbnB1dC1nZW5lcmFsLmNzcycgaWQ9J2Nzc2lucHV0JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8IS0tICVsaW5reyA6aWQgPT4gImNzc2xpbmsiLCA6aHJlZiA9PiAiI3t1cmxDU1N9I3t1cmxDU1NTZWN0aW9uUHJlZml4fS1saW5rLWdlbmVyYWwuY3NzIiwgOnJlbCA9PiAic3R5bGVzaGVldCIsIDp0eXBlID0+ICJ0ZXh0L2NzcyIgfSAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9ibGVzcy1mb250c2l6ZS1tZWRpdW0uY3NzJyBpZD0nY3NzZm9udHNpemUnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvU3R5bGUvQ1NTL3NwYWpmb3JtLWZvbnRmYW1pbHktYnByZXBsYXkuY3NzJyBpZD0nY3NzZm9udGZhbWlseScgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPGxpbmsgaHJlZj0nLi4vLi4vanF1ZXJ5TGlicmFyeS9TdHlsZS9DU1Mvc3BhamZvcm0tdGhlbWUtdHVycW9pc2Utc3ZnLmNzcycgaWQ9J2Nzc3RoZW1lJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8IS0tICVsaW5reyA6aWQgPT4gImNzc3Jlc3BvbnNpdmUiLCA6aHJlZiA9PiAiI3t1cmxDU1N9I3t1cmxDU1NTZWN0aW9uUHJlZml4fS1yZXNwb25zaXZlLWdlbmVyYWwuY3NzIiwgOnJlbCA9PiAic3R5bGVzaGVldCIsIDp0eXBlID0+ICJ0ZXh0L2NzcyIgfSAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL0RhdGVUaW1lUGlja2VyLm1pbi5jc3MnIGlkPSdjc3NyZXNwb25zaXZlJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8IS0tIEpBVkEgU0NSSVBUIC0tPg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2pxdWVyeS5tb2JpbGUtMS40LjUubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2pxdWVyeS0xLjExLjEubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2pxdWVyeS1taWdyYXRlLTEuMi4xLm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9pYnJhaGltYXppei5taW4uanMnIHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvSmF2YVNjcmlwdC9NaW5pbWl6ZWQvRGF0ZVRpbWVQaWNrZXIubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL0RhdGVUaW1lUGlja2VyLWkxOG4uanMnIHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvSmF2YVNjcmlwdC9NaW5pbWl6ZWQvRGF0ZVRpbWVQaWNrZXJfSU9TX2ZpeC5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnkubnVtYmVyLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQ+DQogICAgICB2YXIgc3RyaW5nUGFnZVR5cGVDdXJyZW50ID0gc3RyaW5nUGFnZVR5cGVGb3JtOw0KICAgIDwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvUkFXL2lvcy1pbnRlZ3JhdGlvbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8dGl0bGU+QkNBIExpZmUgLSBCTEVTUywgSGVhbHRoIFF1ZXN0aW9ubmFpcmUgMSBGb3JtPC90aXRsZT4NCiAgICA8IS0tIEpRVUVSWSAtLT4NCiAgICA8c2NyaXB0Pg0KICAgICAgLy8gSU5JVElBTElaQVRJT04NCiAgICAgIA0KICAgICAgdmFyIHN0cmluZ1BhZ2VUeXBlQ3VycmVudCA9IHN0cmluZ1BhZ2VUeXBlRm9ybTsNCiAgICAgIHZhciBzdHJpbmdQYWdlU2VjdGlvbkN1cnJlbnQgPSBzdHJpbmdQYWdlU2VjdGlvbkZvcm07DQogICAgICB2YXIgc3RyaW5nUGFnZVZhbGlkYXRpb25DdXJyZW50ID0gc3RyaW5nUGFnZVZhbGlkYXRpb25JbmNvbWU7DQogICAgICB2YXIgYm9vbGVhbklucHV0Q2hhbmdlU3RhdGUgPSAiZmFsc2UiOw0KICAgICAgDQogICAgICAvLyB2YXIganNvblBvbGljeUhvbGRlciA9ICd7InJlc3VsdCI6eyJyZWFkRnJvbURCIjpbeyJlbGVtZW50SUQiOiJUZXh0UG9saWN5SG9sZGVyRnVsbE5hbWUiLCJWYWx1ZSI6Illvc2kgT2xpdmVyIn0seyJlbGVtZW50SUQiOiJSYWRpb0J1dHRvblBvbGljeUhvbGRlckFtZXJpY2FuIiwiVmFsdWUiOiJ0cnVlIn0seyJlbGVtZW50SUQiOiJEYXRlUG9saWN5SG9sZGVyQWN0aXZlIiwiVmFsdWUiOiIwMS8wMi8yMDE2In0seyJlbGVtZW50SUQiOiJSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGlnaW9uIiwiVmFsdWUiOiJidWRoYSJ9XX19Jw0KICAgICAgDQogICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpDQogICAgICB7DQogICAgICAJJCgiI0JveERhdGUiKS5EYXRlVGltZVBpY2tlcigNCiAgICAgIAl7DQogICAgICAJCWRhdGVTZXBhcmF0b3I6ICIvIiwNCiAgICAgIAkJZGF0ZUZvcm1hdDogImRkL01NL3l5eXkiDQogICAgICAJfSk7DQogICAgICANCiAgICAgIAlhdXRvUG9wdWxhdGVTdGF0ZSgpOw0KICAgICAgDQogICAgICAJdmFsaWRhdGVQcmVzc051bWVyaWMoIlRleHRQb2xpY3lIb2xkZXJDSU4iKTsNCiAgICAgIAl2YWxpZGF0ZVByZXNzTnVtZXJpYygiVGV4dFBvbGljeUhvbGRlckhvbWVQb3N0YWxDb2RlIik7DQogICAgICAJdmFsaWRhdGVQcmVzc051bWVyaWMoIlRleHRQb2xpY3lIb2xkZXJPZmZpY2VQb3N0YWxDb2RlIik7DQogICAgICANCiAgICAgIAkvL2NhbGN1bGF0ZUFnZSgiRGF0ZVBvbGljeUhvbGRlckJpcnRoZGF5IiwgIlRleHRQb2xpY3lIb2xkZXJBZ2UiKTsNCiAgICAgIAkkKCcjVGV4dFBvbGljeUhvbGRlclNhbGFyeScpLm51bWJlciggdHJ1ZSwgMCwgJywnLCAnLicgKTsNCiAgICAgIAkkKCcjVGV4dFBvbGljeUhvbGRlclJldmVudWUnKS5udW1iZXIoIHRydWUsIDAsICcsJywgJy4nICk7DQogICAgICAJJCgnI1RleHRQb2xpY3lIb2xkZXJPdGhlckluY29tZScpLm51bWJlciggdHJ1ZSwgMCwgJywnLCAnLicgKTsNCiAgICAgIA0KICAgICAgCXJhZGlvQnV0dG9uT3RoZXJHZW5lcmF0b3IoIlJhZGlvQnV0dG9uUG9saWN5SG9sZGVySURUeXBlIiwgIiNUZXh0UG9saWN5SG9sZGVySURUeXBlT3RoZXIiLCAiT1RIRVIiKTsNCiAgICAgIAlyYWRpb0J1dHRvbk90aGVyR2VuZXJhdG9yKCJSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGF0aW9uQXNzdXJlZCIsICIjVGV4dFBvbGljeUhvbGRlclJlbGF0aW9uQXNzdXJlZE90aGVyIiwgIm90aGVyIik7DQogICAgICAJY2hlY2tib3hPdGhlckdlbmVyYXRvcigiQ2hlY2tib3hQb2xpY3lIb2xkZXJJbnN1cmFuY2VQdXJwb3NlT3RoZXIiLCAiI1RleHRQb2xpY3lIb2xkZXJJbnN1cmFuY2VQdXJwb3NlT3RoZXIiLCAib3RoZXIiKTsNCiAgICAgIA0KICAgICAgCXRlbGVwaG9uZVN0cmlwR2VuZXJhdG9yKCJUZXh0UG9saWN5SG9sZGVySG9tZVRlbGVwaG9uZSIpOw0KICAgICAgCXRlbGVwaG9uZVN0cmlwR2VuZXJhdG9yKCJUZXh0UG9saWN5SG9sZGVyT2ZmaWNlVGVsZXBob25lIik7DQogICAgICANCiAgICAgIAlpbnB1dExpc3RlbmVyKCk7DQogICAgICANCiAgICAgIAkvLyBGT1IgVEVTVElORw0KICAgICAgDQogICAgICAJLyogJCgiI0J1dHRvblN1Ym1pdCIpLmNsaWNrKGZ1bmN0aW9uKCkNCiAgICAgIAl7DQogICAgICAJCWFsZXJ0KCJiZWZvcmUgIiArIGJvb2xlYW5JbnB1dENoYW5nZVN0YXRlKTsNCiAgICAgIAkJc2F2ZXRvREIoKTsNCiAgICAgIAkJYWxlcnQoImFmdGVyICIgKyBib29sZWFuSW5wdXRDaGFuZ2VTdGF0ZSk7DQogICAgICAJfSk7ICovDQogICAgICANCiAgICAgIAkkKCdpbnB1dFt0eXBlPXJhZGlvXVtuYW1lPVJhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ29ycmVzcG9uZGFuY2VBZGRyZXNzXScpLmNoYW5nZShmdW5jdGlvbigpIHsNCiAgICAgIAkJaWYgKHRoaXMudmFsdWUgPT0gJ2hvbWUnKSB7DQogICAgICAJCQkkKCIjVGV4dFBvbGljeUhvbGRlckhvbWVBZGRyZXNzMSIpLnByb3AoJ3JlcXVpcmVkJyx0cnVlKTsNCiAgICAgIAkJCSQoIiNUZXh0UG9saWN5SG9sZGVySG9tZUNpdHkiKS5wcm9wKCdyZXF1aXJlZCcsdHJ1ZSk7DQogICAgICAJCQkkKCIjVGV4dFBvbGljeUhvbGRlckhvbWVQb3N0YWxDb2RlIikucHJvcCgncmVxdWlyZWQnLHRydWUpOw0KICAgICAgDQogICAgICAJCQkkKCcjVGV4dFBvbGljeUhvbGRlck9mZmljZUFkZHJlc3MxJykucmVtb3ZlQXR0cigncmVxdWlyZWQnKTsNCiAgICAgIAkJCSQoJyNUZXh0UG9saWN5SG9sZGVyT2ZmaWNlQ2l0eScpLnJlbW92ZUF0dHIoJ3JlcXVpcmVkJyk7DQogICAgICAJCQkkKCcjVGV4dFBvbGljeUhvbGRlck9mZmljZVBvc3RhbENvZGUnKS5yZW1vdmVBdHRyKCdyZXF1aXJlZCcpOw0KICAgICAgCQl9DQogICAgICAJCWVsc2UgaWYgKHRoaXMudmFsdWUgPT0gJ29mZmljZScpIHsNCiAgICAgIAkJCSQoIiNUZXh0UG9saWN5SG9sZGVyT2ZmaWNlQWRkcmVzczEiKS5wcm9wKCdyZXF1aXJlZCcsdHJ1ZSk7DQogICAgICAJCQkkKCIjVGV4dFBvbGljeUhvbGRlck9mZmljZUNpdHkiKS5wcm9wKCdyZXF1aXJlZCcsdHJ1ZSk7DQogICAgICAJCQkkKCIjVGV4dFBvbGljeUhvbGRlck9mZmljZVBvc3RhbENvZGUiKS5wcm9wKCdyZXF1aXJlZCcsdHJ1ZSk7DQogICAgICANCiAgICAgIAkJCSQoJyNUZXh0UG9saWN5SG9sZGVySG9tZUFkZHJlc3MxJykucmVtb3ZlQXR0cigncmVxdWlyZWQnKTsNCiAgICAgIAkJCSQoJyNUZXh0UG9saWN5SG9sZGVySG9tZUNpdHknKS5yZW1vdmVBdHRyKCdyZXF1aXJlZCcpOw0KICAgICAgCQkJJCgnI1RleHRQb2xpY3lIb2xkZXJIb21lUG9zdGFsQ29kZScpLnJlbW92ZUF0dHIoJ3JlcXVpcmVkJyk7DQogICAgICAJCX0NCiAgICAgIAkJZWxzZQ0KICAgICAgCQl7DQogICAgICANCiAgICAgIAkJfQ0KICAgICAgCX0pOw0KICAgICAgDQogICAgICAJY2hlY2tib3hBc1JhZGlvQnV0dG9uKCJDaGVja2JveFBvbGljeUhvbGRlclNhbGFyeSIpOw0KICAgICAgCWNoZWNrYm94QXNSYWRpb0J1dHRvbigiQ2hlY2tib3hQb2xpY3lIb2xkZXJSZXZlbnVlIik7DQogICAgICAJY2hlY2tib3hBc1JhZGlvQnV0dG9uKCJDaGVja2JveFBvbGljeUhvbGRlck90aGVySW5jb21lIik7DQogICAgICANCiAgICAgIAl2YWxpZGF0ZUVtYWlsKCJUZXh0UG9saWN5SG9sZGVyRW1haWwiKTsNCiAgICAgIH0pOw0KICAgIDwvc2NyaXB0Pg0KICA8L2hlYWQ+DQogIDwhLS0gQk9EWSAtLT4NCiAgPGJvZHkgaWQ9J01haW4nPg0KICAgIDwhLS0gTUFJTiAtLT4NCiAgICA8bWFpbj4NCiAgICAgIDxmb3JtPg0KICAgICAgICA8IS0tICVpbnB1dCNCdXR0b25TdWJtaXR7IDp0eXBlID0+ICJidXR0b24iLCA6dmFsdWUgPT4gIlN1Ym1pdCIgfSAtLT4NCiAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJDSU4nPk5vbW9yIENJTjwvbGFiZWw+DQogICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJDSU4nIG1heGxlbmd0aD0nNycgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3RleHQnPg0KICAgICAgICA8YnI+DQogICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlckZ1bGxOYW1lJz5OYW1hIExlbmdrYXA8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgZGF0YS1pbnB1dC10eXBlPSdhdXRvcG9wdWxhdGUnIGlkPSdUZXh0UG9saWN5SG9sZGVyRnVsbE5hbWUnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlcklEVHlwZSc+SmVuaXMgSWRlbnRpdGFzIERpcmk8L2xhYmVsPg0KICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJJRFR5cGVLVFAnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySURUeXBlJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdLVFAnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJJRFR5cGVLVFAnPktUUDwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlcklEVHlwZVNJTScgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJJRFR5cGUnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J1NJTSc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlcklEVHlwZVNJTSc+U0lNPC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZScgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySURUeXBlUGFzc3BvcnQnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySURUeXBlJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdQQVNQT1InPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJJRFR5cGVQYXNzcG9ydCc+UGFzcG9yPC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZScgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySURUeXBlS0lNU0tJVEFTJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlcklEVHlwZScgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nS0lNU0tJVEFTJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySURUeXBlS0lNU0tJVEFTJz5LSU1TL0tJVEFTPC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZScgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySURUeXBlT3RoZXInIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySURUeXBlJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdPVEhFUic+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlcklEVHlwZU90aGVyJz5MYWlubnlhPC9sYWJlbD4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVySURUeXBlT3RoZXInIHR5cGU9J3RleHQnPg0KICAgICAgICA8aW1nIGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1Jlc291cmNlL0lucHV0L2lucHV0X3RleHRfcmVxdWlyZWQuc3ZnJyBzdHlsZT0nd2lkdGg6IDIwcHg7Jz4NCiAgICAgICAgPGJyPg0KICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJJRE51bWJlcic+Tm9tb3IgSWRlbnRpdGFzIERpcmk8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlcklETnVtYmVyJyBtYXhsZW5ndGg9JzE2JyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nRGF0ZVBvbGljeUhvbGRlckFjdGl2ZSc+TWFzYSBiZXJsYWt1PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVQb2xpY3lIb2xkZXJBY3RpdmUnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlckJpcnRoUGxhY2UnPlRlbXBhdCBsYWhpcjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyQmlydGhQbGFjZScgbWF4bGVuZ3RoPScyMCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nRGF0ZVBvbGljeUhvbGRlckJpcnRoJz5UYW5nZ2FsIGxhaGlyPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZGF0YS1pbnB1dC10eXBlPSdhdXRvcG9wdWxhdGUnIGlkPSdEYXRlUG9saWN5SG9sZGVyQmlydGgnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVyQWdlJz5VbXVyPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZGF0YS1pbnB1dC10eXBlPSdhdXRvcG9wdWxhdGUnIGlkPSdUZXh0UG9saWN5SG9sZGVyQWdlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckxlZnQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTmF0aW9uYWxpdHlXTkknPktld2FyZ2FuZWdhcmFhbjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck5hdGlvbmFsaXR5V05JJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck5hdGlvbmFsaXR5JyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd3bmknPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck5hdGlvbmFsaXR5V05JJz5XTkk8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZScgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTmF0aW9uYWxpdHlXTkEnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTmF0aW9uYWxpdHknIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3duYSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTmF0aW9uYWxpdHlXTkEnPldOQTwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVVNBQ2l0aXplbic+QXBha2FoIGFuZGEgbWVydXBha2FuIHdhcmdhIG5lZ2FyYSBhdGF1IHdhamliIHBhamFrIGFtZXJpa2EgPzwvbGFiZWw+DQogICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclVTQUNpdGl6ZW5ZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVVNBQ2l0aXplbicgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclVTQUNpdGl6ZW5ZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZScgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVVNBQ2l0aXplbk5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclVTQUNpdGl6ZW4nIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVVNBQ2l0aXplbk5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVVNBQ2l0aXplblllcyc+KEppa2EgamF3YWJhbiAiWWEiIG1vaG9uIGxhbXBpcmthbiBmb3JtdWxpciBXOCAvIFc5KS48L2xhYmVsPg0KICAgICAgICA8YnI+DQogICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNleCc+SmVuaXMgS2VsYW1pbjwvbGFiZWw+DQogICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGRpc2FibGVkPSd0cnVlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTZXhNYWxlJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNleCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdtYWxlJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU2V4TWFsZSc+UHJpYTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGRpc2FibGVkPSd0cnVlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTZXhGZW1hbGUnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU2V4JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZlbWFsZSc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNleEZlbWFsZSc+UGVyZW1wdWFuPC9sYWJlbD4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxicj4NCiAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWFyaXRhbFN0YXR1cyc+U3RhdHVzIFBlcm5pa2FoYW48L2xhYmVsPg0KICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNYXJpdGFsU3RhdHVzU2luZ2xlJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1hcml0YWxTdGF0dXMnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3NpbmdsZSc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1hcml0YWxTdGF0dXNTaW5nbGUnPkJlbHVtIE1lbmlrYWg8L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNYXJpdGFsU3RhdHVzTWFycmllZCcgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNYXJpdGFsU3RhdHVzJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdtYXJyaWVkJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWFyaXRhbFN0YXR1c01hcnJpZWQnPk1lbmlrYWg8L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNYXJpdGFsU3RhdHVzRGl2b3JjZWQnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWFyaXRhbFN0YXR1cycgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZGl2b3JjZWQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNYXJpdGFsU3RhdHVzRGl2b3JjZWQnPkphbmRhIC8gRHVkYTwvbGFiZWw+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8YnI+DQogICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGlnaW9uJz5BZ2FtYTwvbGFiZWw+DQogICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGlnaW9uSXNsYW0nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsaWdpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0naXNsYW0nPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxpZ2lvbklzbGFtJz5Jc2xhbTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGlnaW9uS3Jpc3RlbkthdG9saWsnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsaWdpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0na2F0b2xpayc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGlnaW9uS3Jpc3RlbkthdG9saWsnPktyaXN0ZW4gS2F0b2xpazwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGlnaW9uS3Jpc3RlblByb3Rlc3RhbicgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxpZ2lvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdrcmlzdGVuJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsaWdpb25LcmlzdGVuUHJvdGVzdGFuJz5LcmlzdGVuIFByb3Rlc3RhbjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGlnaW9uSGluZHUnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsaWdpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0naGluZHUnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxpZ2lvbkhpbmR1Jz5IaW5kdTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGlnaW9uQnVkaGEnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsaWdpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nYnVkaGEnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxpZ2lvbkJ1ZGhhJz5CdWRoYTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGlnaW9uS29uZ2h1Y3UnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsaWdpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0na29uZ2h1Y2h1Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsaWdpb25Lb25naHVjdSc+S29uZyBIdSBDdTwvbGFiZWw+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8YnI+DQogICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlckNvbXBhbnknPk5hbWEgUGVydXNhaGFhbiAvIEluc3RhbnNpIC8gU2Vrb2xhaDwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlckNvbXBhbnknIG1heGxlbmd0aD0nMzAnIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVyTWFpbkpvYic+UGVrZXJqYWFuIFV0YW1hPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGRhdGEtaW5wdXQtdHlwZT0nYXV0b3BvcHVsYXRlJyBpZD0nVGV4dFBvbGljeUhvbGRlck1haW5Kb2InIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVyV29ya1Njb3BlJz5CaWRhbmcgVXNhaGE8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJXb3JrU2NvcGUnIG1heGxlbmd0aD0nMzAnIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVyUG9zaXRpb24nPkphYmF0YW48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJQb3NpdGlvbicgbWF4bGVuZ3RoPSczMCcgdHlwZT0ndGV4dCc+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJKb2JEZXNjcmlwdGlvbic+VXJhaWFuIFBla2VyamFhbjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlckpvYkRlc2NyaXB0aW9uJyBtYXhsZW5ndGg9JzMwJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlclNpZGVKb2InPlBla2VyamFhbiBUYW1iYWhhbjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlclNpZGVKb2InIG1heGxlbmd0aD0nMzAnIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVySG9tZUFkZHJlc3MxJz5BbGFtYXQgVGVtcGF0IFRpbmdnYWw8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJIb21lQWRkcmVzczEnIG1heGxlbmd0aD0nMzAnIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVySG9tZUFkZHJlc3MyJz48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJIb21lQWRkcmVzczInIG1heGxlbmd0aD0nMzAnIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVySG9tZUFkZHJlc3MzJz48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJIb21lQWRkcmVzczMnIG1heGxlbmd0aD0nMzAnIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVySG9tZUNpdHknPjwvbGFiZWw+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlckhvbWVDaXR5Jz5Lb3RhPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJIb21lQ2l0eScgbWF4bGVuZ3RoPScxOScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlckhvbWVQb3N0YWxDb2RlJz5Lb2RlIFBvczwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVySG9tZVBvc3RhbENvZGUnIG1heGxlbmd0aD0nNicgdHlwZT0ndGV4dCc+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJIb21lVGVsZXBob25lJz48L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtRml4IFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJIb21lVGVsZXBob25lJz5Ob21vciB0ZWxlcG9uPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJIb21lVGVsZXBob25lJyBtYXhsZW5ndGg9JzEzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxicj4NCiAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJIYW5kcGhvbmUxJz5Ob21vciBIUCBVdGFtYTwvbGFiZWw+DQogICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVySGFuZHBob25lMScgbWF4bGVuZ3RoPScxMycgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3RleHQnPg0KICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckhhbmRwaG9uZTInPk5vbW9yIEhQIDI8L2xhYmVsPg0KICAgICAgICA8aW5wdXQgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlckhhbmRwaG9uZTInIG1heGxlbmd0aD0nMTMnIHR5cGU9J3RleHQnPg0KICAgICAgICA8YnI+DQogICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlckVtYWlsJz5FbWFpbDwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlckVtYWlsJyBtYXhsZW5ndGg9JzMwJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlck9mZmljZUFkZHJlc3MxJz5BbGFtYXQga2FudG9yPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyT2ZmaWNlQWRkcmVzczEnIG1heGxlbmd0aD0nMzAnIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVyT2ZmaWNlQWRkcmVzczInPjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlck9mZmljZUFkZHJlc3MyJyBtYXhsZW5ndGg9JzMwJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlck9mZmljZUFkZHJlc3MzJz48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJPZmZpY2VBZGRyZXNzMycgbWF4bGVuZ3RoPSczMCcgdHlwZT0ndGV4dCc+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJPZmZpY2VDaXR5Jz48L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJPZmZpY2VDaXR5Jz5Lb3RhPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJPZmZpY2VDaXR5JyBtYXhsZW5ndGg9JzE5JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZHVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJPZmZpY2VQb3N0YWxDb2RlJz5Lb2RlIFBvczwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyT2ZmaWNlUG9zdGFsQ29kZScgbWF4bGVuZ3RoPSc2JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlck9mZmljZVRlbGVwaG9uZSc+PC9sYWJlbD4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bUZpeCBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVyT2ZmaWNlVGVsZXBob25lJz5UZWxwPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJPZmZpY2VUZWxlcGhvbmUnIG1heGxlbmd0aD0nMTMnIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ29ycmVzcG9uZGFuY2VBZGRyZXNzJz5BbGFtYXQgS29yZXNwb25kZW5zaTwvbGFiZWw+DQogICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNvcnJlc3BvbmRhbmNlQWRkcmVzc0hvbWUnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ29ycmVzcG9uZGFuY2VBZGRyZXNzJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdob21lJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ29ycmVzcG9uZGFuY2VBZGRyZXNzSG9tZSc+QWxhbWF0IFRlbXBhdCBUaW5nZ2FsPC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZScgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ29ycmVzcG9uZGFuY2VBZGRyZXNzT2ZmaWNlJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNvcnJlc3BvbmRhbmNlQWRkcmVzcycgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb2ZmaWNlJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ29ycmVzcG9uZGFuY2VBZGRyZXNzT2ZmaWNlJz5BbGFtYXQgS2FudG9yPC9sYWJlbD4NCiAgICAgICAgICA8aW1nIGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9SZXNvdXJjZS9JbnB1dC9pbnB1dF90ZXh0X3JlcXVpcmVkLnN2Zycgc3R5bGU9J3dpZHRoOiAyMHB4Oyc+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8YnI+DQogICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIE11bHRpIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsYXRpb25Bc3N1cmVkJz5IdWJ1bmdhbiBEZW5nYW4gQ2Fsb24gVGVydGFuZ2d1bmc8L2xhYmVsPg0KICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlJyBkaXNhYmxlZD0ndHJ1ZScgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsYXRpb25Bc3N1cmVkU2VsZicgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxhdGlvbkFzc3VyZWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc2VsZic+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGF0aW9uQXNzdXJlZFNlbGYnPkRpcmkgU2VuZGlyaTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGRpc2FibGVkPSd0cnVlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxhdGlvbkFzc3VyZWRTcG91c2UnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsYXRpb25Bc3N1cmVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J3Nwb3VzZSc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGF0aW9uQXNzdXJlZFNwb3VzZSc+U3VhbWkgLyBJc3RyaTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGRpc2FibGVkPSd0cnVlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxhdGlvbkFzc3VyZWRGYW1pbHknIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsYXRpb25Bc3N1cmVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbWlseSc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGF0aW9uQXNzdXJlZEZhbWlseSc+T3JhbmcgVHVhIC8gQW5hazwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGRpc2FibGVkPSd0cnVlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxhdGlvbkFzc3VyZWRDb2xsZWFndWUnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUmVsYXRpb25Bc3N1cmVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J2NvbGxlYWd1ZSc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclJlbGF0aW9uQXNzdXJlZENvbGxlYWd1ZScgc3R5bGU9J3dpZHRoOiAxMDBweDsnPlBlcnVzYWhhYW4gLyBLYXJ5YXdhbjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGRpc2FibGVkPSd0cnVlJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxhdGlvbkFzc3VyZWRPdGhlcicgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxhdGlvbkFzc3VyZWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJSZWxhdGlvbkFzc3VyZWRPdGhlcic+TGFpbm55YTwvbGFiZWw+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8aW5wdXQgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlclJlbGF0aW9uQXNzdXJlZE90aGVyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPGJyPg0KICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nQ2hlY2tib3hQb2xpY3lIb2xkZXJJbnN1cmFuY2VQdXJwb3NlU2F2aW5ncyc+VHVqdWFuIFBlbWJlbGlhbiBBc3VyYW5zaTwvbGFiZWw+DQogICAgICAgIDxkaXYgY2xhc3M9J0NoZWNrYm94IFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdDaGVja2JveFBvbGljeUhvbGRlckluc3VyYW5jZVB1cnBvc2VTYXZpbmdzJyBuYW1lPSdDaGVja2JveFBvbGljeUhvbGRlckluc3VyYW5jZVB1cnBvc2UnIHR5cGU9J2NoZWNrYm94JyB2YWx1ZT0nc2F2aW5ncyc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdDaGVja2JveCcgZm9yPSdDaGVja2JveFBvbGljeUhvbGRlckluc3VyYW5jZVB1cnBvc2VTYXZpbmdzJz5UYWJ1bmdhbjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdDaGVja2JveFBvbGljeUhvbGRlckluc3VyYW5jZVB1cnBvc2VQcm90ZWN0aW9uJyBuYW1lPSdDaGVja2JveFBvbGljeUhvbGRlckluc3VyYW5jZVB1cnBvc2UnIHR5cGU9J2NoZWNrYm94JyB2YWx1ZT0ncHJvdGVjdGlvbic+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdDaGVja2JveCcgZm9yPSdDaGVja2JveFBvbGljeUhvbGRlckluc3VyYW5jZVB1cnBvc2VQcm90ZWN0aW9uJz5Qcm90ZWtzaTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdDaGVja2JveFBvbGljeUhvbGRlckluc3VyYW5jZVB1cnBvc2VJbnZlc3RhdGlvbicgbmFtZT0nQ2hlY2tib3hQb2xpY3lIb2xkZXJJbnN1cmFuY2VQdXJwb3NlJyB0eXBlPSdjaGVja2JveCcgdmFsdWU9J2ludmVzdG1lbnQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nQ2hlY2tib3gnIGZvcj0nQ2hlY2tib3hQb2xpY3lIb2xkZXJJbnN1cmFuY2VQdXJwb3NlSW52ZXN0YXRpb24nPkludmVzdGFzaTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdDaGVja2JveFBvbGljeUhvbGRlckluc3VyYW5jZVB1cnBvc2VFZHVjYXRpb24nIG5hbWU9J0NoZWNrYm94UG9saWN5SG9sZGVySW5zdXJhbmNlUHVycG9zZScgdHlwZT0nY2hlY2tib3gnIHZhbHVlPSdlZHVjYXRpb24nPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nQ2hlY2tib3gnIGZvcj0nQ2hlY2tib3hQb2xpY3lIb2xkZXJJbnN1cmFuY2VQdXJwb3NlRWR1Y2F0aW9uJz5QZW5kaWRpa2FuPC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZScgaWQ9J0NoZWNrYm94UG9saWN5SG9sZGVySW5zdXJhbmNlUHVycG9zZU90aGVyJyBuYW1lPSdDaGVja2JveFBvbGljeUhvbGRlckluc3VyYW5jZVB1cnBvc2UnIHR5cGU9J2NoZWNrYm94JyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nQ2hlY2tib3gnIGZvcj0nQ2hlY2tib3hQb2xpY3lIb2xkZXJJbnN1cmFuY2VQdXJwb3NlT3RoZXInPkxhaW5ueWE8L2xhYmVsPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJJbnN1cmFuY2VQdXJwb3NlT3RoZXInIHR5cGU9J3RleHQnPg0KICAgICAgICA8YnI+DQogICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyTlBXUCc+Tm9tb3IgTlBXUDwvbGFiZWw+DQogICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJOUFdQJyBtYXhsZW5ndGg9JzE2JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQb2xpY3lIb2xkZXJOUFdQQWN0aXZlJz5UYW5nZ2FsIEJlcmxha3U8L2xhYmVsPg0KICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlUG9saWN5SG9sZGVyTlBXUEFjdGl2ZScgdHlwZT0ndGV4dCc+DQogICAgICAgIDxicj4NCiAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdDaGVja2JveFBvbGljeUhvbGRlclNhbGFyeUlEUic+UGVuZ2hhc2lsYW4gS290b3IgUGVyIFRhaHVuPC9sYWJlbD4NCiAgICAgICAgPGJyPg0KICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nQ2hlY2tib3hQb2xpY3lIb2xkZXJTYWxhcnlJRFInPkdhamk8L2xhYmVsPg0KICAgICAgICA8ZGl2IGNsYXNzPSdDaGVja2JveCBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlJyBpZD0nQ2hlY2tib3hQb2xpY3lIb2xkZXJTYWxhcnlJRFInIG5hbWU9J0NoZWNrYm94UG9saWN5SG9sZGVyU2FsYXJ5JyB0eXBlPSdjaGVja2JveCcgdmFsdWU9J2lkcic+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdDaGVja2JveCcgZm9yPSdDaGVja2JveFBvbGljeUhvbGRlclNhbGFyeUlEUic+UlA8L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlJyBpZD0nQ2hlY2tib3hQb2xpY3lIb2xkZXJTYWxhcnlVU0QnIG5hbWU9J0NoZWNrYm94UG9saWN5SG9sZGVyU2FsYXJ5JyB0eXBlPSdjaGVja2JveCcgdmFsdWU9J3VzZCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdDaGVja2JveCcgZm9yPSdDaGVja2JveFBvbGljeUhvbGRlclNhbGFyeVVTRCc+VVNEPC9sYWJlbD4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyU2FsYXJ5Jz5QZW5naGFzaWxhbiAvIFRhaHVuPC9sYWJlbD4NCiAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZGF0YS1jdXN0b212YWxpZGF0aW9uPSdpbmNvbWUnIGlkPSdUZXh0UG9saWN5SG9sZGVyU2FsYXJ5JyB0eXBlPSd0ZXh0JyB2YWx1ZT0nMCc+DQogICAgICAgIDxicj4NCiAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0NoZWNrYm94UG9saWN5SG9sZGVyUmV2ZW51ZUlEUic+SGFzaWwgVXNhaGE8L2xhYmVsPg0KICAgICAgICA8ZGl2IGNsYXNzPSdDaGVja2JveCBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlJyBpZD0nQ2hlY2tib3hQb2xpY3lIb2xkZXJSZXZlbnVlSURSJyBuYW1lPSdDaGVja2JveFBvbGljeUhvbGRlclJldmVudWUnIHR5cGU9J2NoZWNrYm94JyB2YWx1ZT0naWRyJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0NoZWNrYm94JyBmb3I9J0NoZWNrYm94UG9saWN5SG9sZGVyUmV2ZW51ZUlEUic+UlA8L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlJyBpZD0nQ2hlY2tib3hQb2xpY3lIb2xkZXJSZXZlbnVlVVNEJyBuYW1lPSdDaGVja2JveFBvbGljeUhvbGRlclJldmVudWUnIHR5cGU9J2NoZWNrYm94JyB2YWx1ZT0ndXNkJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0NoZWNrYm94JyBmb3I9J0NoZWNrYm94UG9saWN5SG9sZGVyUmV2ZW51ZVVTRCc+VVNEPC9sYWJlbD4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyUmV2ZW51ZSc+UGVuZ2hhc2lsYW4gLyBUYWh1bjwvbGFiZWw+DQogICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGRhdGEtY3VzdG9tdmFsaWRhdGlvbj0naW5jb21lJyBpZD0nVGV4dFBvbGljeUhvbGRlclJldmVudWUnIHR5cGU9J3RleHQnIHZhbHVlPScwJz4NCiAgICAgICAgPGJyPg0KICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJPdGhlckluY29tZUlEUic+UGVuZ2hhc2lsYW4gTGFpbm55YTwvbGFiZWw+DQogICAgICAgIDxkaXYgY2xhc3M9J0NoZWNrYm94IFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdDaGVja2JveFBvbGljeUhvbGRlck90aGVySW5jb21lSURSJyBuYW1lPSdDaGVja2JveFBvbGljeUhvbGRlck90aGVySW5jb21lJyB0eXBlPSdjaGVja2JveCcgdmFsdWU9J2lkcic+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdDaGVja2JveCcgZm9yPSdDaGVja2JveFBvbGljeUhvbGRlck90aGVySW5jb21lSURSJz5SUDwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUnIGlkPSdDaGVja2JveFBvbGljeUhvbGRlck90aGVySW5jb21lVVNEJyBuYW1lPSdDaGVja2JveFBvbGljeUhvbGRlck90aGVySW5jb21lJyB0eXBlPSdjaGVja2JveCcgdmFsdWU9J3VzZCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdDaGVja2JveCcgZm9yPSdDaGVja2JveFBvbGljeUhvbGRlck90aGVySW5jb21lVVNEJz5VU0Q8L2xhYmVsPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJPdGhlckluY29tZSc+UGVuZ2hhc2lsYW4gLyBUYWh1bjwvbGFiZWw+DQogICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGRhdGEtY3VzdG9tdmFsaWRhdGlvbj0naW5jb21lJyBpZD0nVGV4dFBvbGljeUhvbGRlck90aGVySW5jb21lJyB0eXBlPSd0ZXh0JyB2YWx1ZT0nMCc+DQogICAgICAgIDxicj4NCiAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVyU291cmNlJz5KZWxhc2thbiBTdW1iZXJueWE8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJTb3VyY2UnIG1heGxlbmd0aD0nMzAnIHR5cGU9J3RleHQnPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGJyPg0KICAgICAgICA8ZGl2IGlkPSdCb3hEYXRlJz48L2Rpdj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L21haW4+DQogIDwvYm9keT4NCjwvaHRtbD4NCg==","DateCreated":"\/Date(1468774800000+0700)\/","FileName":"20160803113501.html","FileNameIndo":"20160803113501.html","FolderName":"20160803","Id":1,"SPAJId":1,"SPAJSection":"PO","Status":"A","ValidDate":"\/Date(1468774800000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\","DateCreated":"\/Date(1468774800000+0700)\/","FileName":"20160803113502.html","FileNameIndo":"20160803113502.html","FolderName":"20160803","Id":2,"SPAJId":1,"SPAJSection":"TR","Status":"A","ValidDate":"\/Date(1468774800000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"","DateCreated":"\/Date(1468774800000+0700)\/","FileName":"20160803113503.html","FileNameIndo":"20160803113503.html","FolderName":"20160803","Id":3,"SPAJId":1,"SPAJSection":"PR","Status":"A","ValidDate":"\/Date(1468774800000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"","DateCreated":"\/Date(1468774800000+0700)\/","FileName":"20160803113504.html","FileNameIndo":"20160803113504.html","FolderName":"20160803","Id":4,"SPAJId":1,"SPAJSection":"PM","Status":"A","ValidDate":"\/Date(1468774800000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"","DateCreated":"\/Date(1468774800000+0700)\/","FileName":"20160803113505.html","FileNameIndo":"20160803113505.html","FolderName":"20160803","Id":5,"SPAJId":1,"SPAJSection":"PP","Status":"A","ValidDate":"\/Date(1468774800000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJXZWlnaHRDaGFuZ2VZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyV2VpZ2h0Q2hhbmdlJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJXZWlnaHRDaGFuZ2VZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyV2VpZ2h0Q2hhbmdlTm8nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyV2VpZ2h0Q2hhbmdlJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyV2VpZ2h0Q2hhbmdlTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvbGk+DQogICAgICAgIDxocj4NCiAgICAgICAgPGxpPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0l0ZW0nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTbW9rZUFjdGl2aXR5WWVzJyBpZD0nTGFiZWxQb2xpY3lIb2xkZXJTbW9rZUFjdGl2aXR5Jz4NCiAgICAgICAgICAgICAgQXBha2FoIEFuZGEgbWVyb2tvayBkYWxhbSAxMiAoZHVhIGJlbGFzKSBidWxhbiB0ZXJha2hpciAodGVybWFzdWsgcm9rb2sgZWxla3Ryb25payBhdGF1IHByb2R1ayB0ZW1iYWthdSBsYWlubnlhKT8NCiAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNtb2tlQWN0aXZpdHlZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU21va2VBY3Rpdml0eScgb25jaGFuZ2U9InNob3dQb3BVcEZyb21SYWRpb0J1dHRvbih0aGlzLm5hbWUsICd0cnVlJywgJ1BvcFVwU21va2VBY3Rpdml0eScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50LCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnU21va2VBY3Rpdml0eSddKSIgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTbW9rZUFjdGl2aXR5WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTbW9rZUFjdGl2aXR5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU21va2VBY3Rpdml0eScgb25jaGFuZ2U9InNob3dQb3BVcEZyb21SYWRpb0J1dHRvbih0aGlzLm5hbWUsICd0cnVlJywgJ1BvcFVwU21va2VBY3Rpdml0eScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50LCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnU21va2VBY3Rpdml0eSddKSIgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU21va2VBY3Rpdml0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByZXZpZXcnIGlkPSdCdXR0b25QcmV2aWV3UG9saWN5SG9sZGVyU21va2VBY3Rpdml0eScgb25jbGljaz0ic2hvd1BvcFVwRnJvbUJ1dHRvbignUG9wVXBTbW9rZUFjdGl2aXR5Jywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnU21va2VBY3Rpdml0eScsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J1ZpZXcgcmVjZW50IGlucHV0Jz4NCiAgICAgICAgPC9saT4NCiAgICAgICAgPGhyPg0KICAgICAgICA8bGk+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckp1bmtpZVllcycgaWQ9J0xhYmVsUG9saWN5SG9sZGVySnVua2llJz4NCiAgICAgICAgICAgICAgQXBha2FoIEFuZGEgbWVtaWxpa2kga2ViaWFzYWFuIGF0YXUgcGVybmFoIG1lbmdndW5ha2FuIG5hcmtvdGlrYSwgemF0IGFkaWt0aWYgYXRhdSBvYmF0LW9iYXRhbiBsYWlubnlhLCBtaW51bSBhbGtvaG9sIHNlY2FyYSBiZXJsZWJpaGFuPyBKaWthIOKAnFlh4oCdLCBqZWxhc2thbiBqdW1sYWggc2VydGEgZnJla3VlbnNpIG1lbmdrb25zdW1zaW55YS4gU2VydGEgamVsYXNrYW4gamlrYSBhZGEgcml3YXlhdCBwZXJhd2F0YW4vbWVuZGFwYXQgdGVyYXBpIGthcmVuYSBoYWwgdGVyc2VidXQ\\/DQogICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgICAgIDxpbnB1dCBkYXRhLXBvcHVwLXR5cGU9J2hlYWx0aCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySW1tdW5lWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckltbXVuZScgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySW1tdW5lWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtcG9wdXAtdHlwZT0naGVhbHRoJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJJbW11bmVObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJJbW11bmUnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJJbW11bmVObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmV2aWV3JyBkYXRhLXBvcHVwLXR5cGU9J2hlYWx0aCcgaWQ9J0J1dHRvblByZXZpZXdQb2xpY3lIb2xkZXJJbW11bmUnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySW1tdW5lJyB0eXBlPSdidXR0b24nIHZhbHVlPSdWaWV3IHJlY2VudCBpbnB1dCc+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXInPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNlbGxZZXMnIGlkPSdMYWJlbFBvbGljeUhvbGRlckNlbGwnPg0KICAgICAgICAgICAgICAgICAgR2FuZ2d1YW4gZnVuZ3NpIFBlcnR1bWJ1aGFuIFNlbCwgVHVtb3IsIEtpc3RhLCBLYW5rZXIsIEJlbmpvbGFuIHBhZGEgcGVybXVrYWFuIGt1bGl0IGF0YXUgcGVydHVtYnVoYW4gYWJub3JtYWwgbGFpbm55YT8NCiAgICAgICAgICAgICAgICA8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIEl0ZW0nPg0KICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNlbGxZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2VsbCcgb25jaGFuZ2U9InNob3dQb3BVcEZyb21SYWRpb0J1dHRvbih0aGlzLm5hbWUsICd0cnVlJywgJ1BvcFVwQ2VsbCcsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50LCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnQ2VsbCcsICdUdW1vciddKSIgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2VsbFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJDZWxsTm8nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2VsbCcgb25jaGFuZ2U9InNob3dQb3BVcEZyb21SYWRpb0J1dHRvbih0aGlzLm5hbWUsICd0cnVlJywgJ1BvcFVwQ2VsbCcsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50LCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnQ2VsbCcsICdUdW1vciddKSIgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNlbGxObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmV2aWV3JyBpZD0nQnV0dG9uUHJldmlld1BvbGljeUhvbGRlckNlbGwnIG9uY2xpY2s9InNob3dQb3BVcEZyb21CdXR0b24oJ1BvcFVwQ2VsbCcsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0NlbGwnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdWaWV3IHJlY2VudCBpbnB1dCc+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXInPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck90aGVySWxsbmVzc1llcycgaWQ9J0xhYmVsUG9saWN5SG9sZGVyT3RoZXJJbGxuZXNzJz4NCiAgICAgICAgICAgICAgICAgIEdhbmdndWFuIEtlc2VoYXRhbiBsYWlubnlhIHlhbmcgdGlkYWsvYmVsdW0gZGlueWF0YWthbiBkaWF0YXMgdGVybWFzdWsgbmFtdW4gdGlkYWsgdGVyYmF0YXMgcGFkYSBrZWxhaW5hbiBiZW50dWsgdHVidWgsIGtlbGFpbmFuL2NhY2F0IGZpc2lrLCBrZWxhaW5hbi9jYWNhdCBiYXdhYW4gZGFuIGxhaW5ueWE\/DQogICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgICAgIDxpbnB1dCBkYXRhLXBvcHVwLXR5cGU9J2hlYWx0aCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyT3RoZXJJbGxuZXNzWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck90aGVySWxsbmVzcycgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyT3RoZXJJbGxuZXNzWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtcG9wdXAtdHlwZT0naGVhbHRoJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJPdGhlcklsbG5lc3NObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJPdGhlcklsbG5lc3MnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJPdGhlcklsbG5lc3NObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmV2aWV3JyBkYXRhLXBvcHVwLXR5cGU9J2hlYWx0aCcgaWQ9J0J1dHRvblByZXZpZXdQb2xpY3lIb2xkZXJPdGhlcklsbG5lc3MnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyT3RoZXJJbGxuZXNzJyB0eXBlPSdidXR0b24nIHZhbHVlPSdWaWV3IHJlY2VudCBpbnB1dCc+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvbGk+DQogICAgICAgIDxocj4NCiAgICAgICAgPGxpPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0l0ZW0nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTUEFKUHJvcG9zYWxZZXMnIGlkPSdMYWJlbFBvbGljeUhvbGRlclNQQUpQcm9wb3NhbCc+DQogICAgICAgICAgICAgIEFwYWthaCBBbmRhIHRlbGFoIG1lbWlsaWtpIGF0YXUgc2VkYW5nIG1lbmdhanVrYW4gcGVydGFuZ2d1bmdhbiBBc3VyYW5zaSBKaXdhLCBrZWNlbGFrYWFuLCBrZXNlaGF0YW4sIHBlbXVsaWhhbiBwb2xpcz8gU2VydGEgYXBha2FoIHBlbmdhanVhbiBBbmRhIHBlcm5haCBkaXRvbGFrLyBkaXRhbmdndWhrYW4vZGlrZW5ha2FuIGVrc3RyYSBQcmVtaSBkaXViYWggZGFsYW0gYmVudHVrIGFwYXB1biBvbGVoIHBlcnVzYWhhYW4gQXN1cmFuc2kgSml3YT8NCiAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGRhdGEtY3VzdG9tLXJhZGlvYnV0dG9uPSdpbnB1dCcgZGF0YS1wb3B1cC10eXBlPSdzcGFqcHJvcG9zYWwnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNQQUpQcm9wb3NhbFllcycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTUEFKUHJvcG9zYWwnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU1BBSlByb3Bvc2FsWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgIDxpbnB1dCBkYXRhLWN1c3RvbS1yYWRpb2J1dHRvbj0naW5wdXQnIGRhdGEtcG9wdXAtdHlwZT0nc3BhanByb3Bvc2FsJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTUEFKUHJvcG9zYWxObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTUEFKUHJvcG9zYWwnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNQQUpQcm9wb3NhbE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25BZGRTUEFKUHJvcG9zYWwnIHR5cGU9J2J1dHRvbicgdmFsdWU9J0FkZCc+DQogICAgICAgICAgPGRpdiBpZD0nU1BBSlByb3Bvc2FsTGlzdCc+PC9kaXY+DQogICAgICAgIDwvbGk+DQogICAgICAgIDxocj4NCiAgICAgICAgPGxpPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0l0ZW0nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJDbGFpbVllcycgaWQ9J0xhYmVsUG9saWN5SG9sZGVyQ2xhaW0nPg0KICAgICAgICAgICAgICBBcGFrYWggQW5kYSBwZXJuYWggbWVuZ2FqdWthbiBrbGFpbSBrZSBwZXJ1c2FoYWFuIEFzdXJhbnNpIEppd2E\/IEppa2Eg4oCcWWEsIG1vaG9uIGplbGFza2FuIGFsYXNhbm55YS4NCiAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGRhdGEtcG9wdXAtdHlwZT0nZ2VuZXJhbCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2xhaW1ZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2xhaW0nIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2xhaW1ZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGRhdGEtcG9wdXAtdHlwZT0nZ2VuZXJhbCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2xhaW1ObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJDbGFpbScgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2xhaW1Obyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmV2aWV3JyBkYXRhLXBvcHVwLXR5cGU9J2dlbmVyYWwnIGlkPSdCdXR0b25QcmV2aWV3UG9saWN5SG9sZGVyQ2xhaW0nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2xhaW0nIHR5cGU9J2J1dHRvbicgdmFsdWU9J1ZpZXcgcmVjZW50IGlucHV0Jz4NCiAgICAgICAgPC9saT4NCiAgICAgICAgPGhyPg0KICAgICAgICA8bGk+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWdub3N0aWNZZXMnIGlkPSdMYWJlbFBvbGljeUhvbGRlckRpYWdub3N0aWMnPg0KICAgICAgICAgICAgICBBcGFrYWggQW5kYSBwZXJuYWggbWVuZGFwYXRrYW4gYXRhdSBiZXJtYWtzdWQgbWVuamFsYW5pIHBlbWVyaWtzYWFuIGtlc2VoYXRhbiBkaWFnbm9zdGlrLCBzZXBlcnRpIFNpbmFyLVgsIFVTRywgQ1Qtc2NhbiwgTVJJLCBFS0csIFRyZWFkbWlsbCwgcGVtZXJpa3NhYW4gZGFyYWgsIHBlbWVyaWtzYWFuIHVyaW4sIGRhbiBsYWluLWxhaW4\/DQogICAgICAgICAgICA8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICAgIDxpbnB1dCBkYXRhLXBvcHVwLXR5cGU9J2dlbmVyYWwnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWdub3N0aWNZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhZ25vc3RpYycgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJEaWFnbm9zdGljWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgIDxpbnB1dCBkYXRhLXBvcHVwLXR5cGU9J2dlbmVyYWwnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWdub3N0aWNObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJEaWFnbm9zdGljJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJEaWFnbm9zdGljTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJldmlldycgZGF0YS1wb3B1cC10eXBlPSdnZW5lcmFsJyBpZD0nQnV0dG9uUHJldmlld1BvbGljeUhvbGRlckRpYWdub3N0aWMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhZ25vc3RpYycgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nVmlldyByZWNlbnQgaW5wdXQnPg0KICAgICAgICA8L2xpPg0KICAgICAgICA8aHI+DQogICAgICAgIDxsaT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBmb3I9J1ByZWduYW5jeVllcyc+S2h1c3VzIENhbG9uIFRlcnRhbmdndW5nIGFuYWstYW5hayAodXNpYSDiiaQgNSAobGltYSkgdGFodW4pOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGZvcj0nUHJlZ25hbmN5WWVzJz5XYWt0dSBsYWhpcjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclByZWduYW5jeU5vcm1hbCcgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJQcmVnbmFuY3knIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUHJlZ25hbmN5Tm9ybWFsJz5DdWt1cCBCdWxhbjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclByZWduYW5jeVByZW1hdHVyJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclByZWduYW5jeScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyUHJlZ25hbmN5UHJlbWF0dXInPlByZW1hdHVyPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgZm9yPSdCYWJ5SGVpZ2h0Jz5QYW5qYW5nIGRhbiBiZXJhdCBzYWF0IGxhaGlyPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVyQmFieUhlaWdodCcgc3R5bGU9J21hcmdpbi1yaWdodDogMTBweDsnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckJhYnlIZWlnaHQnPkNtPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlckJhYnlXZWlnaHQnIHN0eWxlPSdtYXJnaW4tbGVmdDogMTBweDsgbWFyZ2luLXJpZ2h0OiAxMHB4OycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyQmFieVdlaWdodCc+S2c8L2xhYmVsPg0KICAgICAgICA8L2xpPg0KICAgICAgICA8aHI+DQogICAgICAgIDxsaSBjbGFzcz0nQ29udGFpbmVyRmVtYWxlUXVlc3Rpb24nPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdIZWFsdGhEaXNzb3JkZXJZZXMnPg0KICAgICAgICAgICAgUGVydGFueWFhbiBraHVzdXMgdW50dWsgd2FuaXRhOg0KICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXInPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclByZWduYW50WWVzJyBpZD0nTGFiZWxQb2xpY3lIb2xkZXJQcmVnbmFudCc+DQogICAgICAgICAgICAgICAgICBBcGFrYWggQW5kYSBzZWRhbmcgaGFtaWw\\\\\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IS1NlbGZPck5pZ2h0WWVzJyBuYW1lPSdSYWRpb0J1dHRvbkhLU2VsZk9yTmlnaHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSEtTZWxmT3JOaWdodFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IS1NlbGZPck5pZ2h0Tm8nIG5hbWU9J1JhZGlvQnV0dG9uSEtTZWxmT3JOaWdodCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSEtTZWxmT3JOaWdodE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SEtTZWxmT3JOaWdodERlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjEwLiBBcGFrYWggQW5kYSBtZW5kYWtpIGhhbnlhIHVudHVrIHNla2VkYXIgb2xhaCByYWdhIHNhamEgYXRhdSBzZWJhZ2FpIGJhZ2lhbiBkYXJpIHBla2VyamFhbj88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdQb3NpdGlvbmVyTGVmdCc+T2xhaCByYWdhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbkhLU3BvcnRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uSEtTcG9ydCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25IS1Nwb3J0WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uSEtTcG9ydE5vJyBuYW1lPSdSYWRpb0J1dHRvbkhLU3BvcnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkhLU3BvcnRObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdQb3NpdGlvbmVyTGVmdCc+UGVrZXJqYWFuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbkhLSm9iWWVzJyBuYW1lPSdSYWRpb0J1dHRvbkhLSm9iJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkhLSm9iWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uSEtKb2JObycgbmFtZT0nUmFkaW9CdXR0b25IS0pvYicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uSEtKb2JObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0Jz5KaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRIS0pvYicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPjExLiBQZXJuYWhrYWggQW5kYSBtZW5nYWxhbWkga2VjZWxha2FhbiBzZXdha3R1IG1lbmRha2kgZ3VudW5nL3BhbmphdCB0ZWJpbmc\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IS0FjY2lkZW50WWVzJyBuYW1lPSdSYWRpb0J1dHRvbkhLQWNjaWRlbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSEtBY2NpZGVudFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IS0FjY2lkZW50Tm8nIG5hbWU9J1JhZGlvQnV0dG9uSEtBY2NpZGVudCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSEtBY2NpZGVudE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SEtBY2NpZGVudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz4xMi4gTW9ob24gQW5kYSBtZW1iZXJpa2FuIGluZm9ybWFzaSB0YW1iYWhhbiBsYWluIHlhbmcgbWVudXJ1dCBBbmRhIHBlbnRpbmcgbXVuZ2tpbiBkYXBhdCBtZW1iYW50dSBwcm9zZXMgcGVuZ2FqdWFuIGFzdXJhbnNpIGluaSBkZW5nYW4gbWVsZW5na2FwaSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEhLQWRkaXRpb25hbEluZm9ybWF0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICA8aDI+UEVSTllBVEFBTiBEQU4gS1VBU0E8L2gyPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbnlhdGFrYW4gZGVuZ2FuIHNlYmVuYXJueWEgYmFod2Egc2VtdWEgcGVybnlhdGFhbiBkYW4gamF3YWJhbiBkaSBhdGFzIGFkYWxhaCBsZW5na2FwIGRhbiBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YS48L2xpPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci8gUnVtYWggU2FraXQvIEtsaW5pay8gUHVza2VzbWFzLyBsYWJvcmF0b3JpdW0sIHBlcnVzYWhhYW4gYXN1cmFuc2kgYXRhdSBwZXJ1c2FoYWFuIHJlYXN1cmFuc2ksIGJhZGFuLCBpbnN0YW5zaS8gbGVtYmFnYSBhdGF1IHBpaGFrIGxhaW4geWFuZyBtZW1wdW55YWkgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLCB1bnR1ayBtZW5ndW5na2Fwa2FuIGtlcGFkYSBQZW5hbmdndW5nIHNlbXVhIGtldGVyYW5nYW4gdGVudGFuZyBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU3VyYXQgUGVuZ2FqdWFuIEFzdXJhbnNpIEppd2EgZGFuIGFrYW4gbWVuZ2lrYXQgc2F5YSwgYWhsaSB3YXJpcywgZGFuIGtlbHVhcmdhIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IHNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggc2F5YSBtZW5pbmdnYWwuIFNhbGluYW4vIGZvdG9rb3BpIGRhcmkgc3VyYXQga3Vhc2EgaW5pIHNhbWEgc2FoIGJlcmxha3VueWEgc2VwZXJ0aSBkb2t1bWVuIGFzbGkuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBSYWNpbmcnPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBSYWNpbmcnPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwQ2FuY2VsKCdQb3BVcFJhY2luZycsICdQb3BVcEFjdGl2aXR5JykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBSYWNpbmcnLCAnUG9wVXBBY3Rpdml0eScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ1JhY2luZycsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0RvbmUnPg0KICAgICAgICAgIDxoMj5LdWVzaW9uZXIgT2xhaHJhZ2EgTW90b3IgLyBTZXBlZGEgTW90b3I8L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDQnPk9MQUhSQUdBIE1PVE9SIC8gU0VQRURBIE1PVE9SPC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4xLiBBcGFrYWggamVuaXMga2VnaWF0YW4gb2xhaCByYWdhIG1vdG9yIHlhbmcgQW5kYSBsYWt1a2FuPzwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPk1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDwvYnI+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNBY3Rpdml0eScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjIuIEFwYWthaCBqZW5pcyBrZW5kYXJhYW4gYmVybW90b3IgeWFuZyBBZGEga2VuZGFyYWk\/PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pIChNb2RlbCwgdGFodW4gcGVtYnVhdGFuLCB1a3VyYW4gbWVzaW4sIGRhbiBrYXRlZ29yaSBzZWNhcmEgdGVycGVyaW5jaSkuPC9sYWJlbD4NCiAgICAgICAgICA8L2JyPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJDVmVoaWNsZU1vZGVsJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+My4gU2VidXRrYW4gdHVqdWFuIGtlZ2lhdGFuIG9sYWggcmFnYSBtb3Rvci8gc2VwZWRhIG1vdG9yIHlhbmcgQW5kYSBsYWt1a2FuOiA\/PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VFbnRlcnRhaW5tZW50JyBuYW1lPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2VudGVydGFpbm1lbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlRW50ZXJ0YWlubWVudCc+SGlidXJhbjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlQ29tcGV0aXRpb24nIG5hbWU9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nY29tcGV0aXRpb24nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlQ29tcGV0aXRpb24nPlBlcmxvbWJhYW48L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25SQ0FjdGl2aXR5UHVycG9zZVNwb25zb3InIG5hbWU9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc3BvbnNvcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VTcG9uc29yJz5TcG9uc29yPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VBbWF0ZXVyJyBuYW1lPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2FtYXRldXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlQW1hdGV1cic+QW1hdGlyPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VQcm9mZXNzaW9uYWwnIG5hbWU9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ncHJvZmVzc2lvbmFsJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25SQ0FjdGl2aXR5UHVycG9zZVByb2Zlc3Npb25hbCc+UHJvZmVzaW9uYWw8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VPdGhlcnMnIG5hbWU9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlT3RoZXJzJz5MYWlubnlhLCBzZWJ1dGthbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UkNBY3Rpdml0eVB1cnBvc2VPdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz40LiBCZXJhcGEgbGFtYSBBbmRhIGFrdGlmIGRhbGFtIG9sYWggcmFnYSBpbmk\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNTdGlsbEFjdGl2ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjUuIERpIG1hbmEgQW5kYSBtZWxha3VrYW4gcGVybG9tYmFhbj8gKFNlYnV0a2FuIG5hbWEgc2VtdWEgYWNhcmEgeWFuZyBkaXNlbGVuZ2dhcmFrYW4pPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNQbGFjZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+Ni4gTW9ob24gc2VidXRrYW4gTGlzZW5zaS8gU2VydGlmaWthdCB5YW5nIEFuZGEgbWlsaWtpPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIENlbnRlciBNYXJnaW4nPkxpc2Vuc2kvIFNlcnRpZmlrYXQ8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+VGFuZ2dhbCBQZXJvbGVoYW48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+TWFzYSBCZXJsYWt1PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGVPYnRhaW4xJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGUyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlRXh0ZW50aW9uMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlT2J0YWluMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGVFeHRlbnRpb24zJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGVPYnRhaW40JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGU1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlRXh0ZW50aW9uNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+Ny4gQXBha2FoIEFuZGEgYmVycGFydGlzaXBhc2kgYXRhdSBiZXJuaWF0IHVudHVrIGJlcnBhcnRpc2lwYXNpIGRhbGFtIHNldGlhcCBrb21wZXRpc2k\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTWVkaXVtIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNQYXJ0aWNpcGF0aW5nWWVzJyBuYW1lPSdSYWRpb0J1dHRvblJDUGFydGljaXBhdGluZycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25SQ1BhcnRpY2lwYXRpbmdZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNQYXJ0aWNpcGF0aW5nTm8nIG5hbWU9J1JhZGlvQnV0dG9uUkNQYXJ0aWNpcGF0aW5nJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25SQ1BhcnRpY2lwYXRpbmdObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJDUGFydGljaXBhdGluZ0xvY2F0aW9uRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+OC4gQXBha2FoIEFuZGEgYW5nZ290YSBzdWF0dSBrbHViIGF0YXUgYXNvc2lhc2kgYmFsYXA\\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBDZW50ZXIgTWFyZ2luJz48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+VG90YWw8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+MSBUYWh1biBUZXJha2hpcjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXIgTWFyZ2luJz4xIFRhaHVuIFlhbmcgQWthbiBEYXRhbmcgKHBlcmtpcmFhbik8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIENlbnRlciBNYXJnaW4nPkp1bWxhaCBQZW5lcmJhbmdhbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UEdUb3RhbEFtb3VudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UEdUb3RhbExhc3QxWWVhckFtb3VudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UEdUb3RhbE5leHQxWWVhckFtb3VudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+SnVtbGFoIEphbSBUZXJiYW5nPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQR1RvdGFsSG91cicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UEdUb3RhbExhc3QxWWVhckhvdXInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBHVG90YWxOZXh0MVllYXJIb3VyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz41LiBTZWJ1dGthbiB0dWp1YW4gdGVyYmFuZyBsYXlhbmcgQW5kYS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBHRGVzdGluYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdXcmFwJz42LiBBZGFrYWggdHVqdWFuIGxhaW4gZGFyaSBBbmRhIG1lbGFrdWthbiB0ZXJiYW5nIGxheWFuZz8gKE1pc2FsbnlhIGtlZ2lhdGFuIHBlcnRhbmlhbiBhdGF1IGtvbWVyc2lsIGRhbiBsYWluLWxhaW4pPC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZVllcycgbmFtZT0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZU5vJyBuYW1lPSdSYWRpb0J1dHRvblBHT3RoZXJQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnPihKaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtIE1hcmdpbicgaWQ9J1RleHRQR090aGVyUHVycG9zZURlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdXcmFwJz43LiBBcGFrYWggQW5kYSBiZXJwYXJ0aXNpcGFzaSBhdGF1IGFrYW4gYmVycGFydGlzaXBhc2kgZGFsYW0gYWVyb2JhdGljLCBwZXJsb21iYWFuLCBwYW1lcmFuIGF0YXUgdGVzIHRlcmJhbmc\\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbk9uU2hvcmUnIG5hbWU9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvbnNob3JlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQgU2Vjb25kSW5kZW50JyBmb3I9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbk9uU2hvcmUnPlBlcm11a2FhbiB0YW5haC9kYXJhdDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbk9mU2hvcmUnIG5hbWU9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvZnNob3JlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25PTExvY2F0aW9uT2ZTaG9yZSc+TGVwYXMgcGFudGFpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0gRmlyc3RJbmRlbnQnPmIuIEJpbGEgZGkgZGFyYXQgYXBha2FoIGRpIHBlcm11a2FhbiB0YW5haCBhdGF1IGRpIGJhd2FoIHRhbmFoPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbk9MTG9jYXRpb25PblNob3JlWWVzR3JvdW5kJyBuYW1lPSdSYWRpb0J1dHRvbk9MTG9jYXRpb25PblNob3JlWWVzJyB0eXBlPSdyYWRpbycgdmFsdWU9J29uc2hvcmUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCBTZWNvbmRJbmRlbnQnIGZvcj0nUmFkaW9CdXR0b25PTExvY2F0aW9uT25TaG9yZVllc0dyb3VuZCc+UGVybXVrYWFuIHRhbmFoL2RhcmF0PC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvciBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25PTExvY2F0aW9uT25TaG9yZVllc1VuZGVyZ3JvdW5kJyBuYW1lPSdSYWRpb0J1dHRvbk9MTG9jYXRpb25PblNob3JlWWVzJyB0eXBlPSdyYWRpbycgdmFsdWU9J29mc2hvcmUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbk9MTG9jYXRpb25PblNob3JlWWVzVW5kZXJncm91bmQnPkJhd2FoIHRhbmFoLCBzZWJ1dGthbiBrZWRhbGFtYW5ueWE6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRPTExvY2F0aW9uT25TaG9yZVVuZGVyZ3JvdW5kRGVwdGgnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPm1ldGVyPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQgRmlyc3RJbmRlbnQnPmMuIEFwYWthaCBBbmRhIGp1Z2EgYmVydHVnYXMgZGkgbGVwYXMgcGFudGFpIGRhbi9hdGF1IGJhd2FoIHRhbmFoPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25EdXR5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uRHV0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvbkR1dHlObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uRHV0eVllcycgbmFtZT0nUmFkaW9CdXR0b25EdXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25EdXR5WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4oQmVyYXBhIGZyZWt1ZW5zaW55YSBkYWxhbSAxIChzYXR1KSB0YWh1biBiZXJhZGEgZGkgbG9rYXNpIHRlcnNlYnV0IGRhbiBiZXJhcGEgbGFtYSk\\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24nPg0KICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uVFZSZWFzb25WYWNhdGlvbicgbmFtZT0nUmFkaW9CdXR0b25UVlJlYXNvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSd2YWNhdGlvbic+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25UVlJlYXNvblZhY2F0aW9uJz5MaWJ1cmFuPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRWUmVhc29uQnVzaW5lc3MnIG5hbWU9J1JhZGlvQnV0dG9uVFZSZWFzb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nYnVzaW5lc3MnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVFZSZWFzb25CdXNpbmVzcyc+QmlzbmlzPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRWUmVhc29uT3RoZXJzJyBuYW1lPSdSYWRpb0J1dHRvblRWUmVhc29uJyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRWUmVhc29uT3RoZXJzJz5MYWlubnlhLCBzZWJ1dGthbjwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFRWUmVhc29uT3RoZXJEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4yLiBTZWJ1dGthbiBkZW5nYW4gcmluY2kgdHVqdWFuIHJlbmNhbmEgYmVwZXJnaWFuIGRhbGFtIDEyIChkdWEgYmVsYXMpIGJ1bGFuIHlhbmcgYWthbiBkYXRhbmcgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmk6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+TmVnYXJhPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlciBNYXJnaW4nPktvdGE8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+VGFuZ2dhbCBUaWJhPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlciBNYXJnaW4nPlRhbmdnYWwgQmVyYW5na2F0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlciBNYXJnaW4nPlRpcGUgVmlzYTwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFRWRGVzdGluYXRpb25Db3VudHJ5MScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0VFZEZXN0aW5hdGlvbkNpdHkxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUVkFycml2YWxEYXRlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0VFZEZXBhcnR1cmVEYXRlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0VFZWaXNhVHlwZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUVkRlc3RpbmF0aW9uQ291bnRyeTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWRGVzdGluYXRpb25DaXR5MicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0VFZBcnJpdmFsRGF0ZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFRWRGVwYXJ0dXJlRGF0ZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWVmlzYVR5cGUyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0VFZEZXN0aW5hdGlvbkNvdW50cnkzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVkRlc3RpbmF0aW9uQ2l0eTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFRWQXJyaXZhbERhdGUzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUVkRlcGFydHVyZURhdGUzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVlZpc2FUeXBlMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFRWRGVzdGluYXRpb25Db3VudHJ5NCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0VFZEZXN0aW5hdGlvbkNpdHk0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUVkFycml2YWxEYXRlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0VFZEZXBhcnR1cmVEYXRlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0VFZWaXNhVHlwZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUVkRlc3RpbmF0aW9uQ291bnRyeTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWRGVzdGluYXRpb25DaXR5NScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0VFZBcnJpdmFsRGF0ZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFRWRGVwYXJ0dXJlRGF0ZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWVmlzYVR5cGU1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4zLiBTZWJ1dGthbiBkZW5nYW4gcmluY2kgdHVqdWFuIHBlcmphbGFuYW4geWFuZyB0ZWxhaCBkaWxha3VrYW5kYWxhbSAxMiAoZHVhIGJlbGFzKSBidWxhbiB0ZXJha2hpciAgIHBhZGEga29sb20gZGkgYmF3YWggaW5pOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIENlbnRlciBNYXJnaW4nPk5lZ2FyYTwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXIgTWFyZ2luJz5Lb3RhPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlciBNYXJnaW4nPlRhbmdnYWwgVGliYTwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXIgTWFyZ2luJz5UYW5nZ2FsIEJlcmFuZ2thdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXIgTWFyZ2luJz5UaXBlIFZpc2E8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNvdW50cnkxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNpdHkxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUVk5leHRBcnJpdmFsRGF0ZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFRWTmV4dERlcGFydHVyZURhdGUxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHRWaXNhVHlwZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNvdW50cnkyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNpdHkyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUVk5leHRBcnJpdmFsRGF0ZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFRWTmV4dERlcGFydHVyZURhdGUyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHRWaXNhVHlwZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNvdW50cnkzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNpdHkzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUVk5leHRBcnJpdmFsRGF0ZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFRWTmV4dERlcGFydHVyZURhdGUzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHRWaXNhVHlwZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNvdW50cnk0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNpdHk0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUVk5leHRBcnJpdmFsRGF0ZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFRWTmV4dERlcGFydHVyZURhdGU0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHRWaXNhVHlwZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNvdW50cnk1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHREZXN0aW5hdGlvbkNpdHk1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUVk5leHRBcnJpdmFsRGF0ZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFRWTmV4dERlcGFydHVyZURhdGU1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVk5leHRWaXNhVHlwZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjQuIFNlYnV0a2FuIGtld2FyZ2FuZWdhcmFhbiBBbmRhLiAoSmlrYSBsZWJpaCBkYXJpIDEga2V3YXJnYW5lZ2FyYWFuIG1vaG9uIHNlYnV0a2FuIHNlbHVydWhueWEgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0TXlOYXRpb25hbGl0eScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+NS4gU2VidXRrYW4gZGVuZ2FuIHJpbmNpIGFzZXQgYXRhdSBwZXJ1bWFoYW4geWFuZyBkaW1pbGlraS9kaWtvbnRyb2wgb2xlaCBBbmRhIGRpIG5lZ2FyYSB5YW5nIEFuZGEga3VuanVuZ2kgYXRhdSBuZWdhcmEgdGVtcGF0IEFuZGEgdGluZ2dhbCwgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmk6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0QWJyb2FkQXNzZXQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjYuIEppa2EgQW5kYSBiZXJlbmNhbmEgdW50dWsgYmVyYWRhIGRpIG5lZ2FyYSBtYW5hcHVuIHNlbGFtYSBsZWJpaCBkYXJpIDIxIGhhcmksIGhhcmFwIG1lbWJlcmlrYW4gcmluY2lhbiBzZWJhZ2FpIGJlcmlrdXQ8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+YS4gSmVuaXMgdGVtcGF0IHRpbmdnYWwgQW5kYTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+KG1pc2FsOiBhcGFydGVtZW4sIHJ1bWFoLCBob3RlbCwgdGVtcGF0IHBlbmFtcHVuZ2FuIHNlbWVudGFyYSwgZGxsKTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWU3RheScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5iLiBBbGFtYXQgbGVuZ2thcCB0ZW1wYXQgdGluZ2dhbCBBbmRhOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4oVGVybWFzdWsgbmFtYSBqYWxhbiBkYW4gbm9tb3IsIGtvdGEsIGtvZGUgcG9zLCBuZWdhcmEpLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWQWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5jLiBTZWJlcmFwYSBqYXVoIGphcmFrIGZhc2lsaXRhcyBtZWRpcyBkYXJpIHRlbXBhdCB0aW5nZ2FsIEFuZGE6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPihKYXJhayBtZW51anUgcHJha3RlayBkb2t0ZXIgZGFuL2F0YXUgcnVtYWggc2FraXQpLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWSG9zcGl0YWxEaXN0YW5jZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+Ny4gSmlrYSBwZXJqYWxhbmFuIEFuZGEgdW50dWsgdHVqdWFuIGJpc25pcywgaGFyYXAgbWVtYmVyaWthbiByaW5jaWFuIHNlYmFnYWkgYmVyaWt1dDwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5hLiBOYW1hIHBlcnVzYWhhYW4vdGVtcGF0IHVzYWhhOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWQ29tcGFueUJ1c2luZXNzTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5iLiBKZW5pcyB1c2FoYTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVkJ1c2luZXNzVHlwZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5jLiBUdWdhcyBkYW4gdGFuZ2d1bmcgamF3YWI6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0VFZKb2JEZXNjcmlwdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5kLiBUYW5nZ2FsIG11bGFpIHBlcmphbGFuYW4gYmlzbmlzOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZVRWVHJpcFN0YXJ0ZWQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+ZS4gUmVtdW5lcmFzaSB0YWh1bmFuOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWQW5udWFsUmVtdW5lcmF0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPmYuIFNlYnV0a2FuIGRlbmdhbiByaW5jaSBjYXJhIG1lbmRhcGF0a2FuIHBlcmF3YXRhbiBrZXNlaGF0YW4gZGFuIGNhcmEgYXRhdSBwcm9zZWR1ciBkYWxhbSBrYXN1cyBwZW55YWtpdCBiZXJhdCBhdGF1IGNlZGVyYTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVkluanVyeVByb2NlZHVyZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5nLiBTYXJhbmEgdHJhbnNwb3J0YXNpIHlhbmcgdGVyc2VkaWEgZGkgbmVnYXJhIHRlcnNlYnV0OjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4oTWlzYWw6IGFuZ2t1dGFuIHVtdW0gYXRhdSBwcmliYWRpLCBwZXNhd2F0IHByaWJhZGksIGRhbiBsYWluLWxhaW4pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWVHJhbnNwb3J0YXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+aC4gU2VidXRrYW4gYWxhdC9wZXJhbmdrYXQgcGVuZ2FtYW4geWFuZyBkaXNpYXBrYW4vZGlwZXJndW5ha2FuIG9sZWggcGVtYmVyaSBrZXJqYSBwYWRhIHNhYXQgbWVsYWt1a2FuIHBla2VyamFhbjo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVlNhZmV0eUVxdWlwbWVudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5pLiBBcGFrYWggQW5kYSB0ZXJpa2F0IGRlbmdhbiBzdWF0dSBrb250cmFrIGF0YXUgcGVyamFuamlhbj8gTW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4oVGFuZ2dhbCBtdWxhaSwgZHVyYXNpIGRhbiBsYWluLWxhaW4gc2VydGEgbWVtYmVyaWthbiBmb3Rva29waSBrb250cmFrIGF0YXUgcGVyamFuamlhbiBqaWthIHRlcnNlZGlhKS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUVkNvbnRyYWN0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz44LiBNb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRWQWRkaXRpb25hbEluZm9ybWF0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICA8aDI+UEVSTllBVEFBTiBEQU4gS1VBU0E8L2gyPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbnlhdGFrYW4gZGVuZ2FuIHNlYmVuYXJueWEgYmFod2Egc2VtdWEgcGVybnlhdGFhbiBkYW4gamF3YWJhbiBkaSBhdGFzIGFkYWxhaCBsZW5na2FwIGRhbiBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YS48L2xpPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci8gUnVtYWggU2FraXQvIEtsaW5pay8gUHVza2VzbWFzLyBsYWJvcmF0b3JpdW0sIHBlcnVzYWhhYW4gYXN1cmFuc2kgYXRhdSBwZXJ1c2FoYWFuIHJlYXN1cmFuc2ksIGJhZGFuLCBpbnN0YW5zaS8gbGVtYmFnYSBhdGF1IHBpaGFrIGxhaW4geWFuZyBtZW1wdW55YWkgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLCB1bnR1ayBtZW5ndW5na2Fwa2FuIGtlcGFkYSBQZW5hbmdndW5nIHNlbXVhIGtldGVyYW5nYW4gdGVudGFuZyBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU3VyYXQgUGVuZ2FqdWFuIEFzdXJhbnNpIEppd2EgZGFuIGFrYW4gbWVuZ2lrYXQgc2F5YSwgYWhsaSB3YXJpcywgZGFuIGtlbHVhcmdhIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IHNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggc2F5YSBtZW5pbmdnYWwuIFNhbGluYW4vIGZvdG9rb3BpIGRhcmkgc3VyYXQga3Vhc2EgaW5pIHNhbWEgc2FoIGJlcmxha3VueWEgc2VwZXJ0aSBkb2t1bWVuIGFzbGkuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBGbGlnaHQnPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBGbGlnaHQnPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwQ2FuY2VsKCdQb3BVcEZsaWdodCcsICdQb3BVcEFjdGl2aXR5JykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBGbGlnaHQnLCAnUG9wVXBBY3Rpdml0eScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0ZsaWdodCcsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0RvbmUnPg0KICAgICAgICAgIDxoMj5LdWVzaW9uZXIgUGVuZXJiYW5nYW48L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBNQUlOIC0tPg0KICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9pdGlvbmVyTGVmdCc+MS4gQW5kYSB0ZXJiYW5nIHNlYmFnYWkgPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25GTEpvYlBpbG90JyBuYW1lPSdSYWRpb0J1dHRvbkZMSm9iJyB0eXBlPSdyYWRpbycgdmFsdWU9J3BpbG90Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25GTEpvYlBpbG90Jz5QaWxvdDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkZMSm9iU3Rld2FyZGVzcycgbmFtZT0nUmFkaW9CdXR0b25GTEpvYicgdHlwZT0ncmFkaW8nIHZhbHVlPSdzdGV3YXJkZXNzJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25GTEpvYlN0ZXdhcmRlc3MnPlByYW11Z2FyaTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkZMSm9iTmF2aWdhdG9yJyBuYW1lPSdSYWRpb0J1dHRvbkZMSm9iJyB0eXBlPSdyYWRpbycgdmFsdWU9J25hdmlnYXRvcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uRkxKb2JOYXZpZ2F0b3InPk5hdmlnYXRvcjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb2l0aW9uZXJMZWZ0Jz4yLiBBcGFrYWggQW5kYSBtZW1pbGlraSBwZXNhd2F0IHNlbmRpcmk\\\/PC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25BbGNvaG9sJyBvbmNsaWNrPSJidXR0b25Qb3BVcE5hdmlnYXRpb24odGhpcy5pZCwgJ1BvcFVwSnVua2llJywgJ1BvcFVwQWxjb2hvbCcsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0FsY29ob2wnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdLdWVzaW9uZXIgQWxrb2hvbCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSc+c2lsYWhrYW4gbWVtYmVyaWthbiByaW5jaWFuIGxlYmloIGxhbmp1dDwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0nRnVsbCBNdWx0aScgaWQ9J0FyZWFBbWFuZG1lbnREZXRhaWwnPjwvdGV4dGFyZWE+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz4obWFrc2ltdW0gMjUwIGthcmFrdGVyKTwvbGFiZWw+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwQWxjb2hvbCc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcEFsY29ob2wnPg0KICAgICAgICA8aGVhZGVyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0J1dHRvbkNhbmNlbCcgb25jbGljaz0iYnV0dG9uU3ViUG9wVXBDYW5jZWwoJ1BvcFVwQWxjb2hvbCcsICdQb3BVcEp1bmtpZScpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdDYW5jZWwnPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdCdXR0b25Eb25lJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcERvbmUoJ1BvcFVwQWxjb2hvbCcsICdQb3BVcEp1bmtpZScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0FsY29ob2wnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S1VFU0lPTkVSIEFMS09IT0wgREFOIFBFTkdHVU5BQU4gT0JBVC1PQkFUQU48L2gyPg0KICAgICAgICAgIDwhLS0gTUFJTiAtLT4NCiAgICAgICAgPC9oZWFkZXI+DQogICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICA8Zm9ybSBpZD0nSGVhbHRoUXVlc3Rpb25uYWlyZU1haW4nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkFMQ29uc3VtZSc+MS4gQXBha2FoIHNhYXQgaW5pIEFuZGEgbWVuZ2tvbnN1bXNpIGFsa29ob2wvb2JhdC1vYmF0YW4\\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25BTENoZWNrVXBZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQUxDaGVja1VwJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQUxDaGVja1VwWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25BTENoZWNrVXBObycgbmFtZT0nUmFkaW9CdXR0b25BTENoZWNrVXAnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQUxDaGVja1VwTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBkYW4gYmVyYXBhIGxhbWEgdGVyamFkaW55YSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRBTENoZWNrVXAnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGhyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+OS4gTW9ob24gQW5kYSBtZW1iZXJpa2FuIGluZm9ybWFzaSB0YW1iYWhhbiBsYWluIHlhbmcgbWVudXJ1dCBBbmRhIHBlbnRpbmcgbXVuZ2tpbiBkYXBhdCBtZW1iYW50dSBwcm9zZXMgcGVuZ2FqdWFuIGFzdXJhbnNpIGluaSBkZW5nYW4gbWVsZW5na2FwaSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBQb3NpdGlvbmVyTGVmdCBNYXJnaW4nIGlkPSdUZXh0QUxBZGR0aW9uYWxJbmZvcm1hdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8aHI+DQogICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgICAgPGgyPlBFUk5ZQVRBQU4gREFOIEtVQVNBPC9oMj4NCiAgICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgICAgPGxpPlNheWEvS2FtaSBtZW55YXRha2FuIGJhaHdhIFNheWEvS2FtaSB0ZWxhaCBtZW1haGFtaSBkYW4gbWVueWV0dWp1aSB1bnR1ayBtZW5naXNpIHNlY2FyYSBsZW5na2FwIGRhbiBiZW5hciBzZW11YSBpbmZvcm1hc2kgZGFsYW0gS3Vlc2lvbmVyIEFsa29ob2wgZGFuIFBlbmdndW5hYW4gT2JhdC1vYmF0YW4gaW5pIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhIHNlYmFnYWkgYmFnaWFuIGRhcmkga29udHJhayAgIGFzdXJhbnNpIEppd2EvS2VzZWhhdGFuL0tlY2VsYWthYW4uPC9saT4NCiAgICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci9SdW1haCBTYWtpdC9LbGluaWsvUHVza2VzbWFzL0xhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpL2xlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gU2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBtZW5nZW5haSBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBTYXlhLjwvbGk+DQogICAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU1BBSiBkYW4gYWthbiBtZW5naWthdCBTYXlhLCBQZW5lcmltYSBNYW5mYWF0L0FobGkgV2FyaXMsIGRhbiBrZWx1YXJnYSBTYXlhIChqaWthIGFkYSkuPC9saT4NCiAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgU2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBTYXlhIG1lbmluZ2dhbCBkdW5pYS4gU2FsaW5hbi9mb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgICAgIDxsaT5BcGFiaWxhIGluZm9ybWFzaSB0ZXJzZWJ1dCB5YW5nIFNheWEvS2FtaSBiZXJpa2FuIHRpZGFrIGJlbmFyLCBtYWthIFBlbmFuZ2d1bmcgYmVyaGFrIG1lbWJhdGFsa2FuIFBvbGlzIFNheWEvS2FtaSBzZWphayBhd2FsLjwvbGk+DQogICAgICAgICAgICA8L29sPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgPC9mb3JtPg0KICAgIDwvc2VjdGlvbj4NCiAgICA8c2VjdGlvbiBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcFJlc3BpcmF0b3J5Jz4NCiAgICAgIDxmb3JtIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwUmVzcGlyYXRvcnknPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblBvcFVwQ2FuY2VsKCdQb3BVcFJlc3BpcmF0b3J5JykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblBvcFVwRG9uZSgnUG9wVXBSZXNwaXJhdG9yeScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ1Jlc3BpcmF0b3J5JywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlLCBbJ1JhZGlvQnV0dG9uJyArIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ1Jlc3BpcmF0b3J5RGV0YWlsJyArICdEaXNydXB0aW9uJ10pIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+UGVydGFueWFhbiBLZXNlaGF0YW48L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDZjJz5HYW5nZ3VhbiBmdW5nc2kvc2lzdGVtIFBlcm5hcGFzYW4sIFBhcnUtcGFydSwgQXNtYSwgQnJvbmtpdGlzLCBUdWJlcmt1bG9zaXMsIEJhdHVrIERhcmFoIGRhbiBsYWlubnlhPzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24nPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5JyBpZD0nQnV0dG9uUmVzcGlyYXRvcnknIG9uY2xpY2s9ImJ1dHRvblBvcFVwTmF2aWdhdGlvbih0aGlzLmlkLCAnUG9wVXBSZXNwaXJhdG9yeScsICdQb3BVcFJlc3BpcmF0b3J5RGV0YWlsJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnUmVzcGlyYXRvcnlEZXRhaWwnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdLdWVzaW9uZXIgR2FuZ2d1YW4gUGVybmFwYXNhbic+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSc+c2lsYWhrYW4gbWVtYmVyaWthbiByaW5jaWFuIGxlYmloIGxhbmp1dDwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0nRnVsbCBNdWx0aScgaWQ9J0FyZWFBbWFuZG1lbnREZXRhaWwnPjwvdGV4dGFyZWE+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz4obWFrc2ltdW0gMjUwIGthcmFrdGVyKTwvbGFiZWw+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwUmVzcGlyYXRvcnlEZXRhaWwnPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBSZXNwaXJhdG9yeURldGFpbCc+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcENhbmNlbCgnUG9wVXBSZXNwaXJhdG9yeURldGFpbCcsICdQb3BVcFJlc3BpcmF0b3J5JykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBSZXNwaXJhdG9yeURldGFpbCcsICdQb3BVcFJlc3BpcmF0b3J5Jywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnUmVzcGlyYXRvcnlEZXRhaWwnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S1VFU0lPTkVSIEdBTkdHVUFOIFBFUk5BUEFTQU48L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBNQUlOIC0tPg0KICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNdWx0aSBTaW5nbGUgNmMnPkdhbmdndWFuIGZ1bmdzaS9zaXN0ZW0gUGVybmFwYXNhbiwgUGFydS1wYXJ1LCBBc21hLCBCcm9ua2l0aXMsIFR1YmVya3Vsb3NpcywgQmF0dWsgRGFyYWggZGFuIGxhaW5ueWE\/PC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjEuIEFwYWthaCBnYW5nZ3VhbiBwZXJuYXBhc2FuIHlhbmcgQW5kYSBkZXJpdGE\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uRGlzcnVwdGlvbkFzdGhtYScgbmFtZT0nUmFkaW9CdXR0b25EaXNydXB0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J2FzdGhtYSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uRGlzcnVwdGlvbkFzdGhtYSc+QXNtYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkRpc3J1cHRpb25Ccm9uY2hpdGlzJyBuYW1lPSdSYWRpb0J1dHRvbkRpc3J1cHRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nYnJvbmNoaXRpcyc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uRGlzcnVwdGlvbkJyb25jaGl0aXMnPkJyb25jaGl0aXM8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25EaXNydXB0aW9uVEJDJyBuYW1lPSdSYWRpb0J1dHRvbkRpc3J1cHRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndGJjJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25EaXNydXB0aW9uVEJDJz5UQkM8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25EaXNydXB0aW9uT3RoZXJzJyBuYW1lPSdSYWRpb0J1dHRvbkRpc3J1cHRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkRpc3J1cHRpb25PdGhlcnMnPkxhaW5ueWEsIHNlYnV0a2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RGlzcnVwdGlvbk90aGVyRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+Mi4gS2FwYW4gcGVydGFtYSBrYWxpIEFuZGEgbWVyYXNha2FuIGdlamFsYS1nZWphbGEgdGVyc2VidXQ\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUZpcnN0VGltZUFyaXNlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4zLiBhLiBCZXJhcGEga2FsaSBzZXJhbmdhbiBkYWxhbSAyIChkdWEpIHRhaHVuIHRlcmFraGlyPzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRMYXN0VHdvWWVhcnNBdHRhY2snIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0nPmthbGk8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+Yi4gS2FwYW4gc2VyYW5nYW4gdGVyYWtoaXI\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUxhc3RBdHRhY2snIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+NC4gQmVyYXBhIGthbGkgc2VyYW5nYW4tc2VyYW5nYW4gdGVyc2VidXQgbWVueWViYWJrYW4gQW5kYTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz4oTW9ob24gbWVsYW1waXJrYW4gcmVzdW1lIHBlcmF3YXRhbiB5YW5nIEFuZGEgbWlsaWtpKTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25BdHRhY2tDYXVzZUFic2VudCcgbmFtZT0nUmFkaW9CdXR0b25BdHRhY2tDYXVzZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdhYnNlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkF0dGFja0NhdXNlQWJzZW50Jz5UaWRhayBtYXN1ayBrZXJqYSBzZWxhbWE6PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBQb3NpdGlvbmVyUmlnaHQnPlRhaHVuPC9zcGFuPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J051bWJlckF0dGFja0NhdXNlQWJzZW50WWVhcicgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJSaWdodCc+QnVsYW48L3NwYW4+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBpZD0nTnVtYmVyQXR0YWNrQ2F1c2VBYnNlbnRNb250aCcgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJSaWdodCc+TWluZ2d1PC9zcGFuPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J051bWJlckF0dGFja0NhdXNlQWJzZW50V2VlaycgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJSaWdodCc+SGFyaTwvc3Bhbj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdOdW1iZXJBdHRhY2tDYXVzZUFic2VudERheScgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkF0dGFja0NhdXNlSG9zcGl0YWwnIG5hbWU9J1JhZGlvQnV0dG9uQXR0YWNrQ2F1c2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0naG9zcGl0YWwnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkF0dGFja0NhdXNlSG9zcGl0YWwnPkRpcmF3YXQgZGkgUnVtYWggU2FraXQ8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBJdGVtJz5UYW5nZ2FsIHBlcmF3YXRhbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUF0dGFja0NhdXNlSG9zcGl0YWwnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TGFtYSBQZXJhd2F0YW48L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nRnVsbCBTaW5nbGUnIHN0eWxlPSd3aWR0aDogMTAwJTsnPg0KICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRBdHRhY2tDYXVzZUhvc3BpdGFsRHVyYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdTZWxlY3RBdHRhY2tDYXVzZUhvc3BpdGFsQW1vdW50UGVyaW9kJz48L3NlbGVjdD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3RlcjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEF0dGFja0NhdXNlRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5Oby4gVGVsZXBvbi9IYW5kcGhvbmU6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QXR0YWNrQ2F1c2VIb3NwaXRhbFRlbGVwaG9uZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5OYW1hIEtsaW5pay9SdW1haFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEF0dGFja0NhdXNlSG9zcGl0YWxOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkFsYW1hdCBLbGluaWsvUnVtYWggU2FraXQ8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRBdHRhY2tDYXVzZUhvc3BpdGFsQWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+NS4gU2V3YWt0dSB0aWRhayBhZGEgc2VyYW5nYW4sIGFwYWthaCBhZGEga2VsdWhhbi1rZWx1aGFuIGJlcmlrdXQ\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1NpbmdsZScgaWQ9J1JhZGlvQnV0dG9uQ29tcGxhaW5DYXVnaCcgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdjYXVnaCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ29tcGxhaW5DYXVnaCc+YmF0dWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25Db21wbGFpblNob3J0bmVzc0JyZWF0aCcgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdzaG9ydG5lc3NicmVhdGgnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNvbXBsYWluU2hvcnRuZXNzQnJlYXRoJz5uYXBhcyBwZW5kZWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25Db21wbGFpbk5naWtTb3VuZCcgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpbicgdHlwZT0ncmFkaW8nIHZhbHVlPSduZ2lrc291bmQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNvbXBsYWluTmdpa1NvdW5kJz5iZXJidW55aSAibmdpayI8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjYuIGEuIFBlbmdvYmF0YW4gYXBha2FoIHlhbmcgZGlndW5ha2FuIHVudHVrIG1lbmdhdGFzaSBnYW5nZ3VhbiBwZXJuYXBhc2FuPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblRoZXJhcHlJbmhhbGVyJyBuYW1lPSdSYWRpb0J1dHRvblRoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0naW5oYWxlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVGhlcmFweUluaGFsZXInPmluaGFsZXI8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25UaGVyYXB5RHJ1ZycgbmFtZT0nUmFkaW9CdXR0b25UaGVyYXB5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2RydWdzJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25UaGVyYXB5RHJ1Zyc+T2JhdC1vYmF0YW4oSmVsYXNrYW4gbmFtYSBvYmF0LCBkb3NpcyBkYW4gZnJla3VlbnNpIHBlbmdndW5hYW5ueWEgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPk5hbWEgT2JhdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPkRvc2lzPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+RnJla3VlbnNpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnTmFtZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnRG9zZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnRnJlcXVlbmN5MScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdOYW1lMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdEb3NlMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdGcmVxdWVuY3kyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSUlVQRHJ1Z05hbWUzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSUlVQRHJ1Z0Rvc2UzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSUlVQRHJ1Z0ZyZXF1ZW5jeTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnTmFtZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnRG9zZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnRnJlcXVlbmN5NCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdOYW1lNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdEb3NlNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdGcmVxdWVuY3k1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPmIuIEthcGFuIG9iYXQtb2JhdGFuIHRlcnNlYnV0IGRpa29uc3Vtc2k\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Db25zdW1wdGlvbkV2ZXJ5RGF5JyBuYW1lPSdSYWRpb0J1dHRvbkNvbnN1bXB0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J2V2ZXJ5ZGF5Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Db25zdW1wdGlvbkV2ZXJ5RGF5Jz5TZXRpYXAgaGFyaTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNvbnN1bXB0aW9uV2hlbkF0dGFja2VkJyBuYW1lPSdSYWRpb0J1dHRvbkNvbnN1bXB0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J3doZW5hdHRhY2tlZCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ29uc3VtcHRpb25XaGVuQXR0YWNrZWQnPkhhbnlhIHNhYXQgc2VyYW5nYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+Yy4gQXBha2FoIG9iYXQtb2JhdGFuIHRlcnNlYnV0IG1hc2loIGRpa29uc3Vtc2kgc2FtcGFpIHNla2FyYW5nPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU3RpbGxDb25zdW1lZFllcycgbmFtZT0nUmFkaW9CdXR0b25TdGlsbENvbnN1bWVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblN0aWxsQ29uc3VtZWRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU3RpbGxDb25zdW1lZE5vJyBuYW1lPSdSYWRpb0J1dHRvblN0aWxsQ29uc3VtZWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblN0aWxsQ29uc3VtZWRObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+TW9ob24gbWVuamVsYXNrYW4gYWxzYW5ueWEgc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0U3RpbGxDb25zdW1lZERlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjcuIFNlaHVidW5nYW4gZGVuZ2FuIGdhbmdndWFuIHBlcm5hcGFzYW4sIGthcGFuIGRhbiBiYWdhaW1hbmEgaGFzaWwgcGVtZXJpa3NhYW4gZGFyYWgsIHJvbnRnZW4gZGFkYSwgc3Bpcm9tZXRyaSBsYWlubnlhPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4oTW9ob24gZGlsYW1waXJrYW4gZm90b2tvcGkgaGFzaWwgcGVtZXJpa3NhYW4pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0TWVkaWNhbENoZWNrUmVzdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPjguIE1vaG9uIGxlbmdrYXBpIGRhdGEgRG9rdGVyIGRhbiBSdW1haCBTYWtpdCB5YW5nIGJpYXNhIGRpa3VuanVuZ2kgdW50dWsgZ2FuZ2d1YW4gcGVybmFwYXNhbi48L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+PC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPExhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+VGFuZ2dhbCB0ZXJha2hpciBrb25zdWx0YXNpPC9MYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVDb25zdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2JyPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+RGlhZ25vc2E8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRDb25zdWx0RGlhZ25vc2UnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRDb25zdWx0RG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5Oby4gVGVsZXBvbi9IYW5kcGhvbmU6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0Q29uc3VsdFBob25lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dENvbnN1bHRIb3NwaXRhbE5hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRDb25zdWx0SG9zcGl0YWxBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz45LiBNb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0QWRkaXRpb25hbEluZm8nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgIDxoMj5QRVJOWUFUQUFOIERBTiBLVUFTQTwvaDI+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVueWF0YWthbiBkZW5nYW4gc2ViZW5hcm55YSBiYWh3YSBzZW11YSBwZXJueWF0YWFuIGRhbiBqYXdhYmFuIGRpIGF0YXMgYWRhbGFoIGxlbmdrYXAgZGFuIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhLjwvbGk+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW1iZXJpIGt1YXNhIGtlcGFkYSBzZXRpYXAgRG9rdGVyLyBSdW1haCBTYWtpdC8gS2xpbmlrLyBQdXNrZXNtYXMvIGxhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpLyBsZW1iYWdhIGF0YXUgcGloYWsgbGFpbiB5YW5nIG1lbXB1bnlhaSBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEsIHVudHVrIG1lbmd1bmdrYXBrYW4ga2VwYWRhIFBlbmFuZ2d1bmcgc2VtdWEga2V0ZXJhbmdhbiB0ZW50YW5nIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gc2F5YS48L2xpPg0KICAgICAgICAgICAgPGxpPkt1YXNhIGluaSBtZXJ1cGFrYW4gaGFsIHlhbmcgdGlkYWsgdGVycGlzYWhrYW4gZGFyaSBTdXJhdCBQZW5nYWp1YW4gQXN1cmFuc2kgSml3YSBkYW4gYWthbiBtZW5naWthdCBzYXlhLCBhaGxpIHdhcmlzLCBkYW4ga2VsdWFyZ2Egc2F5YS48L2xpPg0KICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgc2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBzYXlhIG1lbmluZ2dhbC5TYWxpbmFuLyBmb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwQ2FyZGlhYyc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcENhcmRpYWMnPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblBvcFVwQ2FuY2VsKCdQb3BVcENhcmRpYWMnKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2FuY2VsJz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lclJpZ2h0JyBpZD0nQnV0dG9uRG9uZScgb25jbGljaz0iYnV0dG9uUG9wVXBEb25lKCdQb3BVcENhcmRpYWMnLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdDYXJkaWFjJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlLCBbJ0RhdGUnICsgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnQ2hlc3RQYWluJyArICdGaXJzdEF0dGFjaycsICdEYXRlJyArIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0h5cGVydGVuc2lvbicgKyAnRmlyc3RUaW1lJ10pIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+UGVydGFueWFhbiBLZXNlaGF0YW48L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTXVsdGkgU2luZ2xlJyBpZD0nTGFiZWxEZXRhaWwnPg0KICAgICAgICAgICAgNmQgR2FuZ2d1YW4gZnVuZ3NpL3Npc3RlbSBKYW50dW5nIGRhbiBQZW1idWx1aCBEYXJhaCwgTnllcmkgRGFkYSwgU2VyYW5nYW4gSmFudHVuZywgRGVtYW0sIEphbnR1bmcsIFJlbWF0aWssIFRla2FuYW4gRGFyYWggVGluZ2dpIChIaXBlcnRlbnNpKS9SZW5kYWgsIChIaXBvdGVuc2kpLCBIaXBlcmtvbGVzdGVyb2wsIFBlbnllbXBpdGFuL1Blbnl1bWJhdGFuIFBlbWJ1bHVoIERhcmFoIE90YWsgZGFuIGxhaW5ueWE\/DQogICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24nPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5JyBpZD0nQnV0dG9uQ2hlc3RQYWluJyBvbmNsaWNrPSJidXR0b25Qb3BVcE5hdmlnYXRpb24odGhpcy5pZCwgJ1BvcFVwQ2FyZGlhYycsICdQb3BVcENoZXN0UGFpbicsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0NoZXN0UGFpbicsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0t1ZXNpb25lciBOeWVyaSBEYWRhJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25IeXBlcnRlbnNpb24nIG9uY2xpY2s9ImJ1dHRvblBvcFVwTmF2aWdhdGlvbih0aGlzLmlkLCAnUG9wVXBDYXJkaWFjJywgJ1BvcFVwSHlwZXJ0ZW5zaW9uJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnSHlwZXJ0ZW5zaW9uJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nS3Vlc2lvbmVyIFRla2FuYW4gRGFyYWggVGluZ2dpJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz5zaWxhaGthbiBtZW1iZXJpa2FuIHJpbmNpYW4gbGViaWggbGFuanV0PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSdGdWxsIE11bHRpJyBpZD0nQXJlYUFtYW5kbWVudERldGFpbCc+PC90ZXh0YXJlYT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUnPihtYWtzaW11bSAyNTAga2FyYWt0ZXIpPC9sYWJlbD4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBDaGVzdFBhaW4nPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBDaGVzdFBhaW4nPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwQ2FuY2VsKCdQb3BVcENoZXN0UGFpbicsICdQb3BVcENhcmRpYWMnKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2FuY2VsJz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lclJpZ2h0JyBpZD0nQnV0dG9uRG9uZScgb25jbGljaz0iYnV0dG9uU3ViUG9wVXBEb25lKCdQb3BVcENoZXN0UGFpbicsICdQb3BVcENhcmRpYWMnLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdDaGVzdFBhaW4nLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S1VFU0lPTkVSIE5ZRVJJIERBREE8L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDZkJz5HYW5nZ3VhbiBmdW5nc2kvc2lzdGVtIEphbnR1bmcgZGFuIFBlbWJ1bHVoIERhcmFoLCBOeWVyaSBEYWRhLCBTZXJhbmdhbiBKYW50dW5nLCBEZW1hbSwgSmFudHVuZywgUmVtYXRpaywgVGVrYW5hbiBEYXJhaCBUaW5nZ2kgKEhpcGVydGVuc2kpL1JlbmRhaCwgKEhpcG90ZW5zaSksIEhpcGVya29sZXN0ZXJvbCwgUGVueWVtcGl0YW4vUGVueXVtYmF0YW4gUGVtYnVsdWggRGFyYWggT3RhayBkYW4gbGFpbm55YT88L3NwYW4+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0zIE1hcmdpbicgaWQ9J0xhYmVsRmlyc3RBdHRhY2snPjEuIEthcGFuIHBlcnRhbWEga2FsaSBBbmRhIG1lcmFzYWthbiBueWVyaSBkYWRhPzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUZpcnN0QXR0YWNrJyB0eXBlPSdkYXRlJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz4yLiBCZXJhcGEgbGFtYSBzZXJhbmdhbiB0ZXJzZWJ1dCBiZXJsYW5nc3VuZz88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0ndGltZScgaWQ9J0RhdGVBdHRhY2tEdXJhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+My4gQXBha2FoIGFkYSBzZXJhbmdhbiBsYW5qdXRhbiBzZXN1ZGFobnlhPzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uTmV4dEF0dGFja1llcycgbmFtZT0nUmFkaW9CdXR0b25OZXh0QXR0YWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk5leHRBdHRhY2tZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uTmV4dEF0dGFja05vJyBuYW1lPSdSYWRpb0J1dHRvbk5leHRBdHRhY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk5leHRBdHRhY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0zIE1hcmdpbicgaWQ9J0xhYmVsTGFzdEF0dGFjayc+VGFuZ2dhbCBzZXJhbmdhbiB0ZXJha2hpcj88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVMYXN0QXR0YWNrJyB0eXBlPSdkYXRlJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+QmVyYXBhIGxhbWEgc2VyYW5nYW4gdGVyc2VidXQgYmVybGFuZ3N1bmc\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J3RpbWUnIGlkPSdEYXRlTGFzdEF0dGFja0R1cmF0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0zIE1hcmdpbicgaWQ9J0xhYmVsQ3VycmVudEF0dGFja1RpbWVzJz5IaW5nZ2Egc2FhdCBpbmkgc2VyYW5nYW4gc3VkYWggdGVyamFkaSBzZWJhbnlhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdOdW1iZXJDdXJyZW50QXR0YWNrVGltZXMnIHR5cGU9J251bWJlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJz5rYWxpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMyBNYXJnaW4nIGlkPSdMYWJlbExhc3RBcmlzZSc+NC4gS2FwYW4gdGVyYWtoaXIga2FsaSBueWVyaSBkYWRhIHRlcmphZGk\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlTGFzdEFyaXNlJyB0eXBlPSdkYXRlJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz41LiBCYWdhaW1hbmEgc2lmYXQgbnllcmkgZGFkYSB5YW5nIEFuZGEgcmFzYWthbiA\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoYXJhY3Rlck91dE9mQnJlYXRoJyBuYW1lPSdSYWRpb0J1dHRvbkNoYXJhY3RlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvdXRvZmJyZWF0aCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hhcmFjdGVyT3V0T2ZCcmVhdGgnPlNlc2FrIE5hZmFzPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hhcmFjdGVyU3F1ZWV6ZWQnIG5hbWU9J1JhZGlvQnV0dG9uQ2hhcmFjdGVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J3NxdWVlemVkJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGFyYWN0ZXJTcXVlZXplZCc+RGFkYSB0ZXJhc2EgZGlyZW1hczwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoYXJhY3RlckRlcHJlc3NlZCcgbmFtZT0nUmFkaW9CdXR0b25DaGFyYWN0ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZGVwcmVzc2VkJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGFyYWN0ZXJEZXByZXNzZWQnPkRhZGEgdGVyYXNhIHRlcnRla2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hhcmFjdGVySG90JyBuYW1lPSdSYWRpb0J1dHRvbkNoYXJhY3RlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdob3QnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoYXJhY3RlckhvdCc+RGFkYSB0ZXJhc2EgcGFuYXM8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DaGFyYWN0ZXJDaGVzdFRpZ2h0bmVzcycgbmFtZT0nUmFkaW9CdXR0b25DaGFyYWN0ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0nY2hlc3R0aWdodG5lc3MnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoYXJhY3RlckNoZXN0VGlnaHRuZXNzJz5EYWRhIHRlcmFzYSBiZXJhdDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoYXJhY3RlckNoZXN0UHVuY3R1cmVkJyBuYW1lPSdSYWRpb0J1dHRvbkNoYXJhY3RlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdjaGVzdHB1bmN0dXJlZCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hhcmFjdGVyQ2hlc3RQdW5jdHVyZWQnPkRhZGEgdGVyYXNhIGRpdHVzdWstdHVzdWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DaGFyYWN0ZXJWYWd1ZWx5VW5jb21mb3J0YWJsZScgbmFtZT0nUmFkaW9CdXR0b25DaGFyYWN0ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndmFndWVseXVuY29tZm9ydGFibGUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoYXJhY3RlclZhZ3VlbHlVbmNvbWZvcnRhYmxlJz5TYW1hci1zYW1hciAsIHRpZGFrIG55YW1hbjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoYXJhY3Rlck90aGVycycgbmFtZT0nUmFkaW9CdXR0b25DaGFyYWN0ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoYXJhY3Rlck90aGVycyc+TGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRDaGFyYWN0ZXJPdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjYuIERpbWFuYWthaCBsZXRhayBueWVyaSBkYWRhIHRlcnNlYnV0PzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Mb2NhdGlvbk1pZGRsZScgbmFtZT0nUmFkaW9CdXR0b25Mb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdtaWRkbGUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkxvY2F0aW9uTWlkZGxlJz5EaSBUZW5nYWggZGFkYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkxvY2F0aW9uTGVmdCcgbmFtZT0nUmFkaW9CdXR0b25Mb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdsZWZ0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Mb2NhdGlvbkxlZnQnPkRpIHNpc2kga2lyaSBkYWRhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uTG9jYXRpb25SaWdodCcgbmFtZT0nUmFkaW9CdXR0b25Mb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdyaWdodCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uTG9jYXRpb25SaWdodCc+RGkgc2lzaSBrYW5hbiBkYWRhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uTG9jYXRpb25PdGhlcnMnIG5hbWU9J1JhZGlvQnV0dG9uTG9jYXRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkxvY2F0aW9uT3RoZXJzJz5EaSBiYWdpYW4gbGFpbiBkYXJpIGRhZGEsIHNlYnV0a2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dExvY2F0aW9uT3RoZXJEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz43LiBBcGFrYWggbnllcmkgZGFkYSB0ZXJzZWJ1dCBtZW5qYWxhciA\\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UcmVhdG1lbnRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uVHJlYXRtZW50JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRyZWF0bWVudFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UcmVhdG1lbnRObycgbmFtZT0nUmFkaW9CdXR0b25UcmVhdG1lbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRyZWF0bWVudE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaTwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0VHJlYXRtZW50UmVhc29uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz4xMy4gQXBha2FoIHBlcm5haCBtZWxha3VrYW4gcGVtZXJpa3NhYW4gc2ViYWdhaSBiZXJpa3V0PzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uRXZlckNoZWNrWWVzJyBuYW1lPSdSYWRpb0J1dHRvbkV2ZXJDaGVjaycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25FdmVyQ2hlY2tZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uRXZlckNoZWNrTm8nIG5hbWU9J1JhZGlvQnV0dG9uRXZlckNoZWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25FdmVyQ2hlY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hla1VwRXZlckVrZycgbmFtZT0nUmFkaW9CdXR0b25DaGVrVXBFdmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2VrZ2VjZyc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hla1VwRXZlckVrZyc+RUtHL0VDRzwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXJSb250Z2VuJyBuYW1lPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0ncm9udGdlbic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hla1VwRXZlclJvbnRnZW4nPlJvbnRnZW4gZGFkYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXJFY2hvY2FyZGlvZ3JhbScgbmFtZT0nUmFkaW9CdXR0b25DaGVrVXBFdmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2VjaG9jYXJkaW9ncmFtJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGVrVXBFdmVyRWNob2NhcmRpb2dyYW0nPkVjaG9jYXJkaW9ncmFtPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hla1VwRXZlclRyZWFkbWlsbCcgbmFtZT0nUmFkaW9CdXR0b25DaGVrVXBFdmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RyZWFkbWlsbCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hla1VwRXZlclRyZWFkbWlsbCc+VHJlYWRtaWxsPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hla1VwRXZlckxhYm9yYXRvcml1bScgbmFtZT0nUmFkaW9CdXR0b25DaGVrVXBFdmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2xhYm9yYXRvcnknPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXJMYWJvcmF0b3JpdW0nPkxhYm9yYXRvcml1bTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXJPdGhlcnMnIG5hbWU9J1JhZGlvQnV0dG9uQ2hla1VwRXZlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvdGhlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hla1VwRXZlck90aGVycyc+TGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0Q2hlY2tVcEV2ZXJPdGhlcnNEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5KaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmk8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4oS2FwYW4gZGFuIGJhZ2FpbWFuYSBoYXNpbG55YSBzZXJ0YSBtZWxhbXBpcmthbiBmb3Rva29waSBoYXNpbCBwZW1lcmlrc2FhbikuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RXZlckNoZWNrRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+MTQuIEFwYWthaCBBbmRhIHBlcm5haCB0aWRhayBtYXN1ayBrZXJqYSBkYWxhbSBqYW5na2Egd2FrdHUgbGFtYSBrYXJlbmEga29uZGlzaSBpbmk\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UYWtlTGVhdmVZZXMnIG5hbWU9J1JhZGlvQnV0dG9uVGFrZUxlYXZlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRha2VMZWF2ZVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UYWtlTGVhdmVObycgbmFtZT0nUmFkaW9CdXR0b25UYWtlTGVhdmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRha2VMZWF2ZU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+PC9kaXY+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0zIE1hcmdpbicgaWQ9J0xhYmVsVGFrZUxlYXZlSWZZZXMnPkppa2EgIllhIiBrYXBhbj88L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlVGFrZUxlYXZlSWZZZXMnIHR5cGU9J2RhdGUnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMyBNYXJnaW4nIGlkPSdMYWJlbFRha2VMZWF2ZUhvd0xvbmcnPmRhbiBiZXJhcGEgbGFtYT88L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdOdW1iZXJUYWtlTGVhdmVIb3dMb25nJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMyBNYXJnaW4nPkhhcmk8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjE1LiBNb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dENQQWRkaXRpb25hbEluZm8nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgIDxoMj5QRVJOWUFUQUFOIERBTiBLVUFTQTwvaDI+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVueWF0YWthbiBkZW5nYW4gc2ViZW5hcm55YSBiYWh3YSBzZW11YSBwZXJueWF0YWFuIGRhbiBqYXdhYmFuIGRpIGF0YXMgYWRhbGFoIGxlbmdrYXAgZGFuIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhLjwvbGk+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW1iZXJpIGt1YXNhIGtlcGFkYSBzZXRpYXAgRG9rdGVyLyBSdW1haCBTYWtpdC8gS2xpbmlrLyBQdXNrZXNtYXMvIGxhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpLyBsZW1iYWdhIGF0YXUgcGloYWsgbGFpbiB5YW5nIG1lbXB1bnlhaSBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEsIHVudHVrIG1lbmd1bmdrYXBrYW4ga2VwYWRhIFBlbmFuZ2d1bmcgc2VtdWEga2V0ZXJhbmdhbiB0ZW50YW5nIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gc2F5YS48L2xpPg0KICAgICAgICAgICAgPGxpPkt1YXNhIGluaSBtZXJ1cGFrYW4gaGFsIHlhbmcgdGlkYWsgdGVycGlzYWhrYW4gZGFyaSBTdXJhdCBQZW5nYWp1YW4gQXN1cmFuc2kgSml3YSBkYW4gYWthbiBtZW5naWthdCBzYXlhLCBhaGxpIHdhcmlzLCBkYW4ga2VsdWFyZ2Egc2F5YS48L2xpPg0KICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgc2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBzYXlhIG1lbmluZ2dhbC5TYWxpbmFuLyBmb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwSHlwZXJ0ZW5zaW9uJz4NCiAgICAgIDxmb3JtIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwSHlwZXJ0ZW5zaW9uJz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcENhbmNlbCgnUG9wVXBIeXBlcnRlbnNpb24nLCAnUG9wVXBDYXJkaWFjJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBIeXBlcnRlbnNpb24nLCAnUG9wVXBDYXJkaWFjJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnSHlwZXJ0ZW5zaW9uJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRG9uZSc+DQogICAgICAgICAgPGgyPktVRVNJT05FUiBURUtBTkFOIERBUkFIIFRJTkdHSTwvaDI+DQogICAgICAgIDwvaGVhZGVyPg0KICAgICAgICA8IS0tIEZJRUxEU0VUIC0tPg0KICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNdWx0aSBTaW5nbGUgNmQnPkdhbmdndWFuIGZ1bmdzaS9zaXN0ZW0gSmFudHVuZyBkYW4gUGVtYnVsdWggRGFyYWgsIE55ZXJpIERhZGEsIFNlcmFuZ2FuIEphbnR1bmcsIERlbWFtLCBKYW50dW5nLCBSZW1hdGlrLCBUZWthbmFuIERhcmFoIFRpbmdnaSAoSGlwZXJ0ZW5zaSkvUmVuZGFoLCAoSGlwb3RlbnNpKSwgSGlwZXJrb2xlc3Rlcm9sLCBQZW55ZW1waXRhbi9QZW55dW1iYXRhbiBQZW1idWx1aCBEYXJhaCBPdGFrIGRhbiBsYWlubnlhPzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTMgTWFyZ2luJyBpZD0nTGFiZWxGaXJzdFRpbWUnPjEuIGEuIEthcGFuIHBlcnRhbWEga2FsaSBkaWtldGFodWkgbWVuZGVyaXRhIHRla2FuYW4gZGFyYWggdGluZ2dpPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlRmlyc3RUaW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgTWFyZ2luIFBvc2l0aW9uZXJSaWdodCc+Yi4gQmVyYXBhIHRla2FuYW4gZGFyYWggc2FhdCBpdHU\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0IE1hcmdpbic+bW1IZzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBNYXJnaW4gUG9zaXRpb25lclJpZ2h0JyBpZD0nTnVtYmVyRGlhc3RvbGljJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBNYXJnaW4gUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgTWFyZ2luIFBvc2l0aW9uZXJSaWdodCcgaWQ9J051bWJlclN5c3RvbGljJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+Yy4gTWVuZ2FwYSBzYWF0IGl0dSBkaWxha3VrYW4gcGVtZXJpa3NhYW4gdGVrYW5hbiBkYXJhaD88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DaGVja1JlYXNvblJvdXRpbmUnIG5hbWU9J1JhZGlvQnV0dG9uQ2hlY2tSZWFzb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ncm91dGluZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hlY2tSZWFzb25Sb3V0aW5lJz5QZW1lcmlrc2FhbiBydXRpbjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWNrUmVhc29uT3RoZXJzJyBuYW1lPSdSYWRpb0J1dHRvbkNoZWNrUmVhc29uJyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGVja1JlYXNvbk90aGVycyc+S2VsdWhhbiBsYWlubnlhLiBNb2hvbiBqZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmk8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRDaGVja1JlYXNvbk90aGVyRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPmQuIEFwYWthaCBkaWtvbnN1bHRhc2lrYW4ga2UgZG9rdGVyID88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkRvY3RvckNvbnN1bHRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uRG9jdG9yQ29uc3VsdCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Eb2N0b3JDb25zdWx0WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkRvY3RvckNvbnN1bHRObycgbmFtZT0nUmFkaW9CdXR0b25Eb2N0b3JDb25zdWx0JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Eb2N0b3JDb25zdWx0Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2EgIllhIiBtb2hvbiBtZW5naXNpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0RG9jdG9yTmFtZSc+TmFtYSBEb2t0ZXI8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRIVFVQRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHREb2N0b3JBZGRyZXNzJz5BbGFtYXQgRG9rdGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SFRVUERvY3RvckFkZHJlc3MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBNYXJnaW4nIGZvcj0nVGV4dEhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJz5lLiBCZXJhcGEgc2VyaW5nIEFuZGEga29udHJvbCBrZSBEb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dEhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+PC9sYWJlbD4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCc+a2FsaSBwZXI8L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxzZWxlY3QgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1NlbGVjdEhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yUGVyaW9kJz48L3NlbGVjdD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPjIuIEFwYWthaCBrZW5haWthbiB0ZWthbmFuIGRhcmFoIEFuZGEgdGVyc2VidXQgYmVyaHVidW5nYW4gZGVuZ2FuIHBlbnlha2l0IHNlYmFnYWkgYmVyaWt1dDo8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblJlbGF0ZWRUb0hlYXJ0JyBuYW1lPSdSYWRpb0J1dHRvblJlbGF0ZWRUbycgdHlwZT0ncmFkaW8nIHZhbHVlPSdoZWFydCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUmVsYXRlZFRvSGVhcnQnPkphbnR1bmc8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25SZWxhdGVkVG9CcmFpbicgbmFtZT0nUmFkaW9CdXR0b25SZWxhdGVkVG8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nYnJhaW4nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJlbGF0ZWRUb0JyYWluJz5PdGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUmVsYXRlZFRvS2lkbmV5JyBuYW1lPSdSYWRpb0J1dHRvblJlbGF0ZWRUbycgdHlwZT0ncmFkaW8nIHZhbHVlPSdraWRuZXknPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJlbGF0ZWRUb0tpZG5leSc+R2luamFsPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUmVsYXRlZFRvT3RoZXJzJyBuYW1lPSdSYWRpb0J1dHRvblJlbGF0ZWRUbycgdHlwZT0ncmFkaW8nIHZhbHVlPSdvdGhlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUmVsYXRlZFRvT3RoZXJzJz5MYWlubnlhLCBzZWJ1dGthbjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJlbGF0ZWRUb090aGVyRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTMgTWFyZ2luJyBpZD0nTGFiZWxXaGVuU3RhcnQnPjMuIGEuIEthcGFuIEFuZGEgbWVtdWxhaSBwZW5nb2JhdGFuIGtlbmFpa2FuIHRla2FuYW4gZGFyYWggdGVyc2VidXQ\\\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRWb21pdHRpbmdCbG9vZEFyaXNlVGltZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtMSBNYXJnaW4nPmthbGkgcGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1NlbGVjdFZvbWl0dGluZ0Jsb29kQXJpc2VUaW1lUGVyaW9kJz48L3NlbGVjdD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPk1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBkYW4gY2FyYSBtZW5nYXRhc2lueWEgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0Vm9taXR0aW5nQmxvb2RTb2x2aW5nJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPjYuIEplbGFza2FuIGtlbHVoYW4gbnllcmkgeWFuZyBkaXJhc2FrYW4gOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Db21wbGFpblBhaW5Db25kaXRpb24nIG5hbWU9J1JhZGlvQnV0dG9uQ29tcGxhaW5QYWluJyB0eXBlPSdyYWRpbycgdmFsdWU9J2NvbmRpdGlvbic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uQ29tcGxhaW5QYWluQ29uZGl0aW9uJz5UaW1idWwgcGFkYSBrb25kaXNpIHRlcnRlbnR1LCBqZWxhc2thbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0Q29tcGxhaW5QYWluQ29uZGl0aW9uRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Db21wbGFpblBhaW5EZWNyZWFzZScgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpblBhaW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZGVjcmVhc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpbkRlY3JlYXNlJz5OeWVyaSBiZXJrdXJhbmcgYmlsYSBzZWRhbmcgbWFrYW48L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Db21wbGFpblBhaW5JbmNyZWFzZScgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpblBhaW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0naW5jcmVhc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpbkluY3JlYXNlJz5OeWVyaSBiZXJ0YW1iYWggYmlsYSBzZWRhbmcgbWFrYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uQ29tcGxhaW5QYWluU3ByZWFkJyBuYW1lPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdzcHJlYWQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpblNwcmVhZCc+TnllcmkgbWVuamFsYXIga2Ugc2VsdXJ1aCB0dWJ1aCBsYWluIDo8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpblNwcmVhZEhlYWQnIG5hbWU9J1JhZGlvQnV0dG9uQ29tcGxhaW5QYWluU3ByZWFkJyB0eXBlPSdyYWRpbycgdmFsdWU9J2hlYWQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpblNwcmVhZEhlYWQnPktlcGFsYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpblNwcmVhZENoZXN0JyBuYW1lPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpblNwcmVhZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdjaGVzdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uQ29tcGxhaW5QYWluU3ByZWFkQ2hlc3QnPkRhZGE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Db21wbGFpblBhaW5TcHJlYWRTdG9tYWNoJyBuYW1lPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpblNwcmVhZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdzdG9tYWNoJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Db21wbGFpblBhaW5TcHJlYWRTdG9tYWNoJz5QZXJ1dDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpblNwcmVhZEFybScgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpblBhaW5TcHJlYWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nYXJtJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Db21wbGFpblBhaW5TcHJlYWRBcm0nPkxlbmdhbjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpblNwcmVhZE90aGVycycgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpblBhaW5TcHJlYWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkNvbXBsYWluUGFpblNwcmVhZE90aGVycyc+TGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dENvbXBsYWluUGFpblNwcmVhZE90aGVyRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nPjcuIE1vaG9uIGplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaSBtZW5nZW5haSBuYW1hIG9iYXQgeWFuZyBBbmRhIGtvbnN1bXNpIGRhbiBsYW1hIHBlbWFrYWlhbm55YSBzZWh1YnVuZ2FuIGRlbmdhbiBnYW5nZ3VhbiBwZW5jZXJuYWFuPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERydWdzTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+OC4gQXBha2FoIG9iYXQgdGVyc2VidXQgZGlwZXJvbGVoIGJlcmRhc2Fya2FuIHJlc2VwIGRva3Rlcj88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkRvY3RvclJlY2lwZVllcycgbmFtZT0nUmFkaW9CdXR0b25Eb2N0b3JSZWNpcGUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uRG9jdG9yUmVjaXBlWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkRvY3RvclJlY2lwZU5vJyBuYW1lPSdSYWRpb0J1dHRvbkRvY3RvclJlY2lwZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uRG9jdG9yUmVjaXBlTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIChuYW1hIG9iYXQsIGRvc2lzIGRhbiBmcmVrdWVuc2kgcGVuZ2d1bmFhbm55YSkgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+TmFtYSBPYmF0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+RG9zaXM8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5GcmVrdWVuc2k8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdVUE5hbWUxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER1VQRG9zZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERHVVBGcmVxdWVuY3kxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER1VQTmFtZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERHVVBEb3NlMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdVUEZyZXF1ZW5jeTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERHVVBOYW1lMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdVUERvc2UzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER1VQRnJlcXVlbmN5MycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdVUE5hbWU0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER1VQRG9zZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERHVVBGcmVxdWVuY3k0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER1VQTmFtZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERHVVBEb3NlNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdVUEZyZXF1ZW5jeTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgTGVuZ2thcCBEb2t0ZXI6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0REdCT1RUT01Eb2N0b3JOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5vLiBUZWxlcG9uL0hhbmRwaG9uZTo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRER0JPVFRPTURvY3RvclRlbGVwaG9uZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5OYW1hIEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRER0JPVFRPTUhvc3BpdGFsTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5BbGFtYXQgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dERHQk9UVE9NSG9zcGl0YWxBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz45LiBNb2hvbiBqZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgamVuaXMgZGFuIGhhc2lsIHBlbWVyaWtzYWFuIGtlc2VoYXRhbiB5YW5nIGRpbGFrdWthbiBzZWh1YnVuZ2FuIGRlbmdhbiBnYW5nZ3VhbiBwZW5jZXJuYWFuIGluaSwgdGVybWFzdWsgdGFuZ2dhbCBwZW1lcmlrc2Fhbm55YS4gKExhbXBpcmthbiBmb3Rva29waSBoYXNpbCBwZW1lcmlrc2Fhbik8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSZXN1bHQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+MTAuIEFwYWthaCBwZXJuYWggbWVuZGFwYXRrYW4gcGVyYXdhdGFuIHJ1bWFoIHNha2l0IHNlaHVidW5nYW4gZGVuZ2FuIGdhbmdndWFuIHBlbmNlcm5hYW4gdGVyc2VidXQ\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkhvc3BpdGFsQ2FyZVllcycgbmFtZT0nUmFkaW9CdXR0b25Ib3NwaXRhbENhcmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSG9zcGl0YWxDYXJlWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkhvc3BpdGFsQ2FyZU5vJyBuYW1lPSdSYWRpb0J1dHRvbkhvc3BpdGFsQ2FyZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSG9zcGl0YWxDYXJlTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0xhYmVsUG9saWN5SG9sZGVyRGlnZXN0SG9zcGl0YWxDYXJlV2hlbic+SmlrYSDigJxZYeKAnSwgc2VqYWsga2FwYW46PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUhvc3BpdGFsQ2FyZUZyb20nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPnMvZDwvc3Bhbj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlSG9zcGl0YWxDYXJlVG8nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TGFtYSBQZXJhd2F0YW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dEhvc3BpdGFsQ2FyZUR1cmF0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1NlbGVjdEhvc3BpdGFsQ2FyZUR1cmF0aW9uUGVyaW9kJz48L3NlbGVjdD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgRG9rdGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SG9zcGl0YWxDYXJlRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5BbGFtYXQgRG9rdGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SG9zcGl0YWxDYXJlRG9jdG9yQWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+MTEuIEFwYWthaCBzYW1wYWkgc2FhdCBpbmkgbWFzaWggZGFsYW0gcGVuZ29iYXRhbj88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkluVHJlYXRtZW50WWVzJyBuYW1lPSdSYWRpb0J1dHRvbkluVHJlYXRtZW50JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkluVHJlYXRtZW50WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkluVHJlYXRtZW50Tm8nIG5hbWU9J1JhZGlvQnV0dG9uSW5UcmVhdG1lbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkluVHJlYXRtZW50Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIChuYW1hIG9iYXQsIGRvc2lzIGRhbiBmcmVrdWVuc2kgcGVuZ2d1bmFhbm55YSkgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+TmFtYSBPYmF0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+RG9zaXM8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5GcmVrdWVuc2k8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdCT1RUT01OYW1lMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdCT1RUT01Eb3NlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdCT1RUT01GcmVxdWVuY3kxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER0JPVFRPTU5hbWUyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER0JPVFRPTURvc2UyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER0JPVFRPTUZyZXF1ZW5jeTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERHQk9UVE9NTmFtZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERHQk9UVE9NRG9zZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERHQk9UVE9NRnJlcXVlbmN5MycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdCT1RUT01OYW1lNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdCT1RUT01Eb3NlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0REdCT1RUT01GcmVxdWVuY3k0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER0JPVFRPTU5hbWU1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER0JPVFRPTURvc2U1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRER0JPVFRPTUZyZXF1ZW5jeTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRJblRyZWF0bWVudERvY3Rvck5hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5Oby4gVGVsZXBvbi9IYW5kcGhvbmU6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SW5UcmVhdG1lbnREb2N0b3JUZWxlcGhvbmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBLbGluaWsvUnVtYWggU2FraXQ6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SW5UcmVhdG1lbnRIb3NwaXRhbE5hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRJblRyZWF0bWVudEhvc3BpdGFsQWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz4xMi4gRGFsYW0gMiB0YWh1biB0ZXJha2hpciBpbmksIGFwYWthaCBBbmRhIHBlcm5haCB0aWRhayBtYXN1ayBrZXJqYSBrYXJlbmEgZ2FuZ2d1YW4gaW5pID88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQWJzZW50SW5Ud29ZZWFyWWVzJyBuYW1lPSdSYWRpb0J1dHRvbkFic2VudEluVHdvWWVhcicgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25BYnNlbnRJblR3b1llYXJZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQWJzZW50SW5Ud29ZZWFyTm8nIG5hbWU9J1JhZGlvQnV0dG9uQWJzZW50SW5Ud29ZZWFyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25BYnNlbnRJblR3b1llYXJObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J0xhYmVsUG9saWN5SG9sZGVyRGlnZXN0Tm9PZmZpY2VFbnRyeUluWWVhcldoZW4nPkppa2EgIllhIiBLYXBhbjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVBYnNlbnRTaW5jZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQgRmlyc3RJbmRlbnQnPjwvbGFiZWw+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCBNYXJnaW4nIGlkPSdMYWJlbFBvbGljeUhvbGRlckRpZ2VzdE5vT2ZmaWNlRW50cnlJblllYXJIb3dMb25nJz5kYW4gYmVyYXBhIGxhbWE\/PC9sYWJlbD4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nTnVtYmVyQWJzZW50U2luY2VEYXlzJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5IYXJpPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSc+MTMuIE1vaG9uIEFuZGEgbWVtYmVyaWthbiBpbmZvcm1hc2kgdGFtYmFoYW4gbGFpbiB5YW5nIG1lbnVydXQgQW5kYSBwZW50aW5nIG11bmdraW4gZGFwYXQgbWVtYmFudHUgcHJvc2VzIHBlbmdhanVhbiBhc3VyYW5zaSBpbmkgZGVuZ2FuIG1lbGVuZ2thcGkga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0xIE1hcmdpbicgaWQ9J0FyZWFIZWFsdGhDb25kaXRpb24nIHR5cGU9J3RleHQnPjwvdGV4dGFyZWE+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPGRpdiBjbGFzcz0nTm90ZSc+DQogICAgICAgICAgPGgyPlBFUk5ZQVRBQU4gREFOIEtVQVNBPC9oMj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW55YXRha2FuIGRlbmdhbiBzZWJlbmFybnlhIGJhaHdhIHNlbXVhIHBlcm55YXRhYW4gZGFuIGphd2FiYW4gZGkgYXRhcyBhZGFsYWggbGVuZ2thcCBkYW4gc2VzdWFpIGRlbmdhbiBrZWFkYWFuIHNlYmVuYXJueWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbWJlcmkga3Vhc2Ega2VwYWRhIHNldGlhcCBEb2t0ZXIvIFJ1bWFoIFNha2l0LyBLbGluaWsvIFB1c2tlc21hcy8gbGFib3JhdG9yaXVtLCBwZXJ1c2FoYWFuIGFzdXJhbnNpIGF0YXUgcGVydXNhaGFhbiByZWFzdXJhbnNpLCBiYWRhbiwgaW5zdGFuc2kvIGxlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gc2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIG1lcnVwYWthbiBoYWwgeWFuZyB0aWRhayB0ZXJwaXNhaGthbiBkYXJpIFN1cmF0IFBlbmdhanVhbiBBc3VyYW5zaSBKaXdhIGRhbiBha2FuIG1lbmdpa2F0IHNheWEsIGFobGkgd2FyaXMsIGRhbiBrZWx1YXJnYSBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIHRldGFwIGJlcmxha3UgcGFkYSB3YWt0dSBzYXlhIG1hc2loIGhpZHVwIG1hdXB1biBzZXN1ZGFoIHNheWEgbWVuaW5nZ2FsLlNhbGluYW4vIGZvdG9rb3BpIGRhcmkgc3VyYXQga3Vhc2EgaW5pIHNhbWEgc2FoIGJlcmxha3VueWEgc2VwZXJ0aSBkb2t1bWVuIGFzbGkuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBOZXJ2ZSc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcE5lcnZlJz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25Qb3BVcENhbmNlbCgnUG9wVXBOZXJ2ZScpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdDYW5jZWwnPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdCdXR0b25Eb25lJyBvbmNsaWNrPSJidXR0b25Qb3BVcERvbmUoJ1BvcFVwTmVydmUnLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdOZXJ2ZScsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSwgWydUZXh0JyArIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0VwaWxlcHN5JyArICdTaW5jZSddKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRG9uZSc+DQogICAgICAgICAgPGgyPlBlcnRhbnlhYW4gS2VzZWhhdGFuPC9oMj4NCiAgICAgICAgPC9oZWFkZXI+DQogICAgICAgIDwhLS0gRklFTERTRVQgLS0+DQogICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J011bHRpIFNpbmdsZSA2Zic+R2FuZ2d1YW4gZnVuZ3NpL3Npc3RlbSBTYXJhZiBkYW4gT3RvdCwgVmVydGlnbywgU3Ryb2tlLCBTZXJpbmcgUHVzaW5nIGF0YXUgUGluZ3NhbiwgRXBpbGVwc2kgKGtlamFuZyksIEtlbHVtcHVoYW4sIEtlc2VtdXRhbiwgQmFhbCwgR2FuZ2d1YW4gS2VqaXdhYW4gZGFuIGxhaW5ueWE\/PC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25FcGlsZXBzeScgb25jbGljaz0iYnV0dG9uUG9wVXBOYXZpZ2F0aW9uKHRoaXMuaWQsICdQb3BVcE5lcnZlJywgJ1BvcFVwRXBpbGVwc3knLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdFcGlsZXBzeScsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0t1ZXNpb25lciBFcGlsZXBzaSBEYW4gS2VqYW5nJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz5zaWxhaGthbiBtZW1iZXJpa2FuIHJpbmNpYW4gbGViaWggbGFuanV0PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSdGdWxsIE11bHRpJyBpZD0nQXJlYUFtYW5kbWVudERldGFpbCc+PC90ZXh0YXJlYT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUnPihtYWtzaW11bSAyNTAga2FyYWt0ZXIpPC9sYWJlbD4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBFcGlsZXBzeSc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcEVwaWxlcHN5Jz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcENhbmNlbCgnUG9wVXBFcGlsZXBzeScsICdQb3BVcE5lcnZlJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBFcGlsZXBzeScsICdQb3BVcE5lcnZlJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnRXBpbGVwc3knLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S3Vlc2lvbmVyIEVwaWxlcHNpIERhbiBLZWphbmc8L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBNQUlOIC0tPg0KICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNdWx0aSBTaW5nbGUgNmYnPkdhbmdndWFuIGZ1bmdzaS9zaXN0ZW0gU2FyYWYgZGFuIE90b3QsIFZlcnRpZ28sIFN0cm9rZSwgU2VyaW5nIFB1c2luZyBhdGF1IFBpbmdzYW4sIEVwaWxlcHNpIChrZWphbmcpLCBLZWx1bXB1aGFuLCBLZXNlbXV0YW4sIEJhYWwsIEdhbmdndWFuIEtlaml3YWFuIGRhbiBsYWlubnlhPzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBGdWxsIFBvc2l0aW9uZXJMZWZ0Jz4xLiBTZWphayB1bXVyIGJlcmFwYSBBbmRhIHRlcnNlcmFuZyBlcGlsZXBzaT88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0U2luY2UnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQgRmlyc3RJbmRlbnQnPjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCc+VGFodW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+Mi4gQmVyYXBhIGthbGkgQW5kYSB0ZXJzZXJhbmcgZXBpbGVwc2k\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEhvd01hbnknIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTWFyZ2luIFBvc2l0aW9uZXJMZWZ0Jz5rYWxpIHBlcjwvbGFiZWw+DQogICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdTZWxlY3RIb3dNYW55UGVyaW9kJz48L3NlbGVjdD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPjMuIEthcGFuIHRlcmFraGlyIGthbGkgQW5kYSB0ZXJzZXJhbmcgZXBpbGVwc2k\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUxhc3QnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+NC4gUGFkYSBzYWF0IEFuZGEgdGVyc2VyYW5nIGVwaWxlcHNpLCBhcGFrYWg6PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE1lZGl1bSBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbldoYXRIYXBwZW5Mb3N0Q29uc2Npb3VzbmVzcycgbmFtZT0nUmFkaW9CdXR0b25XaGF0SGFwcGVuJyB0eXBlPSdyYWRpbycgdmFsdWU9J2xvc3Rjb25zY2lvdXNuZXNzJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbldoYXRIYXBwZW5Mb3N0Q29uc2Npb3VzbmVzcyc+SGFueWEgaGlsYW5nIGtlc2FkYXJhbiBzZWplbmFrIHRhbnBhIGtha3Uta2FrdSwga2VtdWRpYW4gbHVwYSBkZW5nYW4gYXBhIHlhbmcgdGVsYWggdGVyamFkaS48L2xhYmVsPg0KICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25XaGF0SGFwcGVuU3VkZGVubHlGYWxsJyBuYW1lPSdSYWRpb0J1dHRvbldoYXRIYXBwZW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc3VkZGVubHlmYWxsJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbldoYXRIYXBwZW5TdWRkZW5seUZhbGwnPlRpYmEtdGliYSBqYXR1aCBhdGF1IGtha3Uta2FrdSBwYWRhIHNlbHVydWggdHVidWggZGVuZ2FuIGlyYW1hIGtha3UtbGVtYXMta2FrdSBzZWNhcmEgYmVyZ2FudGlhbiwganVnYSB0ZXJqYWRpIHBhZGEgb3RvdC1vdG90IHdhamFoIGRlbmdhbiBtdWx1dCBiZXJidXNhLiBEYW4gcGFkYSBzYWF0IHRlcmphZGkga2VkdWEga2FraSBkYW4gbGVuZ2FuIGx1cnVzLCBrZXNhZGFyYW4gaGlsYW5nIGRhbiBiaWxhIGJlcmFraGlyLCBrZW11ZGlhbiB0ZXJ0aWR1ci48L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+NS4gU2ViZWx1bSB0ZXJqYWRpIHNlcmFuZ2FuLCBhcGFrYWggQW5kYSBtZXJhc2FrYW4gYWRhbnlhIHB1c2luZy1wdXNpbmcsIG1lbmNpdW0gYmF1LWJhdWFuLCBtZWxpaGF0IGNhaGF5YSwgYXRhdSBidW55aS1idW55aWFuPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uSXNGZWVsWWVzJyBuYW1lPSdSYWRpb0J1dHRvbklzRmVlbCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Jc0ZlZWxZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uSXNGZWVsTm8nIG5hbWU9J1JhZGlvQnV0dG9uSXNGZWVsJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Jc0ZlZWxObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+SmlrYSAiWWEiLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dElzRmVlbERlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjYuIEFwYWthaCBBbmRhIHBlcm5haCBkaXJhd2F0IGthcmVuYSBlcGlsZXBzaT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIEl0ZW0nPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRyZWF0ZWRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uVHJlYXRlZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25UcmVhdGVkWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRyZWF0ZWRObycgbmFtZT0nUmFkaW9CdXR0b25UcmVhdGVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25UcmVhdGVkTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFRyZWF0ZWREZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz43LiBBcGFrYWggQW5kYSBzZWxhbHUgYmVya29uc3VsdGFzaSAvIGJlcm9iYXQga2UgZG9rdGVyPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5KaWthIOKAnFlh4oCdLCBtb2hvbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIEl0ZW0nPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNvbnN1bHRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQ29uc3VsdCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Db25zdWx0WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNvbnN1bHRObycgbmFtZT0nUmFkaW9CdXR0b25Db25zdWx0JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Db25zdWx0Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZ2ZpeCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nVGV4dENvbnN1bHREb2N0b3JOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dENvbnN1bHREb2N0b3JUZWxlcGhvbmUnPk5vLiBUZWxlcG9uL0hhbmRwaG9uZTo8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZ2ZpeCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nVGV4dENvbnN1bHREb2N0b3JUZWxlcGhvbmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0Q29uc3VsdERvY3RvckFkZHJlc3MnPkFsYW1hdCBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZ2ZpeCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nVGV4dENvbnN1bHREb2N0b3JBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz44LiBLYXBhbiB0ZXJha2hpciBrYWxpIEFuZGEgYmVya29uc3VsdGFzaSBkZW5nYW4gZG9rdGVyPzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVMYXN0Q29uc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QXBha2FoIEFuZGEgbWVuZGFwYXQgb2JhdCBkb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE1lZGl1bSBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkdldERydWdZZXMnIG5hbWU9J1JhZGlvQnV0dG9uR2V0RHJ1ZycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkdldERydWdZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkdldERydWdObycgbmFtZT0nUmFkaW9CdXR0b25HZXREcnVnJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkdldERydWdObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9icj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4oSmlrYSAiWWEiLCBtb2hvbiBtZW5naXNpIGtvbG9tIGRpIGJhd2FoIGluaSkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+TmFtZSBPYmF0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlciBNYXJnaW4nPkRvc2lzPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+RnJla3VlbnNpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RVBVUE5hbWUxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEVQVVBEb3NlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RVBVUEZyZXF1ZW5jeTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRFUFVQTmFtZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RVBVUERvc2UyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRFUFVQRnJlcXVlbmN5MicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEVQVVBOYW1lMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRFUFVQRG9zZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dEVQVVBGcmVxdWVuY3kzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RVBVUE5hbWU0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEVQVVBEb3NlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RVBVUEZyZXF1ZW5jeTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRFUFVQTmFtZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RVBVUERvc2U1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRFUFVQRnJlcXVlbmN5NScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz45LiBBcGFrYWggQW5kYSBtYXNpaCBtaW51bSBvYmF0IHNlY2FyYSB0ZXJhdHVyIGhpbmdnYSBzYWF0IGluaTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ29uc3VtZURydWdZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQ29uc3VtZURydWcnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ29uc3VtZURydWdZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ29uc3VtZURydWdObycgbmFtZT0nUmFkaW9CdXR0b25Db25zdW1lRHJ1ZycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ29uc3VtZURydWdObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+MTAuIEFwYWthaCBBbmRhIHBlcm5haCBtZW5kZXJpdGEgcGVueWFraXQgaW5mZWtzaSBzZWxhcHV0IG90YWsvZ2VnYXIgb3RhayBzZWJlbHVtbnlhPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvbkluZmVjdGVkTm8nIG5hbWU9J1JhZGlvQnV0dG9uSW5mZWN0ZWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25JbmZlY3RlZE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25JbmZlY3RlZFllcycgbmFtZT0nUmFkaW9CdXR0b25JbmZlY3RlZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uSW5mZWN0ZWRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPjExLiBBcGFrYWggYWRhIHJpd2F5YXQga2VsdWFyZ2EgQW5kYSB5YW5nIG1lbmRlcml0YSBlcGlsZXBzaSA\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IaXN0b3J5WWVzJyBuYW1lPSdSYWRpb0J1dHRvbkhpc3RvcnknIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSGlzdG9yeVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IaXN0b3J5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uSGlzdG9yeScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSGlzdG9yeU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SGlzdG9yeURlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjEyLiBBcGFrYWggQW5kYSBtZW5kZXJpdGEgcGVueWFraXQgbGFpbiBzZXBlcnRpIGRpIGJhd2FoIGluaTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25PdGhlckRpc2Vhc2VzRGlhYmV0ZXMnIG5hbWU9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlcycgdHlwZT0ncmFkaW8nIHZhbHVlPSdkaWFiZXRlcyc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlc0RpYWJldGVzJz5LZW5jaW5nIE1hbmlzIChEaWFiZXRlcyBNZWxpdHVzKTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbk90aGVyRGlzZWFzZXNIeXBlcnRlbnNpb24nIG5hbWU9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlcycgdHlwZT0ncmFkaW8nIHZhbHVlPSdoeXBlcnRlbnNpb24nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk90aGVyRGlzZWFzZXNIeXBlcnRlbnNpb24nPkRhcmFoIFRpbmdnaSAoSGlwZXJ0ZW5zaSk8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25PdGhlckRpc2Vhc2VzVHVtb3InIG5hbWU9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlcycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0dW1vcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlc1R1bW9yJz5UdW1vcjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbk90aGVyRGlzZWFzZXNDb21wbGljYXRpb24nIG5hbWU9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlcycgdHlwZT0ncmFkaW8nIHZhbHVlPSdjb21wbGljYXRpb24nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk90aGVyRGlzZWFzZXNDb21wbGljYXRpb24nPlBlbnlha2l0IGtvbXBsaWthc2kgbGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRPdGhlckRpc2Vhc2VzQ29tcGxpY2F0aW9uRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPk1vaG9uIG1lbmdpc2kgS3Vlc2lvbmVyIHNlc3VhaSBkZW5nYW4gcGVueWFraXQgbGFpbm55YSB5YW5nIEFuZGEgZGVyaXRhIHNlc3VhaSBkZW5nYW4gcGlsaWhhbjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPnBhZGEgbm9tb3IgMTI8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjEzLiBBcGFrYWggQW5kYSBwZXJuYWggbWVsYWt1a2FuIHBlbWVyaWtzYWFuIGJlcmlrdXQ\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hlY2t1cFR3b1llcycgbmFtZT0nUmFkaW9CdXR0b25DaGVja3VwVHdvJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoZWNrdXBUd29ZZXMnPkVsZWt0cm9lbnNlZmFsb2dyYWZpIChyZWthbWFuIHN5YXJhZiBvdGFrKTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWNrdXBUd29ObycgbmFtZT0nUmFkaW9CdXR0b25DaGVja3VwVHdvJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGVja3VwVHdvTm8nPlJvbnRnZW4gcGhvdG8gdGVuZ2tvcmFrIChrZXBhbGEpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0Q2hlY2t1cFR3b0Rlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+MTQuIE1vaG9uIEFuZGEgbWVtYmVyaWthbiBpbmZvcm1hc2kgdGFtYmFoYW4gbGFpbiB5YW5nIG1lbnVydXQgQW5kYSBwZW50aW5nIG11bmdraW4gZGFwYXQgbWVtYmFudHUgcHJvc2VzIHBlbmdhanVhbiBhc3VyYW5zaSBpbmkgZGVuZ2FuIG1lbGVuZ2thcGkga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0SW5mbycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPGRpdiBjbGFzcz0nTm90ZSc+DQogICAgICAgICAgPGgyPlBFUk5ZQVRBQU4gREFOIEtVQVNBPC9oMj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW55YXRha2FuIGRlbmdhbiBzZWJlbmFybnlhIGJhaHdhIHNlbXVhIHBlcm55YXRhYW4gZGFuIGphd2FiYW4gZGkgYXRhcyBhZGFsYWggbGVuZ2thcCBkYW4gc2VzdWFpIGRlbmdhbiBrZWFkYWFuIHNlYmVuYXJueWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbWJlcmkga3Vhc2Ega2VwYWRhIHNldGlhcCBEb2t0ZXIvIFJ1bWFoIFNha2l0LyBLbGluaWsvIFB1c2tlc21hcy8gbGFib3JhdG9yaXVtLCBwZXJ1c2FoYWFuIGFzdXJhbnNpIGF0YXUgcGVydXNhaGFhbiByZWFzdXJhbnNpLCBiYWRhbiwgaW5zdGFuc2kvIGxlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gc2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIG1lcnVwYWthbiBoYWwgeWFuZyB0aWRhayB0ZXJwaXNhaGthbiBkYXJpIFN1cmF0IFBlbmdhanVhbiBBc3VyYW5zaSBKaXdhIGRhbiBha2FuIG1lbmdpa2F0IHNheWEsIGFobGkgd2FyaXMsIGRhbiBrZWx1YXJnYSBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIHRldGFwIGJlcmxha3UgcGFkYSB3YWt0dSBzYXlhIG1hc2loIGhpZHVwIG1hdXB1biBzZXN1ZGFoIHNheWEgbWVuaW5nZ2FsLiBTYWxpbmFuLyBmb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwTGl2ZXInPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBMaXZlcic+DQogICAgICAgIDwhLS0gSEVBREVSIC0tPg0KICAgICAgICA8aGVhZGVyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0J1dHRvbkNhbmNlbCcgb25jbGljaz0iYnV0dG9uUG9wVXBDYW5jZWwoJ1BvcFVwTGl2ZXInKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2FuY2VsJz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lclJpZ2h0JyBpZD0nQnV0dG9uRG9uZScgb25jbGljaz0iYnV0dG9uUG9wVXBEb25lKCdQb3BVcExpdmVyJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnTGl2ZXInLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnRGF0ZScgKyBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdEaWFiZXRlcycgKyAnRmlyc3RLbm93biddKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRG9uZSc+DQogICAgICAgICAgPGgyPlBlcnRhbnlhYW4gS2VzZWhhdGFuPC9oMj4NCiAgICAgICAgPC9oZWFkZXI+DQogICAgICAgIDwhLS0gRklFTERTRVQgLS0+DQogICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J011bHRpIFNpbmdsZSA2Zyc+R2FuZ2d1YW4gZnVuZ3NpL3Npc3RlbSBIYXRpIGRhbiBQYW5rcmVhcywgS2VuY2luZyBNYW5pcyAoRGlhYmV0ZXMgTWVsaXR1cyksIEJhdHUgRW1wZWR1LCBUdW1vciBIYXRpLCBwZW55YWtpdCBMaW1wYSBkYW4gbGFpbm55YT88L3NwYW4+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uJz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeScgaWQ9J0J1dHRvbkRpYWJldGVzJyBvbmNsaWNrPSJidXR0b25Qb3BVcE5hdmlnYXRpb24odGhpcy5pZCwgJ1BvcFVwTGl2ZXInLCAnUG9wVXBEaWFiZXRlcycsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0RpYWJldGVzJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nS3Vlc2lvbmVyIERpYWJldGVzJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz5zaWxhaGthbiBtZW1iZXJpa2FuIHJpbmNpYW4gbGViaWggbGFuanV0PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSdGdWxsIE11bHRpJyBpZD0nQXJlYUFtYW5kbWVudERldGFpbCc+PC90ZXh0YXJlYT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUnPihtYWtzaW11bSAyNTAga2FyYWt0ZXIpPC9sYWJlbD4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBEaWFiZXRlcyc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcERpYWJldGVzJz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcENhbmNlbCgnUG9wVXBEaWFiZXRlcycsICdQb3BVcExpdmVyJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBEaWFiZXRlcycsICdQb3BVcExpdmVyJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnRGlhYmV0ZXMnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S3Vlc2lvbmVyIERpYWJldGVzPC9oMj4NCiAgICAgICAgPC9oZWFkZXI+DQogICAgICAgIDwhLS0gRklFTERTRVQgLS0+DQogICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J011bHRpIFNpbmdsZSA2Zyc+R2FuZ2d1YW4gZnVuZ3NpL3Npc3RlbSBIYXRpIGRhbiBQYW5rcmVhcywgS2VuY2luZyBNYW5pcyAoRGlhYmV0ZXMgTWVsaXR1cyksIEJhdHUgRW1wZWR1LCBUdW1vciBIYXRpLCBwZW55YWtpdCBMaW1wYSBkYW4gbGFpbm55YT88L3NwYW4+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0xhYmVsRmlyc3RLbm93bic+MS4gS2FwYW4gcGVydGFtYSBrYWxpIGRpa2V0YWh1aSBtZW5kZXJpdGEgZGlhYmV0ZXM\\\/PC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25CYWNrYm9uZScgb25jbGljaz0iYnV0dG9uUG9wVXBOYXZpZ2F0aW9uKHRoaXMuaWQsICdQb3BVcE1vdGlvbicsICdQb3BVcEJhY2tib25lJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnQmFja2JvbmUnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdLdWVzaW9uZXIgR2FuZ2d1YW4gVHVsYW5nIEJlbGFrYW5nJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25Kb2ludCcgb25jbGljaz0iYnV0dG9uUG9wVXBOYXZpZ2F0aW9uKHRoaXMuaWQsICdQb3BVcE1vdGlvbicsICdQb3BVcEpvaW50Jywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnSm9pbnQnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdLdWVzaW9uZXIgR2FuZ2d1YW4gU2VuZGknPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUnPnNpbGFoa2FuIG1lbWJlcmlrYW4gcmluY2lhbiBsZWJpaCBsYW5qdXQ8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9J0Z1bGwgTXVsdGknIGlkPSdBcmVhQW1hbmRtZW50RGV0YWlsJz48L3RleHRhcmVhPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSc+KG1ha3NpbXVtIDI1MCBrYXJha3Rlcik8L2xhYmVsPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgPC9mb3JtPg0KICAgIDwvc2VjdGlvbj4NCiAgICA8c2VjdGlvbiBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcEJhY2tib25lJz4NCiAgICAgIDxmb3JtIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwQmFja2JvbmUnPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwQ2FuY2VsKCdQb3BVcEJhY2tib25lJywgJ1BvcFVwTW90aW9uJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBCYWNrYm9uZScsICdQb3BVcE1vdGlvbicsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0JhY2tib25lJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRG9uZSc+DQogICAgICAgICAgPGgyPkt1ZXNpb25lciBHYW5nZ3VhbiBUdWxhbmcgQmVsYWthbmc8L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDZpJz5HYW5nZ3VhbiBmdW5nc2kvc2lzdGVtIFR1bGFuZywgT3RvdCwgU2VuZGksIEt1bGl0Pzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJZZXMnIGlkPSdXcmFwJz4xLiBBcGFrYWggQW5kYSBwZXJuYWggbWVuZGVyaXRhIGhlcm5pYS9zcG9uZHlsb3Npcy9rZWxhaW5hbiB0dWxhbmcgYmVsYWthbmcgbGFpbm55YT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJObycgbmFtZT0nUmFkaW9CdXR0b25CQkRpc3NvcmRlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJyBmb3I9J1RleHREaXNzb3JkZXJEZXNjcmlwdGlvbic+SmlrYSAiWWEiLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nVGV4dEJCRGlzc29yZGVyRGVzY3JpcHRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+Mi4gS2FwYW4gcGVydGFtYSBrYWxpIGtlbHVoYW4gdGVyc2VidXQgZGlyYXNha2FuPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUJCRmlyc3RDb21wbGFpbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz4zLiBTZWJlcmFwYSBzZXJpbmdrYWgga2VsdWhhbiB0ZXJzZWJ1dCB0aW1idWwgZGFsYW0gMTIgYnVsYW4gdGVyYWtoaXI\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRDb21wbGFpbkFtb3VudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz40LiBNb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgZGFuIHBhZGEgYmFnaWFuIHR1YnVoIG1hbmE\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRCQlBhaW5Mb2NhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPjUuIEFwYWthaCBha3Rpdml0YXMgQW5kYSBtZW5nYWxhbWkgaGFtYmF0YW4\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eVllcycgbmFtZT0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eU5vJyBuYW1lPSdSYWRpb0J1dHRvbkJCTGltaXRlZEFjdGl2aXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz5KaWthICJZYSIsIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBQb3NpdGlvbmVyTGVmdCBNYXJnaW4nIGlkPSdUZXh0QkJMaW1pdGVkQWN0aXZpdHlEZXNjcmlwdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Ni4gS2FwYW4gbWVuZ2FsYW1pIGhhbWJhdGFuPzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVCQkZpcnN0TGltaXRlZEFjdGl2aXR5JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz43LiBNb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgbWVudXJ1dCBEb2t0ZXIgYXBhIHBlbnllYmFiIGRpYWdub3NpcyAgZ2FuZ2d1YW4gdHVsYW5nIGJlbGFrYW5nIHRlcnNlYnV0PzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz4oS2VjZWxha2FhbiwgUHJvc2VzIHBlbnVhYW4sIGtlY2VsYWthYW4gc2V3YWt0dSBiZXJvbGFocmFnYSwgZGFuIHNlYmFnYWlueWEpLjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRCQkNhdXNlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+OC4gQXBha2FoIEFuZGEgcGVybmFoIG1lbmphbGFuaSBYLXJheSwgTVJJLCBhdGF1IHBlbWVyaWtzYWFuIGxhaW5ueWE\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkJCWFJheVllcycgbmFtZT0nUmFkaW9CdXR0b25CQlhSYXknIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQkJYUmF5WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkJCWFJheU5vJyBuYW1lPSdSYWRpb0J1dHRvbkJCWFJheScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQkJYUmF5Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2EgIllhIiwgbW9ob24gYmVyaWthbiB0YW5nZ2FsIHBlbWVyaWtzYWFuOjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUJCWFJheScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz5Nb2hvbiBqZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgaGFzaWwgcGVtZXJpa3NhYW4ga2VzZWhhdGFuIHlhbmcgZGlsYWt1a2FuIHNlaHVidW5nYW4gZGVuZ2FuIGdhbmdndWFuIHR1bGFuZyBiZWxha2FuZyBpbmkuIChMYW1waXJrYW4gZm90b2tvcGkgaGFzaWwgcGVtZXJpa3NhYW4pPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRCQlhSYXlEZXNjcmlwdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+OS4gQXBha2FoIEFuZGEgbWVuZ2d1bmFrYW4gdG9uZ2thdCB1bnR1ayBiZXJqYWxhbiBhdGF1IGFsYXQgYmFudHUgbGFpbm55YT88L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbldhbGtpbmdTdGlja1llcycgbmFtZT0nUmFkaW9CdXR0b25XYWxraW5nU3RpY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25XYWxraW5nU3RpY2tZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbldhbGtpbmdTdGlja05vJyBuYW1lPSdSYWRpb0J1dHRvbldhbGtpbmdTdGljaycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25XYWxraW5nU3RpY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9ocj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRCQldhbGtpbmdTdGlja0Rlc2NyaXB0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+MTAuIEFwYWthaCBBbmRhIHBlcm5haCBkaW9wZXJhc2kgYXRhdSBkaWFuanVya2FuIG9wZXJhc2kgdW50dWsga2VsYWluYW4gaW5pPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeVllcycgbmFtZT0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeU5vJyBuYW1lPSdSYWRpb0J1dHRvblN1Z2dlc3RTdXJnZXJ5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5KaWthICJZYSIsIG1vaG9uIGJlcmlrYW4gdGFuZ2dhbCBvcGVyYXNpOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVTdWdnZXN0U3VyZ2VyeScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5OYW1hIExlbmdrYXAgRG9rdGVyOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCVE9QRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5vLiBUZWxlcG9uL0hhbmRwaG9uZTo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQlRPUERvY3RvclRlbGVwaG9uZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCVE9QQ2xpbmljTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkFsYW1hdCBLbGluaWsvUnVtYWggU2FraXQ6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQlRPUENsaW5pY0FkZHJlc3MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjExLiBNb2hvbiBqZWxhc2thbiBkZW5nYW4gcmluY2kgamVuaXMgcGVuZ29iYXRhbiBBbmRhIHNhYXQgaW5pIGRhbiBkYWh1bHUgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPkFwYWthaCBkaWJlcmkgc3VudGlrYW4\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE1lZGl1bSBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQkJJbmplY3Rpb25ZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQkJJbmplY3Rpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25CQkluamVjdGlvblllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQkJJbmplY3Rpb25ObycgbmFtZT0nUmFkaW9CdXR0b25CQkluamVjdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25CQkluamVjdGlvbk5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2JyPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nPlRhbmdnYWwgQmVyb2JhdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+TmFtYSBPYmF0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJz5Eb3NpczwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+RnJla3VlbnNpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2UxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3kxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2UyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3kyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2UzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3kzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQ0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2U0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3k0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQ1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2U1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3k1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgTGVuZ2thcCBEb2t0ZXI6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJCT1RUT01Eb2N0b3JOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Tm8uIFRlbGVwb24vSGFuZHBob25lOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCQk9UVE9NRG9jdG9yVGVsZXBob25lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBLbGluaWsvUnVtYWggU2FraXQ6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJCT1RUT01DbGluaWNOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCQk9UVE9NQ2xpbmljQWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MTIuIFNhYXQgaW5pIGRlbmdhbiBEb2t0ZXIgc2lhcGEgQW5kYSBtZWxha3VrYW4ga29udHJvbD88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQkJvdHRvbTJEb2N0b3JOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Tm8uIFRlbGVwb24vSGFuZHBob25lOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCQm90dG9tMkRvY3RvclRlbGVwaG9uZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCQm90dG9tMkNsaW5pY05hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5BbGFtYXQgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJCb3R0b20yQ2xpbmljQWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MTMuIFNlYmVyYXBhIHNlcmluZyBBbmRhIGtvbnRyb2w\\\\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uJz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRITWVkaWNhbENoZWNrWWVzJyBuYW1lPSdSYWRpb0J1dHRvblRITWVkaWNhbENoZWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVEhNZWRpY2FsQ2hlY2tZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRITWVkaWNhbENoZWNrTm8nIG5hbWU9J1JhZGlvQnV0dG9uVEhNZWRpY2FsQ2hlY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVEhNZWRpY2FsQ2hlY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUnPihKaWthICJZYSIsIG1vaG9uIG1lbGVuZ2thcGkgaGFzaWwgcGVtZXJpa3NhYW4gcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+SmVuaXMgUGVtZXJpa3NhYW48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5UYW5nZ2FsPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+SGFzaWw8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPlQzPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUM0RhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFQzUmVzdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5UNDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0VDREYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUNFJlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+VFNIPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUU0hEYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUU0hSZXN1bHQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkVDRzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0RUNHRGF0ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RUNHUmVzdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5CaW9wc2k8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dEJpb3BzeURhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dEJpb3BzeVJlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+U2Nhbi9NUkkvVVNHPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRTY2FuTVJJVVNHRGF0ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0U2Nhbk1SSVVTR1Jlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+Ni4gQXBha2FoIEFuZGEgcGVybmFoIGRpb3BlcmFzaSBhdGF1IGRpYW5qdXJrYW4gb3BlcmFzaSB1bnR1ayBrZWxhaW5hbiBpbmk\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25USE9wZXJhdGlvblllcycgbmFtZT0nUmFkaW9CdXR0b25USE9wZXJhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25USE9wZXJhdGlvblllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25USE9wZXJhdGlvbk5vJyBuYW1lPSdSYWRpb0J1dHRvblRIT3BlcmF0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25USE9wZXJhdGlvbk5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIGJlcmlrYW4gdGFuZ2dhbCBvcGVyYXNpOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlVEhPcGVyYXRpb25EYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TGFtYSBwZXJhd2F0YW4gZGkgUnVtYWggU2FraXQ6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nVGlueSBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRISG9zcGl0YWxUcmVhdG1lbnREdXJhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkhhcmk8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5KZW5pcyBPcGVyYXNpOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0VEhPcGVyYXRpb25UeXBlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRIRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5vLiBUZWxlcG9uL0hhbmRwaG9uZTo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRISG9zcGl0YWxUZWxlcGhvbmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5OYW1hIEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRISG9zcGl0YWxOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRISG9zcGl0YWxBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPk1vaG9uIG1lbGFtcGlya2FuIGhhc2lsIFBhdG9sb2dpIEFuYXRvbWkgb3BlcmFzaSB0ZXJzZWJ1dDwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTWVkaXVtIEl0ZW0nPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkF0dGFjaE9wZXJhdGlvblJlc3VsdFllcycgbmFtZT0nUmFkaW9CdXR0b25BdHRhY2hPcGVyYXRpb25SZXN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQXR0YWNoT3BlcmF0aW9uUmVzdWx0WWVzJz5BZGE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25BdHRhY2hPcGVyYXRpb25SZXN1bHRObycgbmFtZT0nUmFkaW9CdXR0b25BdHRhY2hPcGVyYXRpb25SZXN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkF0dGFjaE9wZXJhdGlvblJlc3VsdE5vJz5UaWRhayBhZGE8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+SmlrYSAiVGlkYWsiLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEV4cGxhaW5PcGVyYXRpb25SZXN1bHRObycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz5NZW51cnV0IERva3RlciBBbmRhLCBiYWdhaW1hbmEgaGFzaWwgUGF0b2xvZ3kgQW5hdG9taSB0ZXJzZWJ1dD88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUGF0aG9sb2d5UmVzdWx0Tm9ybWFsJyBuYW1lPSdSYWRpb0J1dHRvblBhdGhvbG9neVJlc3VsdCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdub3JtYWwnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBhdGhvbG9neVJlc3VsdE5vcm1hbCc+SmluYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25QYXRob2xvZ3lSZXN1bHREYW5nZXInIG5hbWU9J1JhZGlvQnV0dG9uUGF0aG9sb2d5UmVzdWx0JyB0eXBlPSdyYWRpbycgdmFsdWU9J2Rhbmdlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUGF0aG9sb2d5UmVzdWx0RGFuZ2VyJz5HYW5hczwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBhdGhvbG9neVJlc3VsdE90aGVycycgbmFtZT0nUmFkaW9CdXR0b25QYXRob2xvZ3lSZXN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBhdGhvbG9neVJlc3VsdE90aGVycyc+TGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbSBNYXJnaW4nIGlkPSdUZXh0UGF0aG9sb2d5UmVzdWx0T3RoZXJEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz43LiBBcGFrYWggYWRhIHBlbmdvYmF0YW4gYXRhdSB0aW5kYWthbiB5YW5nIGRpbGFrdWthbiBzZXRlbGFoIG9wZXJhc2k\\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0V2hlcmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjMuIE1vaG9uIHNlYnV0a2FuIGRpYWdub3NpcyBwYXN0aSBkYXJpIHR1bW9yIHRlcnNlYnV0LjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERpYWdub3NlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+NC4gQXBha2FoIHR1bW9yIHRlcnNlYnV0IHRlbGFoIGRpYW5na2F0LyBkaW9wZXJhc2k\\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DdXJyZW50WWVzJyBuYW1lPSdSYWRpb0J1dHRvbkN1cnJlbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ3VycmVudFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DdXJyZW50Tm8nIG5hbWU9J1JhZGlvQnV0dG9uQ3VycmVudCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ3VycmVudE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+VGFuZ2dhbCB0ZXJha2hpciBwZXJhd2F0YW46PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgSXRlbSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlTGFzdFRoZXJhcHknIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+QWxhc2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0UmVhc29uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nPlBlbmdvYmF0YW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUcmVhdG1lbnQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+QmVyYXBhIGthbGkgZGFsYW0gMSAoc2F0dSkgdGFodW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRIb3dPZnRlbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJz5OYW1hIExlbmdrYXAgRG9rdGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJz5Oby4gVGVsZXBvbi9IYW5kcGhvbmU6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0VGVsZXBob25lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nPk5hbWEgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xvbmcgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dENsaW5pY05hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRDbGluaWNBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+Ni4gQXBha2FoIEFuZGEgcGVybmFoIHRpZGFrIG1hc3VrIGtlcmphIGthcmVuYSBrb25kaXNpIGluaT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE1lZGl1bSBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkxlYXZlWWVzJyBuYW1lPSdSYWRpb0J1dHRvbkxlYXZlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkxlYXZlWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkxlYXZlTm8nIG5hbWU9J1JhZGlvQnV0dG9uTGVhdmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkxlYXZlTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdXcmFwJz5KaWthIOKAnFlh4oCdLCBrYXBhbjo8L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUxlYXZlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+PC9sYWJlbD4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPmRhbiBiZXJhcGEgbGFtYT88L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dExlYXZlRHVyYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+aGFyaTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+Ny4gU2VidXRrYW4ga2FwYW4gdGVyYWtoaXIga2FsaSBBbmRhIG1lbGFrdWthbiBrb25zdWx0YXNpIGRlbmdhbiBkb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPk1vaG9uIGxlbmdrYXBpIHBlcnRhbnlhYW4gcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgZGFuIG1vaG9uIGRpbGFtcGlya2FuIGZvdG9rb3BpIGhhc2lsIHBlbWVyaWtzYWFuLjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+SmVuaXMgUGVtZXJpa3NhYW48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+VGFuZ2dhbCBQZW1lcmlrc2FhbjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXIgTWFyZ2luJz5IYXNpbCBQZW1lcmlrc2FhbjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEtpbmRPZkNoZWNraW5nMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0RGF0ZU9mQ2hlY2tpbmcxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSZXN1bHRPZkNoZWNraW5nMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEtpbmRPZkNoZWNraW5nMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0RGF0ZU9mQ2hlY2tpbmcyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSZXN1bHRPZkNoZWNraW5nMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEtpbmRPZkNoZWNraW5nMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0RGF0ZU9mQ2hlY2tpbmczJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSZXN1bHRPZkNoZWNraW5nMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRLaW5kT2ZDaGVja2luZzQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dERhdGVPZkNoZWNraW5nNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UmVzdWx0T2ZDaGVja2luZzQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0S2luZE9mQ2hlY2tpbmc1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHREYXRlT2ZDaGVja2luZzUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJlc3VsdE9mQ2hlY2tpbmc1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz44LiBNb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dEFkZGl0aW9uYWxJbmZvJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICA8aDI+UEVSTllBVEFBTiBEQU4gS1VBU0E8L2gyPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbnlhdGFrYW4gZGVuZ2FuIHNlYmVuYXJueWEgYmFod2Egc2VtdWEgcGVybnlhdGFhbiBkYW4gamF3YWJhbiBkaSBhdGFzIGFkYWxhaCBsZW5na2FwIGRhbiBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YS48L2xpPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci8gUnVtYWggU2FraXQvIEtsaW5pay8gUHVza2VzbWFzLyBsYWJvcmF0b3JpdW0sIHBlcnVzYWhhYW4gYXN1cmFuc2kgYXRhdSBwZXJ1c2FoYWFuIHJlYXN1cmFuc2ksIGJhZGFuLCBpbnN0YW5zaS8gbGVtYmFnYSBhdGF1IHBpaGFrIGxhaW4geWFuZyBtZW1wdW55YWkgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLCB1bnR1ayBtZW5ndW5na2Fwa2FuIGtlcGFkYSBQZW5hbmdndW5nIHNlbXVhIGtldGVyYW5nYW4gdGVudGFuZyBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU3VyYXQgUGVuZ2FqdWFuIEFzdXJhbnNpIEppd2EgZGFuIGFrYW4gbWVuZ2lrYXQgc2F5YSwgYWhsaSB3YXJpcywgZGFuIGtlbHVhcmdhIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IHNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggc2F5YSBtZW5pbmdnYWwuIFNhbGluYW4vIGZvdG9rb3BpIGRhcmkgc3VyYXQga3Vhc2EgaW5pIHNhbWEgc2FoIGJlcmxha3VueWEgc2VwZXJ0aSBkb2t1bWVuIGFzbGkuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPGRpdiBpZD0nQm94RGF0ZSc+PC9kaXY+DQogICAgPCEtLSAvICVkaXYjQm94VGltZSAtLT4NCiAgPC9tYWluPg0KPC9odG1sPg0K","DateCreated":"\/Date(1468774800000+0700)\/","FileName":"20160803113506.html","FileNameIndo":"20160803113506.html","FolderName":"20160803","Id":7,"SPAJId":1,"SPAJSection":"KS_PH","Status":"A","ValidDate":"\/Date(1468774800000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/DQogICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgIEppa2Eg4oCcWWHigJ0sIGJlcmFwYSBiYXRhbmcgcGVyIGhhcmk\/DQogICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkU21va2VBY3Rpdml0eVllcycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTbW9rZUFjdGl2aXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFNtb2tlQWN0aXZpdHlZZXMnPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkU21va2VBY3Rpdml0eVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTbW9rZUFjdGl2aXR5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkU21va2VBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkU21va2VBY3Rpdml0eU5vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFNtb2tlQWN0aXZpdHlObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nTnVtYmVyUHJvc3BlY3RpdmVJbnN1cmVkU21va2VBY3Rpdml0eUFtb3VudCc+PC90YWJsZT4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nUG9zaXRpb25lckNlbnRlcic+QmF0YW5nPC9zcGFuPg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNtb2tlQWN0aXZpdHlZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU21va2VBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTbW9rZUFjdGl2aXR5WWVzJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNtb2tlQWN0aXZpdHlZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU21va2VBY3Rpdml0eU5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNtb2tlQWN0aXZpdHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNtb2tlQWN0aXZpdHlObyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTbW9rZUFjdGl2aXR5Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckNlbnRlcicgaWQ9J051bWJlclBvbGljeUhvbGRlclNtb2tlQWN0aXZpdHlBbW91bnQnPjwvdGFibGU+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1Bvc2l0aW9uZXJDZW50ZXInPkJhdGFuZzwvc3Bhbj4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAzLiBBcGFrYWggQW5kYSBtZW1pbGlraSBrZWJpYXNhYW4gYXRhdSBwZXJuYWggbWVuZ2d1bmFrYW4gbmFya290aWthLCB6YXQgYWRpa3RpZiBhdGF1IG9iYXQtb2JhdGFuIGxhaW5ueWEsIG1pbnVtIGFsa29ob2wgc2VjYXJhIGJlcmxlYmloYW4\/IEppa2Eg4oCcWWHigJ0sIGplbGFza2FuIGp1bWxhaCBzZXJ0YSBmcmVrdWVuc2kgbWVuZ2tvbnN1bXNpbnlhLiBTZXJ0YSBqZWxhc2thbiBqaWthIGFkYSByaXdheWF0IHBlcmF3YXRhbi9tZW5kYXBhdCB0ZXJhcGkga2FyZW5hIGhhbCB0ZXJzZWJ1dD8NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKdW5raWVZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSnVua2llJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEp1bmtpZVllcyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKdW5raWVZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSnVua2llTm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSnVua2llJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKdW5raWVObyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKdW5raWVObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckp1bmtpZVllcycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKdW5raWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySnVua2llWWVzJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckp1bmtpZVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKdW5raWVObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKdW5raWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckp1bmtpZU5vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckp1bmtpZU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgNC4gQXBha2FoIEFuZGEgbWVtaWxpa2kgaG9iaSBhdGF1IHNld2FrdHUtd2FrdHUgbWVsYWt1a2FuIGtlZ2lhdGFuIHlhbmcgYmVyZXNpa28gdGluZ2dpL2JhaGF5YSBhdGF1IG1hc2loIGFrdGlmIGRhbGFtIHBla2VyamFhbiBiZXJlc2lrbyB0aW5nZ2kgKG1lbnllbGFtLCBwYW5qYXQgdGViaW5nLCBtZW5kYWtpIGd1bnVuZywgdGVyanVuIHBheXVuZywgcGFyYWxheWFuZywgYmFsYXAgbW90b3IvbW9iaWwsIHBlcnRhbWJhbmdhbiwgbWlueWFrIGRhbiBnYXMgYnVtaSwgS2VsYXV0YW4sIFROSS9Qb2xyaSwgcGVuZXJiYW5nYW4gKHNlbGFpbiBkYXJpIHBlbnVtcGFuZyByZXNtaSBwZW5lcmJhbmdhbiB0ZXJqYWR3YWwpKT8gKEppa2EgamF3YWJhbiDigJxZYeKAnSBtb2hvbiBtZWxlbmdrYXBpIGt1ZXNpb25lciB5YW5nIHNlc3VhaSBob2JpL2tlZ2lhdGFuL3Bla2VyLSBqYWFuIHRlcnNlYnV0IGRhbiBkaWxhbXBpcmthbiBiZXJzYW1hIFNQQUogaW5pKS4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRBY3Rpdml0eVllcycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRBY3Rpdml0eVllcyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRBY3Rpdml0eVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRBY3Rpdml0eU5vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEFjdGl2aXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRBY3Rpdml0eU5vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEFjdGl2aXR5Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJBY3Rpdml0eVllcycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJBY3Rpdml0eVllcyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJBY3Rpdml0eVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJBY3Rpdml0eU5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckFjdGl2aXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJBY3Rpdml0eU5vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckFjdGl2aXR5Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICA1LiBBcGFrYWggQW5kYSBkYWxhbSAxMiBidWxhbiB0ZXJha2hpciBpbmkvbWVuZGF0YW5nIEFuZGEgcGVybmFoL21lbWlsaWtpIHJlbmNhbmEgYmVwZXJnaWFuL3RpbmdnYWwgZGkgbHVhciBuZWdlcmk\\/PC9zcGFuPg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEltbXVuZVllcycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRJbW11bmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSW1tdW5lWWVzJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEltbXVuZVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRJbW11bmVObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRJbW11bmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEltbXVuZU5vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEltbXVuZU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySW1tdW5lWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckltbXVuZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJJbW11bmVZZXMnPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySW1tdW5lWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckltbXVuZU5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckltbXVuZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySW1tdW5lTm8nPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySW1tdW5lTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRmlyc3RJbmRlbnQnPmwuIEdhbmdndWFuIGZ1bmdzaSBQZXJ0dW1idWhhbiBTZWwsIFR1bW9yLCBLaXN0YSwgS2Fua2VyLCBCZW5qb2xhbiBwYWRhIHBlcm11a2FhbiBrdWxpdCBhdGF1IHBlcnR1bWJ1aGFuIGFibm9ybWFsIGxhaW5ueWE\/PC9zcGFuPg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENlbGxZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2VsbCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRDZWxsWWVzJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENlbGxZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2VsbE5vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENlbGwnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENlbGxObyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRDZWxsTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJDZWxsWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNlbGwnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2VsbFllcyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJDZWxsWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNlbGxObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJDZWxsJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJDZWxsTm8nPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2VsbE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0ZpcnN0SW5kZW50Jz5tLiBHYW5nZ3VhbiBLZXNlaGF0YW4gbGFpbm55YSB5YW5nIHRpZGFrL2JlbHVtIGRpbnlhdGFrYW4gZGlhdGFzIHRlcm1hc3VrIG5hbXVuIHRpZGFrIHRlcmJhdGFzIHBhZGEga2VsYWluYW4gYmVudHVrIHR1YnVoLCBrZWxhaW5hbi9jYWNhdCBmaXNpaywga2VsYWluYW4vY2FjYXQgYmF3YWFuIGRhbiBsYWlubnlhPzwvc3Bhbj4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRPdGhlcklsbG5lc3NZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkT3RoZXJJbGxuZXNzJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE90aGVySWxsbmVzc1llcyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRPdGhlcklsbG5lc3NZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkT3RoZXJJbGxuZXNzTm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkT3RoZXJJbGxuZXNzJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRPdGhlcklsbG5lc3NObyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRPdGhlcklsbG5lc3NObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck90aGVySWxsbmVzc1llcycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJPdGhlcklsbG5lc3MnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyT3RoZXJJbGxuZXNzWWVzJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck90aGVySWxsbmVzc1llcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJPdGhlcklsbG5lc3NObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJPdGhlcklsbG5lc3MnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck90aGVySWxsbmVzc05vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck90aGVySWxsbmVzc05vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICA8dGQgY2xhc3M9J0NoaWxkJyBjb2xzcGFuPSczJz4NCiAgICAgICAgICAgICAgICBKaWthIHBlcnRhbnlhYW4gbm9tb3IgNiBkaWphd2FiICJZYSIgbWFrYSBtb2hvbiBhZ2FyIG1lbGVuZ2thcGkga29sb20gZGliYXdhaCBpbmkNCiAgICAgICAgICAgICAgICBBcGFiaWxhIGRpcGVybHVrYW4gZGFwYXQgbWVtYmVyaWthbiBrZXRlcmFuZ2FuIHBhZGEgbGVtYmFyIHRhbWJhaGFuLiBMZW1iYXIgdGFtYmFoYW4gdGVyc2VidXQgaGFydXMgZGl0YW5kYXRhbmdhbmkgb2xlaCBDYWxvbiBQZW1lZ2FuZyBQb2xpcy9DYWxvbiBUZXJ0YW5nZ3VuZyBkYW4gbWVuamFkaSBiYWdpYW4geWFuZyB0aWRhayB0ZXJwaXNhaGthbiBkYXJpIFNQQUogaW5pLg0KICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgPC90YWJsZT4NCiAgICAgICAgPHNlY3Rpb24gY2xhc3M9J1NlY3Rpb25Gb290ZXInIHN0eWxlPSdtYXJnaW4tdG9wOiAxNDBweDsnPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0Zvb3RlckNvbnRhaW5lcic+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdGb290ZXJHZW5lcmFsJz4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05vdGUgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IFNwYW5Gb290ZXJEZXRhaWwnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05vdGUgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCc+UFQgQXN1cmFuc2kgSml3YSBCQ0EgdGVsYWggdGVyZGFmdGFyIGRhbiBkaWF3YXNpIG9sZWggT3Rvcml0YXMgSmFzYSBLZXVhbmdhbi48L3NwYW4+DQogICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1BhZ2VCcmVhayc+PC9kaXY+DQogICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25IZWFkZXI1Jz4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdIZWFkZXJDb250YWluZXInPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nSGVhZGVyR2VuZXJhbCc+DQogICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J1RleHRIZWFkZXJTUEFKTnVtYmVyJz48L3RhYmxlPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nVGV4dEhlYWRlclNQQUpOdW1iZXInPk5vbW9yIFNQQUo8L2xhYmVsPg0KICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgIDxocj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0hlYWRlckJyZWFrJz48L2Rpdj4NCiAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICA8dGFibGUgY2xhc3M9J1NxdWFyZSc+DQogICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICA8dGg+PC90aD4NCiAgICAgICAgICAgICAgPHRoPjwvdGg+DQogICAgICAgICAgICAgIDx0aD48L3RoPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgPHRkIGNsYXNzPSdDaGlsZCcgY29sc3Bhbj0nMyc+DQogICAgICAgICAgICAgICAgPGgzPmEuIENhbG9uIFRlcnRhbmdndW5nPC9oMz4NCiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9J1NwYWNlJyBpZD0nVGFibGVQcm9zcGVjdGl2ZUluc3VyZWRJbGxuZXNzJz4NCiAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5Oby48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5OYW1hIFBlbnlha2l0PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICA8dGg+S2FwYW4gTXVsYWkgU2FraXQ8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5MYW1hIFNha2l0PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtYSBEb2t0ZXI8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5SdW1haCBTYWtpdCAvIEtsaW5payAvIExhYm9yYXRvcml1bSAvIFB1c2tlc21hczwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgPHRoPkFsYW1hdCBkYW4gTm9tb3IgVGVsZXBvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgPGgzPmIuIENhbG9uIFBlbWVnYW5nIFBvbGlzPC9oMz4NCiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9J1NwYWNlJyBpZD0nVGFibGVQb2xpY3lIb2xkZXJJbGxuZXNzJz4NCiAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5Oby48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5OYW1hIFBlbnlha2l0PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICA8dGg+S2FwYW4gTXVsYWkgU2FraXQ8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5MYW1hIFNha2l0PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtYSBEb2t0ZXI8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5SdW1haCBTYWtpdCAvIEtsaW5payAvIExhYm9yYXRvcml1bSAvIFB1c2tlc21hczwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgPHRoPkFsYW1hdCBkYW4gTm9tb3IgVGVsZXBvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICA8dGQgY2xhc3M9J0NoaWxkJz4NCiAgICAgICAgICAgICAgICA3LiBBcGFrYWggQW5kYSB0ZWxhaCBtZW1pbGlraSBhdGF1IHNlZGFuZyBtZW5nYWp1a2FuIHBlcnRhbmdndW5nYW4gQXN1cmFuc2kgSml3YSwga2VjZWxha2Fhbiwga2VzZWhhdGFuLCBwZW11bGloYW4gcG9saXM\/IFNlcnRhIGFwYWthaCBwZW5nYWp1YW4gQW5kYSBwZXJuYWggZGl0b2xhay8gZGl0YW5nZ3Voa2FuL2Rpa2VuYWthbiBla3N0cmEgUHJlbWkgZGl1YmFoIGRhbGFtIGJlbnR1ayBhcGFwdW4gb2xlaCBwZXJ1c2FoYWFuIEFzdXJhbnNpIEppd2E\/DQogICAgICAgICAgICAgICAgQXBhYmlsYSBqYXdhYmFuIOKAnFlh4oCdIG1ha2EgbW9ob24gYWdhciBtZWxlbmdrYXBpIGtvbG9tIGRpYmF3YWggaW5pLg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFNQQUpQcm9wb3NhbFllcycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTUEFKUHJvcG9zYWwnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkU1BBSlByb3Bvc2FsWWVzJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFNQQUpQcm9wb3NhbFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTUEFKUHJvcG9zYWxObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTUEFKUHJvcG9zYWwnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFNQQUpQcm9wb3NhbE5vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFNQQUpQcm9wb3NhbE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU1BBSlByb3Bvc2FsWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNQQUpQcm9wb3NhbCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJTUEFKUHJvcG9zYWxZZXMnPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU1BBSlByb3Bvc2FsWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNQQUpQcm9wb3NhbE5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclNQQUpQcm9wb3NhbCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU1BBSlByb3Bvc2FsTm8nPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyU1BBSlByb3Bvc2FsTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgIDx0ZCBjbGFzcz0nQ2hpbGQnIGNvbHNwYW49JzMnPg0KICAgICAgICAgICAgICAgIDxoMz5hLiBDYWxvbiBUZXJ0YW5nZ3VuZzwvaDM+DQogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdTcGFjZScgaWQ9J1RhYmxlUHJvc3BlY3RpdmVJbnN1cmVkU1BBSlByb3Bvc2FsJz4NCiAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5Oby48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5OYW1hIFBlcnVzYWhhYW48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5Ob21vciBQb2xpczwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgPHRoPlRhbmdnYWwgRGl0ZXJiaXRrYW48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5VYW5nIFBlcnRhbmdndW5nYW48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5IYXNpbCBLZXB1dHVzYW48L3RoPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgIDxoMz5iLiBDYWxvbiBQZW1lZ2FuZyBQb2xpczwvaDM+DQogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdTcGFjZScgaWQ9J1RhYmxlUG9saWN5SG9sZGVyU1BBSlByb3Bvc2FsJz4NCiAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5Oby48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5OYW1hIFBlcnVzYWhhYW48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5Ob21vciBQb2xpczwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgPHRoPlRhbmdnYWwgRGl0ZXJiaXRrYW48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5VYW5nIFBlcnRhbmdndW5nYW48L3RoPg0KICAgICAgICAgICAgICAgICAgICAgIDx0aD5IYXNpbCBLZXB1dHVzYW48L3RoPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDguIEFwYWthaCBBbmRhIHBlcm5haCBtZW5nYWp1a2FuIGtsYWltIGtlIHBlcnVzYWhhYW4gQXN1cmFuc2kgSml3YT8gSmlrYSDigJxZYSwgbW9ob24gamVsYXNrYW4gYWxhc2FubnlhLg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENsYWltWWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENsYWltJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENsYWltWWVzJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENsYWltWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENsYWltTm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW0nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENsYWltTm8nPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW1Obyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNsYWltWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNsYWltJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNsYWltWWVzJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNsYWltWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNsYWltTm8nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2xhaW0nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNsYWltTm8nPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2xhaW1Obyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDkuIEFwYWthaCBBbmRhIHBlcm5haCBtZW5kYXBhdGthbiBhdGF1IGJlcm1ha3N1ZCBtZW5qYWxhbmkgcGVtZXJpa3NhYW4ga2VzZWhhdGFuIGRpYWdub3N0aWssIHNlcGVydGkgU2luYXItWCwgVVNHLCBDVC1zY2FuLCBNUkksIEVLRywgVHJlYWRtaWxsLCBwZW1lcmlrc2FhbiBkYXJhaCwgcGVtZXJpa3NhYW4gdXJpbiwgZGFuIGxhaW4tbGFpbj8NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFnbm9zdGljWWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWdub3N0aWMnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhZ25vc3RpY1llcyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFnbm9zdGljWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWdub3N0aWNObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFnbm9zdGljJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFnbm9zdGljTm8nPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhZ25vc3RpY05vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhZ25vc3RpY1llcycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJEaWFnbm9zdGljJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJDZW50ZXInIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWdub3N0aWNZZXMnPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhZ25vc3RpY1llcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJEaWFnbm9zdGljTm8nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhZ25vc3RpYycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckNlbnRlcicgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhZ25vc3RpY05vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWdub3N0aWNObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDEwLiBLaHVzdXMgQ2Fsb24gVGVydGFuZ2d1bmcgYW5hay1hbmFrICh1c2lhIOKJpCA1IChsaW1hKSB0YWh1bik6DQogICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRmlyc3RJbmRlbnQgUG9zaXRpb25lckxlZnQnPldha3R1IGxhaGlyPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUHJlZ25hbmN5Tm9ybWFsJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFByZWduYW5jeScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWROb3JtYWxQcmVnbmFuY3knPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gV3JhcCBQb3NpdGlvbmVyQ2VudGVyJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUHJlZ25hbmN5Tm9ybWFsJz5DdWt1cCBCdWxhbjwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdCb3hQcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFuY3lQcmVtYXR1cmUnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUHJlZ25hbmN5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nQm94UHJvc3BlY3RpdmVJbnN1cmVkUHJlZ25hbmN5UHJlbWF0dXJlJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdCb3hQcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFuY3lQcmVtYXR1cmUnPlByZW1hdHVyPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdGaXJzdEluZGVudCBQb3NpdGlvbmVyTGVmdCc+UGFuamFuZyBkYW4gYmVyYXQgc2FhdCBsYWhpcjwvbGFiZWw+DQogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFieUhlaWdodCc+PC90YWJsZT4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nUG9zaXRpb25lckxlZnQnPkNtPC9zcGFuPg0KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhYnlXZWlnaHQnPjwvdGFibGU+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0Jz5LZzwvc3Bhbj4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICA8L3RhYmxlPg0KICAgICAgICA8c2VjdGlvbiBjbGFzcz0nU2VjdGlvbkZvb3Rlcicgc3R5bGU9J21hcmdpbi10b3A6IDcwcHg7Jz4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdGb290ZXJDb250YWluZXInPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nRm9vdGVyR2VuZXJhbCc+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOb3RlIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCBTcGFuRm9vdGVyRGV0YWlsJz48L3NwYW4+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOb3RlIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnPlBUIEFzdXJhbnNpIEppd2EgQkNBIHRlbGFoIHRlcmRhZnRhciBkYW4gZGlhd2FzaSBvbGVoIE90b3JpdGFzIEphc2EgS2V1YW5nYW4uPC9zcGFuPg0KICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdQYWdlQnJlYWsnPjwvZGl2Pg0KICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyNic+DQogICAgICAgICAgPGRpdiBjbGFzcz0nSGVhZGVyQ29udGFpbmVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0hlYWRlckdlbmVyYWwnPg0KICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdUZXh0SGVhZGVyU1BBSk51bWJlcic+PC90YWJsZT4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1RleHRIZWFkZXJTUEFKTnVtYmVyJz5Ob21vciBTUEFKPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICA8aHI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdIZWFkZXJCcmVhayc+PC9kaXY+DQogICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgPHRhYmxlIGNsYXNzPSdTcXVhcmUnPg0KICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgPHRoPjwvdGg+DQogICAgICAgICAgICAgIDx0aD48L3RoPg0KICAgICAgICAgICAgICA8dGg+PC90aD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAxMS4gUGVydGFueWFhbiBraHVzdXMgdW50dWsgd2FuaXRhOg0KICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0ZpcnN0SW5kZW50IFBvc2l0aW9uZXJMZWZ0Jz5hLiBBcGFrYWggQW5kYSBzZWRhbmcgaGFtaWw\/IFVzaWEga2VoYW1pbGFuPC9zcGFuPg0KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFByZWduYW50V2Vlayc+PC90YWJsZT4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nUG9zaXRpb25lckxlZnQnPk1pbmdndTwvc3Bhbj4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFudFllcycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFudCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFudFllcyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFudFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFudE5vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFByZWduYW50JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFudE5vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFByZWduYW50Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJQcmVnbmFudFllcycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJQcmVnbmFudCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJQcmVnbmFudFllcyc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBXcmFwIFBvc2l0aW9uZXJDZW50ZXInIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJQcmVnbmFudFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJQcmVnbmFudE5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclByZWduYW50JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyQ2VudGVyJyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJQcmVnbmFudE5vJz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFdyYXAgUG9zaXRpb25lckNlbnRlcicgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclByZWduYW50Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRmlyc3RJbmRlbnQnPmIuIEFkYWthaCBrb21wbGlrYXNpIHBhZGEga2VoYW1pbGFuIHRlcm1hc3VrIHBlcnNhbGluYW4gc2VjYXJhIHNlY3RpbyBjYWVzYXJpYSB5YW5nIGRpbGFrdWthbiBrYXJlbmEgbWVuZGVyaXRhIHN1YXR1IHBlbnlha2l0IChEYXJhaCBUaW5nZ2ksIEhlcGF0aXRpcywgRGlhYmV0ZXMgZGFuIGxhaW4tbGFpbik\","DateCreated":"\/Date(1468774800000+0700)\/","FileName":"page_spaj_pdf.html","FileNameIndo":"page_spaj_pdf.html","FolderName":"20160803","Id":8,"SPAJId":1,"SPAJSection":"PDF","Status":"A","ValidDate":"\/Date(1468774800000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRXZWlnaHRDaGFuZ2VZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkV2VpZ2h0Q2hhbmdlJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRXZWlnaHRDaGFuZ2VZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkV2VpZ2h0Q2hhbmdlTm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkV2VpZ2h0Q2hhbmdlJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkV2VpZ2h0Q2hhbmdlTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvbGk+DQogICAgICAgIDxocj4NCiAgICAgICAgPGxpPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0l0ZW0nIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTbW9rZUFjdGl2aXR5WWVzJyBpZD0nTGFiZWxQcm9zcGVjdGl2ZUluc3VyZWRTbW9rZUFjdGl2aXR5Jz4NCiAgICAgICAgICAgICAgQXBha2FoIEFuZGEgbWVyb2tvayBkYWxhbSAxMiAoZHVhIGJlbGFzKSBidWxhbiB0ZXJha2hpciAodGVybWFzdWsgcm9rb2sgZWxla3Ryb25payBhdGF1IHByb2R1ayB0ZW1iYWthdSBsYWlubnlhKT8NCiAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFNtb2tlQWN0aXZpdHlZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkU21va2VBY3Rpdml0eScgb25jaGFuZ2U9InNob3dQb3BVcEZyb21SYWRpb0J1dHRvbih0aGlzLm5hbWUsICd0cnVlJywgJ1BvcFVwU21va2VBY3Rpdml0eScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50LCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnU21va2VBY3Rpdml0eSddKSIgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTbW9rZUFjdGl2aXR5WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTbW9rZUFjdGl2aXR5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkU21va2VBY3Rpdml0eScgb25jaGFuZ2U9InNob3dQb3BVcEZyb21SYWRpb0J1dHRvbih0aGlzLm5hbWUsICd0cnVlJywgJ1BvcFVwU21va2VBY3Rpdml0eScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50LCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnU21va2VBY3Rpdml0eSddKSIgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkU21va2VBY3Rpdml0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByZXZpZXcnIGlkPSdCdXR0b25QcmV2aWV3UHJvc3BlY3RpdmVJbnN1cmVkU21va2VBY3Rpdml0eScgb25jbGljaz0ic2hvd1BvcFVwRnJvbUJ1dHRvbignUG9wVXBTbW9rZUFjdGl2aXR5Jywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnU21va2VBY3Rpdml0eScsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J1ZpZXcgcmVjZW50IGlucHV0Jz4NCiAgICAgICAgPC9saT4NCiAgICAgICAgPGhyPg0KICAgICAgICA8bGk+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEp1bmtpZVllcycgaWQ9J0xhYmVsUHJvc3BlY3RpdmVJbnN1cmVkSnVua2llJz4NCiAgICAgICAgICAgICAgQXBha2FoIEFuZGEgbWVtaWxpa2kga2ViaWFzYWFuIGF0YXUgcGVybmFoIG1lbmdndW5ha2FuIG5hcmtvdGlrYSwgemF0IGFkaWt0aWYgYXRhdSBvYmF0LW9iYXRhbiBsYWlubnlhLCBtaW51bSBhbGtvaG9sIHNlY2FyYSBiZXJsZWJpaGFuPyBKaWthIOKAnFlh4oCdLCBqZWxhc2thbiBqdW1sYWggc2VydGEgZnJla3VlbnNpIG1lbmdrb25zdW1zaW55YS4gU2VydGEgamVsYXNrYW4gamlrYSBhZGEgcml3YXlhdCBwZXJhd2F0YW4vbWVuZGFwYXQgdGVyYXBpIGthcmVuYSBoYWwgdGVyc2VidXQ\\/DQogICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgICAgIDxpbnB1dCBkYXRhLXBvcHVwLXR5cGU9J2hlYWx0aCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSW1tdW5lWWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEltbXVuZScgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSW1tdW5lWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtcG9wdXAtdHlwZT0naGVhbHRoJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRJbW11bmVObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRJbW11bmUnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRJbW11bmVObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmV2aWV3JyBkYXRhLXBvcHVwLXR5cGU9J2hlYWx0aCcgaWQ9J0J1dHRvblByZXZpZXdQcm9zcGVjdGl2ZUluc3VyZWRJbW11bmUnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSW1tdW5lJyB0eXBlPSdidXR0b24nIHZhbHVlPSdWaWV3IHJlY2VudCBpbnB1dCc+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXInPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENlbGxZZXMnIGlkPSdMYWJlbFByb3NwZWN0aXZlSW5zdXJlZENlbGwnPg0KICAgICAgICAgICAgICAgICAgR2FuZ2d1YW4gZnVuZ3NpIFBlcnR1bWJ1aGFuIFNlbCwgVHVtb3IsIEtpc3RhLCBLYW5rZXIsIEJlbmpvbGFuIHBhZGEgcGVybXVrYWFuIGt1bGl0IGF0YXUgcGVydHVtYnVoYW4gYWJub3JtYWwgbGFpbm55YT8NCiAgICAgICAgICAgICAgICA8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIEl0ZW0nPg0KICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENlbGxZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2VsbCcgb25jaGFuZ2U9InNob3dQb3BVcEZyb21SYWRpb0J1dHRvbih0aGlzLm5hbWUsICd0cnVlJywgJ1BvcFVwQ2VsbCcsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50LCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnQ2VsbCcsICdUdW1vciddKSIgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2VsbFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRDZWxsTm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2VsbCcgb25jaGFuZ2U9InNob3dQb3BVcEZyb21SYWRpb0J1dHRvbih0aGlzLm5hbWUsICd0cnVlJywgJ1BvcFVwQ2VsbCcsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50LCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnQ2VsbCcsICdUdW1vciddKSIgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENlbGxObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmV2aWV3JyBpZD0nQnV0dG9uUHJldmlld1Byb3NwZWN0aXZlSW5zdXJlZENlbGwnIG9uY2xpY2s9InNob3dQb3BVcEZyb21CdXR0b24oJ1BvcFVwQ2VsbCcsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0NlbGwnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdWaWV3IHJlY2VudCBpbnB1dCc+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXInPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE90aGVySWxsbmVzc1llcycgaWQ9J0xhYmVsUHJvc3BlY3RpdmVJbnN1cmVkT3RoZXJJbGxuZXNzJz4NCiAgICAgICAgICAgICAgICAgIEdhbmdndWFuIEtlc2VoYXRhbiBsYWlubnlhIHlhbmcgdGlkYWsvYmVsdW0gZGlueWF0YWthbiBkaWF0YXMgdGVybWFzdWsgbmFtdW4gdGlkYWsgdGVyYmF0YXMgcGFkYSBrZWxhaW5hbiBiZW50dWsgdHVidWgsIGtlbGFpbmFuL2NhY2F0IGZpc2lrLCBrZWxhaW5hbi9jYWNhdCBiYXdhYW4gZGFuIGxhaW5ueWE\/DQogICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgICAgIDxpbnB1dCBkYXRhLXBvcHVwLXR5cGU9J2hlYWx0aCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkT3RoZXJJbGxuZXNzWWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE90aGVySWxsbmVzcycgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkT3RoZXJJbGxuZXNzWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtcG9wdXAtdHlwZT0naGVhbHRoJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRPdGhlcklsbG5lc3NObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRPdGhlcklsbG5lc3MnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRPdGhlcklsbG5lc3NObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmV2aWV3JyBkYXRhLXBvcHVwLXR5cGU9J2hlYWx0aCcgaWQ9J0J1dHRvblByZXZpZXdQcm9zcGVjdGl2ZUluc3VyZWRPdGhlcklsbG5lc3MnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkT3RoZXJJbGxuZXNzJyB0eXBlPSdidXR0b24nIHZhbHVlPSdWaWV3IHJlY2VudCBpbnB1dCc+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvbGk+DQogICAgICAgIDxocj4NCiAgICAgICAgPGxpPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0l0ZW0nIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTUEFKUHJvcG9zYWxZZXMnIGlkPSdMYWJlbFByb3NwZWN0aXZlSW5zdXJlZFNQQUpQcm9wb3NhbCc+DQogICAgICAgICAgICAgIEFwYWthaCBBbmRhIHRlbGFoIG1lbWlsaWtpIGF0YXUgc2VkYW5nIG1lbmdhanVrYW4gcGVydGFuZ2d1bmdhbiBBc3VyYW5zaSBKaXdhLCBrZWNlbGFrYWFuLCBrZXNlaGF0YW4sIHBlbXVsaWhhbiBwb2xpcz8gU2VydGEgYXBha2FoIHBlbmdhanVhbiBBbmRhIHBlcm5haCBkaXRvbGFrLyBkaXRhbmdndWhrYW4vZGlrZW5ha2FuIGVrc3RyYSBQcmVtaSBkaXViYWggZGFsYW0gYmVudHVrIGFwYXB1biBvbGVoIHBlcnVzYWhhYW4gQXN1cmFuc2kgSml3YT8NCiAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGRhdGEtY3VzdG9tLXJhZGlvYnV0dG9uPSdpbnB1dCcgZGF0YS1wb3B1cC10eXBlPSdzcGFqcHJvcG9zYWwnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFNQQUpQcm9wb3NhbFllcycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTUEFKUHJvcG9zYWwnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkU1BBSlByb3Bvc2FsWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgIDxpbnB1dCBkYXRhLWN1c3RvbS1yYWRpb2J1dHRvbj0naW5wdXQnIGRhdGEtcG9wdXAtdHlwZT0nc3BhanByb3Bvc2FsJyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTUEFKUHJvcG9zYWxObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRTUEFKUHJvcG9zYWwnIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFNQQUpQcm9wb3NhbE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25BZGRTUEFKUHJvcG9zYWwnIHR5cGU9J2J1dHRvbicgdmFsdWU9J0FkZCc+DQogICAgICAgICAgPGRpdiBpZD0nU1BBSlByb3Bvc2FsTGlzdCc+PC9kaXY+DQogICAgICAgIDwvbGk+DQogICAgICAgIDxocj4NCiAgICAgICAgPGxpPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0l0ZW0nIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRDbGFpbVllcycgaWQ9J0xhYmVsUHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW0nPg0KICAgICAgICAgICAgICBBcGFrYWggQW5kYSBwZXJuYWggbWVuZ2FqdWthbiBrbGFpbSBrZSBwZXJ1c2FoYWFuIEFzdXJhbnNpIEppd2E\/IEppa2Eg4oCcWWEsIG1vaG9uIGplbGFza2FuIGFsYXNhbm55YS4NCiAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGRhdGEtcG9wdXAtdHlwZT0nZ2VuZXJhbCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW1ZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW0nIHJlcXVpcmVkPSd0cnVlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW1ZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGRhdGEtcG9wdXAtdHlwZT0nZ2VuZXJhbCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW1ObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRDbGFpbScgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW1Obyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmV2aWV3JyBkYXRhLXBvcHVwLXR5cGU9J2dlbmVyYWwnIGlkPSdCdXR0b25QcmV2aWV3UHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW0nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2xhaW0nIHR5cGU9J2J1dHRvbicgdmFsdWU9J1ZpZXcgcmVjZW50IGlucHV0Jz4NCiAgICAgICAgPC9saT4NCiAgICAgICAgPGhyPg0KICAgICAgICA8bGk+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWdub3N0aWNZZXMnIGlkPSdMYWJlbFByb3NwZWN0aXZlSW5zdXJlZERpYWdub3N0aWMnPg0KICAgICAgICAgICAgICBBcGFrYWggQW5kYSBwZXJuYWggbWVuZGFwYXRrYW4gYXRhdSBiZXJtYWtzdWQgbWVuamFsYW5pIHBlbWVyaWtzYWFuIGtlc2VoYXRhbiBkaWFnbm9zdGlrLCBzZXBlcnRpIFNpbmFyLVgsIFVTRywgQ1Qtc2NhbiwgTVJJLCBFS0csIFRyZWFkbWlsbCwgcGVtZXJpa3NhYW4gZGFyYWgsIHBlbWVyaWtzYWFuIHVyaW4sIGRhbiBsYWluLWxhaW4\/DQogICAgICAgICAgICA8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICAgIDxpbnB1dCBkYXRhLXBvcHVwLXR5cGU9J2dlbmVyYWwnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWdub3N0aWNZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhZ25vc3RpYycgcmVxdWlyZWQ9J3RydWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFnbm9zdGljWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgIDxpbnB1dCBkYXRhLXBvcHVwLXR5cGU9J2dlbmVyYWwnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWdub3N0aWNObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFnbm9zdGljJyByZXF1aXJlZD0ndHJ1ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFnbm9zdGljTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJldmlldycgZGF0YS1wb3B1cC10eXBlPSdnZW5lcmFsJyBpZD0nQnV0dG9uUHJldmlld1Byb3NwZWN0aXZlSW5zdXJlZERpYWdub3N0aWMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhZ25vc3RpYycgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nVmlldyByZWNlbnQgaW5wdXQnPg0KICAgICAgICA8L2xpPg0KICAgICAgICA8aHI+DQogICAgICAgIDxsaT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBmb3I9J1ByZWduYW5jeVllcyc+S2h1c3VzIENhbG9uIFRlcnRhbmdndW5nIGFuYWstYW5hayAodXNpYSDiiaQgNSAobGltYSkgdGFodW4pOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGZvcj0nUHJlZ25hbmN5WWVzJz5XYWt0dSBsYWhpcjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFByZWduYW5jeU5vcm1hbCcgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFuY3knIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUHJlZ25hbmN5Tm9ybWFsJz5DdWt1cCBCdWxhbjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFByZWduYW5jeVByZW1hdHVyJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFByZWduYW5jeScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUHJlZ25hbmN5UHJlbWF0dXInPlByZW1hdHVyPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgZm9yPSdCYWJ5SGVpZ2h0Jz5QYW5qYW5nIGRhbiBiZXJhdCBzYWF0IGxhaGlyPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFieUhlaWdodCcgc3R5bGU9J21hcmdpbi1yaWdodDogMTBweDsnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhYnlIZWlnaHQnPkNtPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhYnlXZWlnaHQnIHN0eWxlPSdtYXJnaW4tbGVmdDogMTBweDsgbWFyZ2luLXJpZ2h0OiAxMHB4OycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFieVdlaWdodCc+S2c8L2xhYmVsPg0KICAgICAgICA8L2xpPg0KICAgICAgICA8aHI+DQogICAgICAgIDxsaSBjbGFzcz0nQ29udGFpbmVyRmVtYWxlUXVlc3Rpb24nPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdIZWFsdGhEaXNzb3JkZXJZZXMnPg0KICAgICAgICAgICAgUGVydGFueWFhbiBraHVzdXMgdW50dWsgd2FuaXRhOg0KICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXInPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSXRlbScgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFByZWduYW50WWVzJyBpZD0nTGFiZWxQcm9zcGVjdGl2ZUluc3VyZWRQcmVnbmFudCc+DQogICAgICAgICAgICAgICAgICBBcGFrYWggQW5kYSBzZWRhbmcgaGFtaWw\\\\\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IS1NlbGZPck5pZ2h0WWVzJyBuYW1lPSdSYWRpb0J1dHRvbkhLU2VsZk9yTmlnaHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSEtTZWxmT3JOaWdodFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IS1NlbGZPck5pZ2h0Tm8nIG5hbWU9J1JhZGlvQnV0dG9uSEtTZWxmT3JOaWdodCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSEtTZWxmT3JOaWdodE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SEtTZWxmT3JOaWdodERlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjEwLiBBcGFrYWggQW5kYSBtZW5kYWtpIGhhbnlhIHVudHVrIHNla2VkYXIgb2xhaCByYWdhIHNhamEgYXRhdSBzZWJhZ2FpIGJhZ2lhbiBkYXJpIHBla2VyamFhbj88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdQb3NpdGlvbmVyTGVmdCc+T2xhaCByYWdhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbkhLU3BvcnRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uSEtTcG9ydCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25IS1Nwb3J0WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uSEtTcG9ydE5vJyBuYW1lPSdSYWRpb0J1dHRvbkhLU3BvcnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkhLU3BvcnRObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdQb3NpdGlvbmVyTGVmdCc+UGVrZXJqYWFuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbkhLSm9iWWVzJyBuYW1lPSdSYWRpb0J1dHRvbkhLSm9iJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkhLSm9iWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uSEtKb2JObycgbmFtZT0nUmFkaW9CdXR0b25IS0pvYicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uSEtKb2JObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0Jz5KaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRIS0pvYicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPjExLiBQZXJuYWhrYWggQW5kYSBtZW5nYWxhbWkga2VjZWxha2FhbiBzZXdha3R1IG1lbmRha2kgZ3VudW5nL3BhbmphdCB0ZWJpbmc\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IS0FjY2lkZW50WWVzJyBuYW1lPSdSYWRpb0J1dHRvbkhLQWNjaWRlbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSEtBY2NpZGVudFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IS0FjY2lkZW50Tm8nIG5hbWU9J1JhZGlvQnV0dG9uSEtBY2NpZGVudCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSEtBY2NpZGVudE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SEtBY2NpZGVudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz4xMi4gTW9ob24gQW5kYSBtZW1iZXJpa2FuIGluZm9ybWFzaSB0YW1iYWhhbiBsYWluIHlhbmcgbWVudXJ1dCBBbmRhIHBlbnRpbmcgbXVuZ2tpbiBkYXBhdCBtZW1iYW50dSBwcm9zZXMgcGVuZ2FqdWFuIGFzdXJhbnNpIGluaSBkZW5nYW4gbWVsZW5na2FwaSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEhLQWRkaXRpb25hbEluZm9ybWF0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICA8aDI+UEVSTllBVEFBTiBEQU4gS1VBU0E8L2gyPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbnlhdGFrYW4gZGVuZ2FuIHNlYmVuYXJueWEgYmFod2Egc2VtdWEgcGVybnlhdGFhbiBkYW4gamF3YWJhbiBkaSBhdGFzIGFkYWxhaCBsZW5na2FwIGRhbiBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YS48L2xpPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci8gUnVtYWggU2FraXQvIEtsaW5pay8gUHVza2VzbWFzLyBsYWJvcmF0b3JpdW0sIHBlcnVzYWhhYW4gYXN1cmFuc2kgYXRhdSBwZXJ1c2FoYWFuIHJlYXN1cmFuc2ksIGJhZGFuLCBpbnN0YW5zaS8gbGVtYmFnYSBhdGF1IHBpaGFrIGxhaW4geWFuZyBtZW1wdW55YWkgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLCB1bnR1ayBtZW5ndW5na2Fwa2FuIGtlcGFkYSBQZW5hbmdndW5nIHNlbXVhIGtldGVyYW5nYW4gdGVudGFuZyBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU3VyYXQgUGVuZ2FqdWFuIEFzdXJhbnNpIEppd2EgZGFuIGFrYW4gbWVuZ2lrYXQgc2F5YSwgYWhsaSB3YXJpcywgZGFuIGtlbHVhcmdhIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IHNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggc2F5YSBtZW5pbmdnYWwuIFNhbGluYW4vIGZvdG9rb3BpIGRhcmkgc3VyYXQga3Vhc2EgaW5pIHNhbWEgc2FoIGJlcmxha3VueWEgc2VwZXJ0aSBkb2t1bWVuIGFzbGkuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBSYWNpbmcnPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBSYWNpbmcnPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwQ2FuY2VsKCdQb3BVcFJhY2luZycsICdQb3BVcEFjdGl2aXR5JykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBSYWNpbmcnLCAnUG9wVXBBY3Rpdml0eScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ1JhY2luZycsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0RvbmUnPg0KICAgICAgICAgIDxoMj5LdWVzaW9uZXIgT2xhaHJhZ2EgTW90b3IgLyBTZXBlZGEgTW90b3I8L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDQnPk9MQUhSQUdBIE1PVE9SIC8gU0VQRURBIE1PVE9SPC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4xLiBBcGFrYWggamVuaXMga2VnaWF0YW4gb2xhaCByYWdhIG1vdG9yIHlhbmcgQW5kYSBsYWt1a2FuPzwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPk1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDwvYnI+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNBY3Rpdml0eScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjIuIEFwYWthaCBqZW5pcyBrZW5kYXJhYW4gYmVybW90b3IgeWFuZyBBZGEga2VuZGFyYWk\/PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pIChNb2RlbCwgdGFodW4gcGVtYnVhdGFuLCB1a3VyYW4gbWVzaW4sIGRhbiBrYXRlZ29yaSBzZWNhcmEgdGVycGVyaW5jaSkuPC9sYWJlbD4NCiAgICAgICAgICA8L2JyPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJDVmVoaWNsZU1vZGVsJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+My4gU2VidXRrYW4gdHVqdWFuIGtlZ2lhdGFuIG9sYWggcmFnYSBtb3Rvci8gc2VwZWRhIG1vdG9yIHlhbmcgQW5kYSBsYWt1a2FuOiA\/PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VFbnRlcnRhaW5tZW50JyBuYW1lPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2VudGVydGFpbm1lbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlRW50ZXJ0YWlubWVudCc+SGlidXJhbjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlQ29tcGV0aXRpb24nIG5hbWU9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nY29tcGV0aXRpb24nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlQ29tcGV0aXRpb24nPlBlcmxvbWJhYW48L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25SQ0FjdGl2aXR5UHVycG9zZVNwb25zb3InIG5hbWU9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc3BvbnNvcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VTcG9uc29yJz5TcG9uc29yPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VBbWF0ZXVyJyBuYW1lPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2FtYXRldXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlQW1hdGV1cic+QW1hdGlyPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VQcm9mZXNzaW9uYWwnIG5hbWU9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ncHJvZmVzc2lvbmFsJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25SQ0FjdGl2aXR5UHVycG9zZVByb2Zlc3Npb25hbCc+UHJvZmVzaW9uYWw8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2VPdGhlcnMnIG5hbWU9J1JhZGlvQnV0dG9uUkNBY3Rpdml0eVB1cnBvc2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblJDQWN0aXZpdHlQdXJwb3NlT3RoZXJzJz5MYWlubnlhLCBzZWJ1dGthbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UkNBY3Rpdml0eVB1cnBvc2VPdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz40LiBCZXJhcGEgbGFtYSBBbmRhIGFrdGlmIGRhbGFtIG9sYWggcmFnYSBpbmk\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNTdGlsbEFjdGl2ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjUuIERpIG1hbmEgQW5kYSBtZWxha3VrYW4gcGVybG9tYmFhbj8gKFNlYnV0a2FuIG5hbWEgc2VtdWEgYWNhcmEgeWFuZyBkaXNlbGVuZ2dhcmFrYW4pPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNQbGFjZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+Ni4gTW9ob24gc2VidXRrYW4gTGlzZW5zaS8gU2VydGlmaWthdCB5YW5nIEFuZGEgbWlsaWtpPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIENlbnRlciBNYXJnaW4nPkxpc2Vuc2kvIFNlcnRpZmlrYXQ8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+VGFuZ2dhbCBQZXJvbGVoYW48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+TWFzYSBCZXJsYWt1PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGVPYnRhaW4xJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGUyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlRXh0ZW50aW9uMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlT2J0YWluMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGVFeHRlbnRpb24zJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGVPYnRhaW40JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNMaWNlbnNlQ2VydGlmaWNhdGU1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRSQ0xpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFJDTGljZW5zZUNlcnRpZmljYXRlRXh0ZW50aW9uNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+Ny4gQXBha2FoIEFuZGEgYmVycGFydGlzaXBhc2kgYXRhdSBiZXJuaWF0IHVudHVrIGJlcnBhcnRpc2lwYXNpIGRhbGFtIHNldGlhcCBrb21wZXRpc2k\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTWVkaXVtIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNQYXJ0aWNpcGF0aW5nWWVzJyBuYW1lPSdSYWRpb0J1dHRvblJDUGFydGljaXBhdGluZycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25SQ1BhcnRpY2lwYXRpbmdZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNQYXJ0aWNpcGF0aW5nTm8nIG5hbWU9J1JhZGlvQnV0dG9uUkNQYXJ0aWNpcGF0aW5nJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25SQ1BhcnRpY2lwYXRpbmdObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJDUGFydGljaXBhdGluZ0xvY2F0aW9uRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+OC4gQXBha2FoIEFuZGEgYW5nZ290YSBzdWF0dSBrbHViIGF0YXUgYXNvc2lhc2kgYmFsYXA\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTWVkaXVtIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNDbHViTWVtYmVyWWVzJyBuYW1lPSdSYWRpb0J1dHRvblJDQ2x1Yk1lbWJlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25SQ0NsdWJNZW1iZXJZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUkNDbHViTWVtYmVyTm8nIG5hbWU9J1JhZGlvQnV0dG9uUkNDbHViTWVtYmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25SQ0NsdWJNZW1iZXJObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJDQ2x1Yk1lbWJlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPjkuIFBlcm5haGthaCBBbmRhIG1lbmdhbGFtaSBrZWNlbGFrYWFuIGF0YXUgcGVsYW5nZ2FyYW4gcGVuZ3VuYWFuL3BlbmNhYnV0YW4gbGlzZW5zaT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+SmlrYSAiWWEiLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25SQ0FjY2lkZW50WWVzJyBuYW1lPSdSYWRpb0J1dHRvblJDQWNjaWRlbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUkNBY2NpZGVudFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25SQ0FjY2lkZW50Tm8nIG5hbWU9J1JhZGlvQnV0dG9uUkNBY2NpZGVudCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUkNBY2NpZGVudE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UkNBY2NpZGVudERlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz4xMC4gTW9ob24gQW5kYSBtZW1iZXJpa2FuIGluZm9ybWFzaSB0YW1iYWhhbiBsYWluIHlhbmcgbWVudXJ1dCBBbmRhIHBlbnRpbmcgbXVuZ2tpbiBkYXBhdCBtZW1iYW50dSBwcm9zZXMgcGVuZ2FqdWFuIGFzdXJhbnNpIGluaSBkZW5nYW4gbWVsZW5na2FwaSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSQ0FkZGl0aW9uYWxJbmZvJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICA8aDI+UEVSTllBVEFBTiBEQU4gS1VBU0E8L2gyPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbnlhdGFrYW4gZGVuZ2FuIHNlYmVuYXJueWEgYmFod2Egc2VtdWEgcGVybnlhdGFhbiBkYW4gamF3YWJhbiBkaSBhdGFzIGFkYWxhaCBsZW5na2FwIGRhbiBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YS48L2xpPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci8gUnVtYWggU2FraXQvIEtsaW5pay8gUHVza2VzbWFzLyBsYWJvcmF0b3JpdW0sIHBlcnVzYWhhYW4gYXN1cmFuc2kgYXRhdSBwZXJ1c2FoYWFuIHJlYXN1cmFuc2ksIGJhZGFuLCBpbnN0YW5zaS8gbGVtYmFnYSBhdGF1IHBpaGFrIGxhaW4geWFuZyBtZW1wdW55YWkgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLCB1bnR1ayBtZW5ndW5na2Fwa2FuIGtlcGFkYSBQZW5hbmdndW5nIHNlbXVhIGtldGVyYW5nYW4gdGVudGFuZyBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU3VyYXQgUGVuZ2FqdWFuIEFzdXJhbnNpIEppd2EgZGFuIGFrYW4gbWVuZ2lrYXQgc2F5YSwgYWhsaSB3YXJpcywgZGFuIGtlbHVhcmdhIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IHNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggc2F5YSBtZW5pbmdnYWwuU2FsaW5hbi8gZm90b2tvcGkgZGFyaSBzdXJhdCBrdWFzYSBpbmkgc2FtYSBzYWggYmVybGFrdW55YSBzZXBlcnRpIGRva3VtZW4gYXNsaS48L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9mb3JtPg0KICAgIDwvc2VjdGlvbj4NCiAgICA8c2VjdGlvbiBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcFBhcmFnbGlkaW5nJz4NCiAgICAgIDxmb3JtIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwUGFyYWdsaWRpbmcnPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwQ2FuY2VsKCdQb3BVcFBhcmFnbGlkaW5nJywgJ1BvcFVwQWN0aXZpdHknKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2FuY2VsJz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lclJpZ2h0JyBpZD0nQnV0dG9uRG9uZScgb25jbGljaz0iYnV0dG9uU3ViUG9wVXBEb25lKCdQb3BVcFBhcmFnbGlkaW5nJywgJ1BvcFVwQWN0aXZpdHknLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdQYXJhZ2xpZGluZycsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0RvbmUnPg0KICAgICAgICAgIDxoMj5LdWVzaW9uZXIgUGFyYWxheWFuZzwvaDI+DQogICAgICAgIDwvaGVhZGVyPg0KICAgICAgICA8IS0tIEZJRUxEU0VUIC0tPg0KICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNdWx0aSBTaW5nbGUgNCc+S1VFU0lPTkVSIFRFUkJBTkcgTEFZQU5HPC9zcGFuPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24nPg0KICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uR2xpZGluZ0NoYW5nZUdsaWRpbmcnIG5hbWU9J1JhZGlvQnV0dG9uR2xpZGluZ0NoYW5nZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdHbGlkaW5nJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkdsaWRpbmdDaGFuZ2VHbGlkaW5nJz5HbGlkaW5nPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkdsaWRpbmdDaGFuZ2VIYW5nJyBuYW1lPSdSYWRpb0J1dHRvbkdsaWRpbmdDaGFuZ2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nSGFuZyBHbGlkaW5nJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkdsaWRpbmdDaGFuZ2VIYW5nJz5IYW5nIEdsaWRpbmc8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+MS4gU2VidXRrYW4gamVuaXMgdGVyYmFuZyBsYXlhbmcgeWFuZyBBbmRhIGd1bmFrYW4uPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPk1vaG9uIHNlYnV0a2FuIGFwYWthaCBtZW5nZ3VuYWthbiBtZXNpbiBhdGF1IHRpZGFrLCBidWF0YW4gc2VuZGlyaSBhdGF1IHBhYnJpay48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBHTW9kZWxVc2VkJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4yLiBNb2hvbiBzZWJ1dGthbiBzZWNhcmEgcmluY2kgbGlzZW5zaSBkYW4vYXRhdSBzZXJ0aWZpa2F0IHBlbmVyYmFuZ2FuIHlhbmcgQW5kYSBtaWxpa2kuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+SWppbi9TZXJ0aWZpa2F0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlciBNYXJnaW4nPlRhbmdnYWwgRGlwZXJvbGVoPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlciBNYXJnaW4nPk1hc2EgQmVybGFrdTwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBHQ2VydGlmaWNhdGVMaWNlbnNlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0UEdDZXJ0aWZpY2F0ZURhdGVPYnRhaW4xJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQR0NlcnRpZmljYXRlRGF0ZUV4cGlyZWQxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0UEdDZXJ0aWZpY2F0ZUxpY2Vuc2UyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRQR0NlcnRpZmljYXRlRGF0ZU9idGFpbjInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBHQ2VydGlmaWNhdGVEYXRlRXhwaXJlZDInIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRQR0NlcnRpZmljYXRlTGljZW5zZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dFBHQ2VydGlmaWNhdGVEYXRlT2J0YWluMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UEdDZXJ0aWZpY2F0ZURhdGVFeHBpcmVkMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBHQ2VydGlmaWNhdGVMaWNlbnNlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0UEdDZXJ0aWZpY2F0ZURhdGVPYnRhaW40JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQR0NlcnRpZmljYXRlRGF0ZUV4cGlyZWQ0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0UEdDZXJ0aWZpY2F0ZUxpY2Vuc2U1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRQR0NlcnRpZmljYXRlRGF0ZU9idGFpbjUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBHQ2VydGlmaWNhdGVEYXRlRXhwaXJlZDUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdXcmFwJz4zLiBBcGFrYWggQW5kYSBiZXJnYWJ1bmcgZGVuZ2FuIGtsdWIgYXRhdSBhc29zaWFzaSB0ZXJiYW5nIGxheWFuZz88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE1lZGl1bSBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBHQ2x1Yk1lbWJlck5vJyBuYW1lPSdSYWRpb0J1dHRvblBHQ2x1Yk1lbWJlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBHQ2x1Yk1lbWJlck5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25QR0NsdWJNZW1iZXJZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUEdDbHViTWVtYmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25QR0NsdWJNZW1iZXJZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBHQ2x1Yk1lbWJlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjQuIFNlYmVyYXBhIHNlcmluZyBBbmRhIG1lbGFrdWthbiB0ZXJiYW5nIGxheWFuZyBkYW4gYmVyYXBhIGphbSB0ZXJiYW5nIEFuZGE\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBDZW50ZXIgTWFyZ2luJz48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+VG90YWw8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+MSBUYWh1biBUZXJha2hpcjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXIgTWFyZ2luJz4xIFRhaHVuIFlhbmcgQWthbiBEYXRhbmcgKHBlcmtpcmFhbik8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIENlbnRlciBNYXJnaW4nPkp1bWxhaCBQZW5lcmJhbmdhbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UEdUb3RhbEFtb3VudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UEdUb3RhbExhc3QxWWVhckFtb3VudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UEdUb3RhbE5leHQxWWVhckFtb3VudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+SnVtbGFoIEphbSBUZXJiYW5nPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQR1RvdGFsSG91cicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UEdUb3RhbExhc3QxWWVhckhvdXInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBHVG90YWxOZXh0MVllYXJIb3VyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz41LiBTZWJ1dGthbiB0dWp1YW4gdGVyYmFuZyBsYXlhbmcgQW5kYS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBHRGVzdGluYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdXcmFwJz42LiBBZGFrYWggdHVqdWFuIGxhaW4gZGFyaSBBbmRhIG1lbGFrdWthbiB0ZXJiYW5nIGxheWFuZz8gKE1pc2FsbnlhIGtlZ2lhdGFuIHBlcnRhbmlhbiBhdGF1IGtvbWVyc2lsIGRhbiBsYWluLWxhaW4pPC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZVllcycgbmFtZT0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZU5vJyBuYW1lPSdSYWRpb0J1dHRvblBHT3RoZXJQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25QR090aGVyUHVycG9zZU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUG9zaXRpb25lckxlZnQnPihKaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtIE1hcmdpbicgaWQ9J1RleHRQR090aGVyUHVycG9zZURlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdXcmFwJz43LiBBcGFrYWggQW5kYSBiZXJwYXJ0aXNpcGFzaSBhdGF1IGFrYW4gYmVycGFydGlzaXBhc2kgZGFsYW0gYWVyb2JhdGljLCBwZXJsb21iYWFuLCBwYW1lcmFuIGF0YXUgdGVzIHRlcmJhbmc\\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbk9uU2hvcmUnIG5hbWU9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvbnNob3JlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQgU2Vjb25kSW5kZW50JyBmb3I9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbk9uU2hvcmUnPlBlcm11a2FhbiB0YW5haC9kYXJhdDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbk9mU2hvcmUnIG5hbWU9J1JhZGlvQnV0dG9uT0xMb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvZnNob3JlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25PTExvY2F0aW9uT2ZTaG9yZSc+TGVwYXMgcGFudGFpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0gRmlyc3RJbmRlbnQnPmIuIEJpbGEgZGkgZGFyYXQgYXBha2FoIGRpIHBlcm11a2FhbiB0YW5haCBhdGF1IGRpIGJhd2FoIHRhbmFoPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbk9MTG9jYXRpb25PblNob3JlWWVzR3JvdW5kJyBuYW1lPSdSYWRpb0J1dHRvbk9MTG9jYXRpb25PblNob3JlWWVzJyB0eXBlPSdyYWRpbycgdmFsdWU9J29uc2hvcmUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCBTZWNvbmRJbmRlbnQnIGZvcj0nUmFkaW9CdXR0b25PTExvY2F0aW9uT25TaG9yZVllc0dyb3VuZCc+UGVybXVrYWFuIHRhbmFoL2RhcmF0PC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvciBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25PTExvY2F0aW9uT25TaG9yZVllc1VuZGVyZ3JvdW5kJyBuYW1lPSdSYWRpb0J1dHRvbk9MTG9jYXRpb25PblNob3JlWWVzJyB0eXBlPSdyYWRpbycgdmFsdWU9J29mc2hvcmUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbk9MTG9jYXRpb25PblNob3JlWWVzVW5kZXJncm91bmQnPkJhd2FoIHRhbmFoLCBzZWJ1dGthbiBrZWRhbGFtYW5ueWE6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRPTExvY2F0aW9uT25TaG9yZVVuZGVyZ3JvdW5kRGVwdGgnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPm1ldGVyPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQgRmlyc3RJbmRlbnQnPmMuIEFwYWthaCBBbmRhIGp1Z2EgYmVydHVnYXMgZGkgbGVwYXMgcGFudGFpIGRhbi9hdGF1IGJhd2FoIHRhbmFoPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25EdXR5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uRHV0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvbkR1dHlObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uRHV0eVllcycgbmFtZT0nUmFkaW9CdXR0b25EdXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25EdXR5WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4oQmVyYXBhIGZyZWt1ZW5zaW55YSBkYWxhbSAxIChzYXR1KSB0YWh1biBiZXJhZGEgZGkgbG9rYXNpIHRlcnNlYnV0IGRhbiBiZXJhcGEgbGFtYSk\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RHV0eURlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+ZC4gQXBha2FoIGRhbGFtIGJla2VyamEgQW5kYSBtZW5nZ3VuYWthbiBiYWhhbiBwZWxlZGFrPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Vc2luZ0V4cGxvc2l2ZVllcycgbmFtZT0nUmFkaW9CdXR0b25Vc2luZ0V4cGxvc2l2ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Vc2luZ0V4cGxvc2l2ZVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Vc2luZ0V4cGxvc2l2ZU5vJyBuYW1lPSdSYWRpb0J1dHRvblVzaW5nRXhwbG9zaXZlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Vc2luZ0V4cGxvc2l2ZU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz5lLiBBcGFrYWggQW5kYSBtZWxha3VrYW4gdHVnYXMgcGVueWVsYW1hbj88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uRGl2aW5nRHV0eVllcycgbmFtZT0nUmFkaW9CdXR0b25EaXZpbmdEdXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkRpdmluZ0R1dHlZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uRGl2aW5nRHV0eU5vJyBuYW1lPSdSYWRpb0J1dHRvbkRpdmluZ0R1dHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkRpdmluZ0R1dHlObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+Zi4gQXBha2FoIEFuZGEgYmVydHVnYXMgZGkga2V0aW5nZ2lhbiB0ZXJ0ZW50dT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25IZWlnaHRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uSGVpZ2h0JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCBTZWNvbmRJbmRlbnQnIGZvcj0nUmFkaW9CdXR0b25IZWlnaHRZZXMnPllhLCBiZXJhcGEgbWV0ZXIgZGkgYXRhcyBwZXJtdWthYW4gbGF1dDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dEhlaWdodERlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPm1ldGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvbkhlaWdodE5vJyBuYW1lPSdSYWRpb0J1dHRvbkhlaWdodCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0IFNlY29uZEluZGVudCcgZm9yPSdSYWRpb0J1dHRvbkhlaWdodE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+OC4gVHJhbnNwb3J0YXNpIGFwYSB5YW5nIEFuZGEgZ3VuYWthbiBtZW51anUgbG9rYXNpIGtlcmphPyBCZXJhcGEgbGFtYSB3YWt0dSB5YW5nIEFuZGEgcGVybHVrYW4gdW50dWsgbWVudWp1IGxva2FzaT8gKEppa2EgbWVuZ2d1bmFrYW4gaGVsaWtvcHRlciwgbW9ob24gZGlqZWxhc2thbiBqdW1sYWggamFtIHRlcmJhbmcgcGVyIHRhaHVuKSBkYW4gbWVuZ2lzaSBmb3JtdWxpciBrdWVzaW9uZXIgcGVuZXJiYW5nYW4uPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdBcmVhVHJhbnNwb3J0YXRpb24nIHR5cGU9J3RleHQnPjwvdGV4dGFyZWE+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbk9MQWNjaWRlbnQnIGlkPSdXcmFwJz45LiBBcGFrYWggQW5kYSBwZXJuYWggbWVuZ2FsYW1pIGtlY2VsYWthYW4ga2VyamEvZ2FuZ2d1YW4ga2VzZWhhdGFuIHNlaHVidW5nYW4gZGVuZ2FuIHBla2VyamFhbiBBbmRhPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTWVkaXVtIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uT0xBY2NpZGVudFllcycgbmFtZT0nUmFkaW9CdXR0b25PTEFjY2lkZW50JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk9MQWNjaWRlbnRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uT0xBY2NpZGVudE5vJyBuYW1lPSdSYWRpb0J1dHRvbk9MQWNjaWRlbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk9MQWNjaWRlbnRObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCc+SmlrYSDigJxZYeKAnSwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0T0xBY2NpZGVudERlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+MTAuIE1vaG9uIEFuZGEgbWVtYmVyaWthbiBpbmZvcm1hc2kgdGFtYmFoYW4gbGFpbiB5YW5nIG1lbnVydXQgQW5kYSBwZW50aW5nIG11bmdraW4gZGFwYXQgbWVtYmFudHUgcHJvc2VzIHBlbmdhanVhbiBhc3VyYW5zaSBpbmkgZGVuZ2FuIG1lbGVuZ2thcGkga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0T0xBZGRpdGlvbmFsSW5mbycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPGRpdiBjbGFzcz0nTm90ZSc+DQogICAgICAgICAgPGgyPlBFUk5ZQVRBQU4gREFOIEtVQVNBPC9oMj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW55YXRha2FuIGRlbmdhbiBzZWJlbmFybnlhIGJhaHdhIHNlbXVhIHBlcm55YXRhYW4gZGFuIGphd2FiYW4gZGkgYXRhcyBhZGFsYWggbGVuZ2thcCBkYW4gc2VzdWFpIGRlbmdhbiBrZWFkYWFuIHNlYmVuYXJueWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbWJlcmkga3Vhc2Ega2VwYWRhIHNldGlhcCBEb2t0ZXIvIFJ1bWFoIFNha2l0LyBLbGluaWsvIFB1c2tlc21hcy8gbGFib3JhdG9yaXVtLCBwZXJ1c2FoYWFuIGFzdXJhbnNpIGF0YXUgcGVydXNhaGFhbiByZWFzdXJhbnNpLCBiYWRhbiwgaW5zdGFuc2kvIGxlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gc2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIG1lcnVwYWthbiBoYWwgeWFuZyB0aWRhayB0ZXJwaXNhaGthbiBkYXJpIFN1cmF0IFBlbmdhanVhbiBBc3VyYW5zaSBKaXdhIGRhbiBha2FuIG1lbmdpa2F0IHNheWEsIGFobGkgd2FyaXMsIGRhbiBrZWx1YXJnYSBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIHRldGFwIGJlcmxha3UgcGFkYSB3YWt0dSBzYXlhIG1hc2loIGhpZHVwIG1hdXB1biBzZXN1ZGFoIHNheWEgbWVuaW5nZ2FsLiBTYWxpbmFuLyBmb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwVHJhdmVsaW5nJz4NCiAgICAgIDxmb3JtIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwVHJhdmVsaW5nJz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcENhbmNlbCgnUG9wVXBUcmF2ZWxpbmcnLCAnUG9wVXBBY3Rpdml0eScpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdDYW5jZWwnPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdCdXR0b25Eb25lJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcERvbmUoJ1BvcFVwVHJhdmVsaW5nJywgJ1BvcFVwQWN0aXZpdHknLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdUcmF2ZWxpbmcnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S3Vlc2lvbmVyIFVudHVrIFBlcmphbGFuYW4gS2UgTHVhciBOZWdlcmkvVGluZ2dhbCBEaSBMdWFyIE5lZ2VyaTwvaDI+DQogICAgICAgIDwvaGVhZGVyPg0KICAgICAgICA8IS0tIEZJRUxEU0VUIC0tPg0KICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNdWx0aSBTaW5nbGUgNCc+S1VFU0lPTkVSIFVOVFVLIFBFUkpBTEFOQU4gS0UgTFVBUiBORUdFUkkvVElOR0dBTCBESSBMVUFSIE5FR0VSSTwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4xLiBBcGFrYWggYWxhc2FuIHV0YW1hIHVudHVrIG1lbGFrdWthbiBwZXJqYWxhbmFuIGF0YXUgYmVydGVtcGF0IHRpbmdnYWwgZGkgbHVhciBuZWdlcmk\\\\/PC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25BbGNvaG9sJyBvbmNsaWNrPSJidXR0b25Qb3BVcE5hdmlnYXRpb24odGhpcy5pZCwgJ1BvcFVwSnVua2llJywgJ1BvcFVwQWxjb2hvbCcsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0FsY29ob2wnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdLdWVzaW9uZXIgQWxrb2hvbCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSc+c2lsYWhrYW4gbWVtYmVyaWthbiByaW5jaWFuIGxlYmloIGxhbmp1dDwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0nRnVsbCBNdWx0aScgaWQ9J0FyZWFBbWFuZG1lbnREZXRhaWwnPjwvdGV4dGFyZWE+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz4obWFrc2ltdW0gMjUwIGthcmFrdGVyKTwvbGFiZWw+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwQWxjb2hvbCc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcEFsY29ob2wnPg0KICAgICAgICA8aGVhZGVyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0J1dHRvbkNhbmNlbCcgb25jbGljaz0iYnV0dG9uU3ViUG9wVXBDYW5jZWwoJ1BvcFVwQWxjb2hvbCcsICdQb3BVcEp1bmtpZScpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdDYW5jZWwnPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdCdXR0b25Eb25lJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcERvbmUoJ1BvcFVwQWxjb2hvbCcsICdQb3BVcEp1bmtpZScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0FsY29ob2wnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S1VFU0lPTkVSIEFMS09IT0wgREFOIFBFTkdHVU5BQU4gT0JBVC1PQkFUQU48L2gyPg0KICAgICAgICAgIDwhLS0gTUFJTiAtLT4NCiAgICAgICAgPC9oZWFkZXI+DQogICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICA8Zm9ybSBpZD0nSGVhbHRoUXVlc3Rpb25uYWlyZU1haW4nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvbkFMQ29uc3VtZSc+MS4gQXBha2FoIHNhYXQgaW5pIEFuZGEgbWVuZ2tvbnN1bXNpIGFsa29ob2wvb2JhdC1vYmF0YW4\\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25BTENoZWNrVXBZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQUxDaGVja1VwJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQUxDaGVja1VwWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25BTENoZWNrVXBObycgbmFtZT0nUmFkaW9CdXR0b25BTENoZWNrVXAnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQUxDaGVja1VwTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBkYW4gYmVyYXBhIGxhbWEgdGVyamFkaW55YSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRBTENoZWNrVXAnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGhyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+OS4gTW9ob24gQW5kYSBtZW1iZXJpa2FuIGluZm9ybWFzaSB0YW1iYWhhbiBsYWluIHlhbmcgbWVudXJ1dCBBbmRhIHBlbnRpbmcgbXVuZ2tpbiBkYXBhdCBtZW1iYW50dSBwcm9zZXMgcGVuZ2FqdWFuIGFzdXJhbnNpIGluaSBkZW5nYW4gbWVsZW5na2FwaSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBQb3NpdGlvbmVyTGVmdCBNYXJnaW4nIGlkPSdUZXh0QUxBZGR0aW9uYWxJbmZvcm1hdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8aHI+DQogICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgICAgPGgyPlBFUk5ZQVRBQU4gREFOIEtVQVNBPC9oMj4NCiAgICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgICAgPGxpPlNheWEvS2FtaSBtZW55YXRha2FuIGJhaHdhIFNheWEvS2FtaSB0ZWxhaCBtZW1haGFtaSBkYW4gbWVueWV0dWp1aSB1bnR1ayBtZW5naXNpIHNlY2FyYSBsZW5na2FwIGRhbiBiZW5hciBzZW11YSBpbmZvcm1hc2kgZGFsYW0gS3Vlc2lvbmVyIEFsa29ob2wgZGFuIFBlbmdndW5hYW4gT2JhdC1vYmF0YW4gaW5pIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhIHNlYmFnYWkgYmFnaWFuIGRhcmkga29udHJhayAgIGFzdXJhbnNpIEppd2EvS2VzZWhhdGFuL0tlY2VsYWthYW4uPC9saT4NCiAgICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci9SdW1haCBTYWtpdC9LbGluaWsvUHVza2VzbWFzL0xhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpL2xlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gU2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBtZW5nZW5haSBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBTYXlhLjwvbGk+DQogICAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU1BBSiBkYW4gYWthbiBtZW5naWthdCBTYXlhLCBQZW5lcmltYSBNYW5mYWF0L0FobGkgV2FyaXMsIGRhbiBrZWx1YXJnYSBTYXlhIChqaWthIGFkYSkuPC9saT4NCiAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgU2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBTYXlhIG1lbmluZ2dhbCBkdW5pYS4gU2FsaW5hbi9mb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgICAgIDxsaT5BcGFiaWxhIGluZm9ybWFzaSB0ZXJzZWJ1dCB5YW5nIFNheWEvS2FtaSBiZXJpa2FuIHRpZGFrIGJlbmFyLCBtYWthIFBlbmFuZ2d1bmcgYmVyaGFrIG1lbWJhdGFsa2FuIFBvbGlzIFNheWEvS2FtaSBzZWphayBhd2FsLjwvbGk+DQogICAgICAgICAgICA8L29sPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgPC9mb3JtPg0KICAgIDwvc2VjdGlvbj4NCiAgICA8c2VjdGlvbiBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcFJlc3BpcmF0b3J5Jz4NCiAgICAgIDxmb3JtIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwUmVzcGlyYXRvcnknPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblBvcFVwQ2FuY2VsKCdQb3BVcFJlc3BpcmF0b3J5JykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblBvcFVwRG9uZSgnUG9wVXBSZXNwaXJhdG9yeScsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ1Jlc3BpcmF0b3J5JywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlLCBbJ1JhZGlvQnV0dG9uJyArIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ1Jlc3BpcmF0b3J5RGV0YWlsJyArICdEaXNydXB0aW9uJ10pIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+UGVydGFueWFhbiBLZXNlaGF0YW48L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDZjJz5HYW5nZ3VhbiBmdW5nc2kvc2lzdGVtIFBlcm5hcGFzYW4sIFBhcnUtcGFydSwgQXNtYSwgQnJvbmtpdGlzLCBUdWJlcmt1bG9zaXMsIEJhdHVrIERhcmFoIGRhbiBsYWlubnlhPzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24nPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5JyBpZD0nQnV0dG9uUmVzcGlyYXRvcnknIG9uY2xpY2s9ImJ1dHRvblBvcFVwTmF2aWdhdGlvbih0aGlzLmlkLCAnUG9wVXBSZXNwaXJhdG9yeScsICdQb3BVcFJlc3BpcmF0b3J5RGV0YWlsJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnUmVzcGlyYXRvcnlEZXRhaWwnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdLdWVzaW9uZXIgR2FuZ2d1YW4gUGVybmFwYXNhbic+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSc+c2lsYWhrYW4gbWVtYmVyaWthbiByaW5jaWFuIGxlYmloIGxhbmp1dDwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0nRnVsbCBNdWx0aScgaWQ9J0FyZWFBbWFuZG1lbnREZXRhaWwnPjwvdGV4dGFyZWE+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz4obWFrc2ltdW0gMjUwIGthcmFrdGVyKTwvbGFiZWw+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwUmVzcGlyYXRvcnlEZXRhaWwnPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBSZXNwaXJhdG9yeURldGFpbCc+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcENhbmNlbCgnUG9wVXBSZXNwaXJhdG9yeURldGFpbCcsICdQb3BVcFJlc3BpcmF0b3J5JykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBSZXNwaXJhdG9yeURldGFpbCcsICdQb3BVcFJlc3BpcmF0b3J5Jywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnUmVzcGlyYXRvcnlEZXRhaWwnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S1VFU0lPTkVSIEdBTkdHVUFOIFBFUk5BUEFTQU48L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBNQUlOIC0tPg0KICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNdWx0aSBTaW5nbGUgNmMnPkdhbmdndWFuIGZ1bmdzaS9zaXN0ZW0gUGVybmFwYXNhbiwgUGFydS1wYXJ1LCBBc21hLCBCcm9ua2l0aXMsIFR1YmVya3Vsb3NpcywgQmF0dWsgRGFyYWggZGFuIGxhaW5ueWE\/PC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjEuIEFwYWthaCBnYW5nZ3VhbiBwZXJuYXBhc2FuIHlhbmcgQW5kYSBkZXJpdGE\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uRGlzcnVwdGlvbkFzdGhtYScgbmFtZT0nUmFkaW9CdXR0b25EaXNydXB0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J2FzdGhtYSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uRGlzcnVwdGlvbkFzdGhtYSc+QXNtYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkRpc3J1cHRpb25Ccm9uY2hpdGlzJyBuYW1lPSdSYWRpb0J1dHRvbkRpc3J1cHRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nYnJvbmNoaXRpcyc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uRGlzcnVwdGlvbkJyb25jaGl0aXMnPkJyb25jaGl0aXM8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25EaXNydXB0aW9uVEJDJyBuYW1lPSdSYWRpb0J1dHRvbkRpc3J1cHRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndGJjJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25EaXNydXB0aW9uVEJDJz5UQkM8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25EaXNydXB0aW9uT3RoZXJzJyBuYW1lPSdSYWRpb0J1dHRvbkRpc3J1cHRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkRpc3J1cHRpb25PdGhlcnMnPkxhaW5ueWEsIHNlYnV0a2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RGlzcnVwdGlvbk90aGVyRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+Mi4gS2FwYW4gcGVydGFtYSBrYWxpIEFuZGEgbWVyYXNha2FuIGdlamFsYS1nZWphbGEgdGVyc2VidXQ\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUZpcnN0VGltZUFyaXNlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4zLiBhLiBCZXJhcGEga2FsaSBzZXJhbmdhbiBkYWxhbSAyIChkdWEpIHRhaHVuIHRlcmFraGlyPzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRMYXN0VHdvWWVhcnNBdHRhY2snIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0nPmthbGk8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+Yi4gS2FwYW4gc2VyYW5nYW4gdGVyYWtoaXI\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUxhc3RBdHRhY2snIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+NC4gQmVyYXBhIGthbGkgc2VyYW5nYW4tc2VyYW5nYW4gdGVyc2VidXQgbWVueWViYWJrYW4gQW5kYTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz4oTW9ob24gbWVsYW1waXJrYW4gcmVzdW1lIHBlcmF3YXRhbiB5YW5nIEFuZGEgbWlsaWtpKTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25BdHRhY2tDYXVzZUFic2VudCcgbmFtZT0nUmFkaW9CdXR0b25BdHRhY2tDYXVzZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdhYnNlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkF0dGFja0NhdXNlQWJzZW50Jz5UaWRhayBtYXN1ayBrZXJqYSBzZWxhbWE6PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBQb3NpdGlvbmVyUmlnaHQnPlRhaHVuPC9zcGFuPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J051bWJlckF0dGFja0NhdXNlQWJzZW50WWVhcicgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJSaWdodCc+QnVsYW48L3NwYW4+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBpZD0nTnVtYmVyQXR0YWNrQ2F1c2VBYnNlbnRNb250aCcgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJSaWdodCc+TWluZ2d1PC9zcGFuPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J051bWJlckF0dGFja0NhdXNlQWJzZW50V2VlaycgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFBvc2l0aW9uZXJSaWdodCc+SGFyaTwvc3Bhbj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdOdW1iZXJBdHRhY2tDYXVzZUFic2VudERheScgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkF0dGFja0NhdXNlSG9zcGl0YWwnIG5hbWU9J1JhZGlvQnV0dG9uQXR0YWNrQ2F1c2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0naG9zcGl0YWwnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkF0dGFja0NhdXNlSG9zcGl0YWwnPkRpcmF3YXQgZGkgUnVtYWggU2FraXQ8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBJdGVtJz5UYW5nZ2FsIHBlcmF3YXRhbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUF0dGFja0NhdXNlSG9zcGl0YWwnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TGFtYSBQZXJhd2F0YW48L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nRnVsbCBTaW5nbGUnIHN0eWxlPSd3aWR0aDogMTAwJTsnPg0KICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRBdHRhY2tDYXVzZUhvc3BpdGFsRHVyYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdTZWxlY3RBdHRhY2tDYXVzZUhvc3BpdGFsQW1vdW50UGVyaW9kJz48L3NlbGVjdD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3RlcjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEF0dGFja0NhdXNlRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5Oby4gVGVsZXBvbi9IYW5kcGhvbmU6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QXR0YWNrQ2F1c2VIb3NwaXRhbFRlbGVwaG9uZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5OYW1hIEtsaW5pay9SdW1haFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEF0dGFja0NhdXNlSG9zcGl0YWxOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkFsYW1hdCBLbGluaWsvUnVtYWggU2FraXQ8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRBdHRhY2tDYXVzZUhvc3BpdGFsQWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+NS4gU2V3YWt0dSB0aWRhayBhZGEgc2VyYW5nYW4sIGFwYWthaCBhZGEga2VsdWhhbi1rZWx1aGFuIGJlcmlrdXQ\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1NpbmdsZScgaWQ9J1JhZGlvQnV0dG9uQ29tcGxhaW5DYXVnaCcgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdjYXVnaCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ29tcGxhaW5DYXVnaCc+YmF0dWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25Db21wbGFpblNob3J0bmVzc0JyZWF0aCcgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdzaG9ydG5lc3NicmVhdGgnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNvbXBsYWluU2hvcnRuZXNzQnJlYXRoJz5uYXBhcyBwZW5kZWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25Db21wbGFpbk5naWtTb3VuZCcgbmFtZT0nUmFkaW9CdXR0b25Db21wbGFpbicgdHlwZT0ncmFkaW8nIHZhbHVlPSduZ2lrc291bmQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNvbXBsYWluTmdpa1NvdW5kJz5iZXJidW55aSAibmdpayI8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjYuIGEuIFBlbmdvYmF0YW4gYXBha2FoIHlhbmcgZGlndW5ha2FuIHVudHVrIG1lbmdhdGFzaSBnYW5nZ3VhbiBwZXJuYXBhc2FuPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaW5nbGUnIGlkPSdSYWRpb0J1dHRvblRoZXJhcHlJbmhhbGVyJyBuYW1lPSdSYWRpb0J1dHRvblRoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0naW5oYWxlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVGhlcmFweUluaGFsZXInPmluaGFsZXI8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2luZ2xlJyBpZD0nUmFkaW9CdXR0b25UaGVyYXB5RHJ1ZycgbmFtZT0nUmFkaW9CdXR0b25UaGVyYXB5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2RydWdzJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25UaGVyYXB5RHJ1Zyc+T2JhdC1vYmF0YW4oSmVsYXNrYW4gbmFtYSBvYmF0LCBkb3NpcyBkYW4gZnJla3VlbnNpIHBlbmdndW5hYW5ueWEgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPk5hbWEgT2JhdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPkRvc2lzPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+RnJla3VlbnNpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnTmFtZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnRG9zZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnRnJlcXVlbmN5MScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdOYW1lMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdEb3NlMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdGcmVxdWVuY3kyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSUlVQRHJ1Z05hbWUzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSUlVQRHJ1Z0Rvc2UzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSUlVQRHJ1Z0ZyZXF1ZW5jeTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnTmFtZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnRG9zZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJSVVBEcnVnRnJlcXVlbmN5NCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdOYW1lNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdEb3NlNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UlJVUERydWdGcmVxdWVuY3k1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPmIuIEthcGFuIG9iYXQtb2JhdGFuIHRlcnNlYnV0IGRpa29uc3Vtc2k\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Db25zdW1wdGlvbkV2ZXJ5RGF5JyBuYW1lPSdSYWRpb0J1dHRvbkNvbnN1bXB0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J2V2ZXJ5ZGF5Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Db25zdW1wdGlvbkV2ZXJ5RGF5Jz5TZXRpYXAgaGFyaTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNvbnN1bXB0aW9uV2hlbkF0dGFja2VkJyBuYW1lPSdSYWRpb0J1dHRvbkNvbnN1bXB0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J3doZW5hdHRhY2tlZCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ29uc3VtcHRpb25XaGVuQXR0YWNrZWQnPkhhbnlhIHNhYXQgc2VyYW5nYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+Yy4gQXBha2FoIG9iYXQtb2JhdGFuIHRlcnNlYnV0IG1hc2loIGRpa29uc3Vtc2kgc2FtcGFpIHNla2FyYW5nPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU3RpbGxDb25zdW1lZFllcycgbmFtZT0nUmFkaW9CdXR0b25TdGlsbENvbnN1bWVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblN0aWxsQ29uc3VtZWRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU3RpbGxDb25zdW1lZE5vJyBuYW1lPSdSYWRpb0J1dHRvblN0aWxsQ29uc3VtZWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblN0aWxsQ29uc3VtZWRObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+TW9ob24gbWVuamVsYXNrYW4gYWxzYW5ueWEgc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0U3RpbGxDb25zdW1lZERlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjcuIFNlaHVidW5nYW4gZGVuZ2FuIGdhbmdndWFuIHBlcm5hcGFzYW4sIGthcGFuIGRhbiBiYWdhaW1hbmEgaGFzaWwgcGVtZXJpa3NhYW4gZGFyYWgsIHJvbnRnZW4gZGFkYSwgc3Bpcm9tZXRyaSBsYWlubnlhPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz4oTW9ob24gZGlsYW1waXJrYW4gZm90b2tvcGkgaGFzaWwgcGVtZXJpa3NhYW4pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0TWVkaWNhbENoZWNrUmVzdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPjguIE1vaG9uIGxlbmdrYXBpIGRhdGEgRG9rdGVyIGRhbiBSdW1haCBTYWtpdCB5YW5nIGJpYXNhIGRpa3VuanVuZ2kgdW50dWsgZ2FuZ2d1YW4gcGVybmFwYXNhbi48L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+PC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPExhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+VGFuZ2dhbCB0ZXJha2hpciBrb25zdWx0YXNpPC9MYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVDb25zdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2JyPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+RGlhZ25vc2E8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRDb25zdWx0RGlhZ25vc2UnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRDb25zdWx0RG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5Oby4gVGVsZXBvbi9IYW5kcGhvbmU6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0Q29uc3VsdFBob25lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dENvbnN1bHRIb3NwaXRhbE5hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRDb25zdWx0SG9zcGl0YWxBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz45LiBNb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0QWRkaXRpb25hbEluZm8nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgIDxoMj5QRVJOWUFUQUFOIERBTiBLVUFTQTwvaDI+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVueWF0YWthbiBkZW5nYW4gc2ViZW5hcm55YSBiYWh3YSBzZW11YSBwZXJueWF0YWFuIGRhbiBqYXdhYmFuIGRpIGF0YXMgYWRhbGFoIGxlbmdrYXAgZGFuIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhLjwvbGk+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW1iZXJpIGt1YXNhIGtlcGFkYSBzZXRpYXAgRG9rdGVyLyBSdW1haCBTYWtpdC8gS2xpbmlrLyBQdXNrZXNtYXMvIGxhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpLyBsZW1iYWdhIGF0YXUgcGloYWsgbGFpbiB5YW5nIG1lbXB1bnlhaSBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEsIHVudHVrIG1lbmd1bmdrYXBrYW4ga2VwYWRhIFBlbmFuZ2d1bmcgc2VtdWEga2V0ZXJhbmdhbiB0ZW50YW5nIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gc2F5YS48L2xpPg0KICAgICAgICAgICAgPGxpPkt1YXNhIGluaSBtZXJ1cGFrYW4gaGFsIHlhbmcgdGlkYWsgdGVycGlzYWhrYW4gZGFyaSBTdXJhdCBQZW5nYWp1YW4gQXN1cmFuc2kgSml3YSBkYW4gYWthbiBtZW5naWthdCBzYXlhLCBhaGxpIHdhcmlzLCBkYW4ga2VsdWFyZ2Egc2F5YS48L2xpPg0KICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgc2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBzYXlhIG1lbmluZ2dhbC5TYWxpbmFuLyBmb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwQ2FyZGlhYyc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcENhcmRpYWMnPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblBvcFVwQ2FuY2VsKCdQb3BVcENhcmRpYWMnKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2FuY2VsJz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lclJpZ2h0JyBpZD0nQnV0dG9uRG9uZScgb25jbGljaz0iYnV0dG9uUG9wVXBEb25lKCdQb3BVcENhcmRpYWMnLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdDYXJkaWFjJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlLCBbJ0RhdGUnICsgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnQ2hlc3RQYWluJyArICdGaXJzdEF0dGFjaycsICdEYXRlJyArIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0h5cGVydGVuc2lvbicgKyAnRmlyc3RUaW1lJ10pIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+UGVydGFueWFhbiBLZXNlaGF0YW48L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTXVsdGkgU2luZ2xlJyBpZD0nTGFiZWxEZXRhaWwnPg0KICAgICAgICAgICAgNmQgR2FuZ2d1YW4gZnVuZ3NpL3Npc3RlbSBKYW50dW5nIGRhbiBQZW1idWx1aCBEYXJhaCwgTnllcmkgRGFkYSwgU2VyYW5nYW4gSmFudHVuZywgRGVtYW0sIEphbnR1bmcsIFJlbWF0aWssIFRla2FuYW4gRGFyYWggVGluZ2dpIChIaXBlcnRlbnNpKS9SZW5kYWgsIChIaXBvdGVuc2kpLCBIaXBlcmtvbGVzdGVyb2wsIFBlbnllbXBpdGFuL1Blbnl1bWJhdGFuIFBlbWJ1bHVoIERhcmFoIE90YWsgZGFuIGxhaW5ueWE\/DQogICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24nPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5JyBpZD0nQnV0dG9uQ2hlc3RQYWluJyBvbmNsaWNrPSJidXR0b25Qb3BVcE5hdmlnYXRpb24odGhpcy5pZCwgJ1BvcFVwQ2FyZGlhYycsICdQb3BVcENoZXN0UGFpbicsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0NoZXN0UGFpbicsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0t1ZXNpb25lciBOeWVyaSBEYWRhJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25IeXBlcnRlbnNpb24nIG9uY2xpY2s9ImJ1dHRvblBvcFVwTmF2aWdhdGlvbih0aGlzLmlkLCAnUG9wVXBDYXJkaWFjJywgJ1BvcFVwSHlwZXJ0ZW5zaW9uJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnSHlwZXJ0ZW5zaW9uJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nS3Vlc2lvbmVyIFRla2FuYW4gRGFyYWggVGluZ2dpJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz5zaWxhaGthbiBtZW1iZXJpa2FuIHJpbmNpYW4gbGViaWggbGFuanV0PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSdGdWxsIE11bHRpJyBpZD0nQXJlYUFtYW5kbWVudERldGFpbCc+PC90ZXh0YXJlYT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUnPihtYWtzaW11bSAyNTAga2FyYWt0ZXIpPC9sYWJlbD4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBDaGVzdFBhaW4nPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBDaGVzdFBhaW4nPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwQ2FuY2VsKCdQb3BVcENoZXN0UGFpbicsICdQb3BVcENhcmRpYWMnKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2FuY2VsJz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lclJpZ2h0JyBpZD0nQnV0dG9uRG9uZScgb25jbGljaz0iYnV0dG9uU3ViUG9wVXBEb25lKCdQb3BVcENoZXN0UGFpbicsICdQb3BVcENhcmRpYWMnLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdDaGVzdFBhaW4nLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S1VFU0lPTkVSIE5ZRVJJIERBREE8L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDZkJz5HYW5nZ3VhbiBmdW5nc2kvc2lzdGVtIEphbnR1bmcgZGFuIFBlbWJ1bHVoIERhcmFoLCBOeWVyaSBEYWRhLCBTZXJhbmdhbiBKYW50dW5nLCBEZW1hbSwgSmFudHVuZywgUmVtYXRpaywgVGVrYW5hbiBEYXJhaCBUaW5nZ2kgKEhpcGVydGVuc2kpL1JlbmRhaCwgKEhpcG90ZW5zaSksIEhpcGVya29sZXN0ZXJvbCwgUGVueWVtcGl0YW4vUGVueXVtYmF0YW4gUGVtYnVsdWggRGFyYWggT3RhayBkYW4gbGFpbm55YT88L3NwYW4+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0zIE1hcmdpbicgaWQ9J0xhYmVsRmlyc3RBdHRhY2snPjEuIEthcGFuIHBlcnRhbWEga2FsaSBBbmRhIG1lcmFzYWthbiBueWVyaSBkYWRhPzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUZpcnN0QXR0YWNrJyB0eXBlPSdkYXRlJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz4yLiBCZXJhcGEgbGFtYSBzZXJhbmdhbiB0ZXJzZWJ1dCBiZXJsYW5nc3VuZz88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0ndGltZScgaWQ9J0RhdGVBdHRhY2tEdXJhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+My4gQXBha2FoIGFkYSBzZXJhbmdhbiBsYW5qdXRhbiBzZXN1ZGFobnlhPzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uTmV4dEF0dGFja1llcycgbmFtZT0nUmFkaW9CdXR0b25OZXh0QXR0YWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk5leHRBdHRhY2tZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uTmV4dEF0dGFja05vJyBuYW1lPSdSYWRpb0J1dHRvbk5leHRBdHRhY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk5leHRBdHRhY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0zIE1hcmdpbicgaWQ9J0xhYmVsTGFzdEF0dGFjayc+VGFuZ2dhbCBzZXJhbmdhbiB0ZXJha2hpcj88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVMYXN0QXR0YWNrJyB0eXBlPSdkYXRlJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+QmVyYXBhIGxhbWEgc2VyYW5nYW4gdGVyc2VidXQgYmVybGFuZ3N1bmc\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J3RpbWUnIGlkPSdEYXRlTGFzdEF0dGFja0R1cmF0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0zIE1hcmdpbicgaWQ9J0xhYmVsQ3VycmVudEF0dGFja1RpbWVzJz5IaW5nZ2Egc2FhdCBpbmkgc2VyYW5nYW4gc3VkYWggdGVyamFkaSBzZWJhbnlhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdOdW1iZXJDdXJyZW50QXR0YWNrVGltZXMnIHR5cGU9J251bWJlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJz5rYWxpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMyBNYXJnaW4nIGlkPSdMYWJlbExhc3RBcmlzZSc+NC4gS2FwYW4gdGVyYWtoaXIga2FsaSBueWVyaSBkYWRhIHRlcmphZGk\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlTGFzdEFyaXNlJyB0eXBlPSdkYXRlJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz41LiBCYWdhaW1hbmEgc2lmYXQgbnllcmkgZGFkYSB5YW5nIEFuZGEgcmFzYWthbiA\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoYXJhY3Rlck91dE9mQnJlYXRoJyBuYW1lPSdSYWRpb0J1dHRvbkNoYXJhY3RlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvdXRvZmJyZWF0aCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hhcmFjdGVyT3V0T2ZCcmVhdGgnPlNlc2FrIE5hZmFzPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hhcmFjdGVyU3F1ZWV6ZWQnIG5hbWU9J1JhZGlvQnV0dG9uQ2hhcmFjdGVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J3NxdWVlemVkJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGFyYWN0ZXJTcXVlZXplZCc+RGFkYSB0ZXJhc2EgZGlyZW1hczwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoYXJhY3RlckRlcHJlc3NlZCcgbmFtZT0nUmFkaW9CdXR0b25DaGFyYWN0ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZGVwcmVzc2VkJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGFyYWN0ZXJEZXByZXNzZWQnPkRhZGEgdGVyYXNhIHRlcnRla2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hhcmFjdGVySG90JyBuYW1lPSdSYWRpb0J1dHRvbkNoYXJhY3RlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdob3QnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoYXJhY3RlckhvdCc+RGFkYSB0ZXJhc2EgcGFuYXM8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DaGFyYWN0ZXJDaGVzdFRpZ2h0bmVzcycgbmFtZT0nUmFkaW9CdXR0b25DaGFyYWN0ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0nY2hlc3R0aWdodG5lc3MnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoYXJhY3RlckNoZXN0VGlnaHRuZXNzJz5EYWRhIHRlcmFzYSBiZXJhdDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoYXJhY3RlckNoZXN0UHVuY3R1cmVkJyBuYW1lPSdSYWRpb0J1dHRvbkNoYXJhY3RlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdjaGVzdHB1bmN0dXJlZCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hhcmFjdGVyQ2hlc3RQdW5jdHVyZWQnPkRhZGEgdGVyYXNhIGRpdHVzdWstdHVzdWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DaGFyYWN0ZXJWYWd1ZWx5VW5jb21mb3J0YWJsZScgbmFtZT0nUmFkaW9CdXR0b25DaGFyYWN0ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndmFndWVseXVuY29tZm9ydGFibGUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoYXJhY3RlclZhZ3VlbHlVbmNvbWZvcnRhYmxlJz5TYW1hci1zYW1hciAsIHRpZGFrIG55YW1hbjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoYXJhY3Rlck90aGVycycgbmFtZT0nUmFkaW9CdXR0b25DaGFyYWN0ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoYXJhY3Rlck90aGVycyc+TGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRDaGFyYWN0ZXJPdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjYuIERpbWFuYWthaCBsZXRhayBueWVyaSBkYWRhIHRlcnNlYnV0PzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25Mb2NhdGlvbk1pZGRsZScgbmFtZT0nUmFkaW9CdXR0b25Mb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdtaWRkbGUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkxvY2F0aW9uTWlkZGxlJz5EaSBUZW5nYWggZGFkYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkxvY2F0aW9uTGVmdCcgbmFtZT0nUmFkaW9CdXR0b25Mb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdsZWZ0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Mb2NhdGlvbkxlZnQnPkRpIHNpc2kga2lyaSBkYWRhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uTG9jYXRpb25SaWdodCcgbmFtZT0nUmFkaW9CdXR0b25Mb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdyaWdodCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uTG9jYXRpb25SaWdodCc+RGkgc2lzaSBrYW5hbiBkYWRhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uTG9jYXRpb25PdGhlcnMnIG5hbWU9J1JhZGlvQnV0dG9uTG9jYXRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkxvY2F0aW9uT3RoZXJzJz5EaSBiYWdpYW4gbGFpbiBkYXJpIGRhZGEsIHNlYnV0a2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dExvY2F0aW9uT3RoZXJEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz43LiBBcGFrYWggbnllcmkgZGFkYSB0ZXJzZWJ1dCBtZW5qYWxhciA\\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UcmVhdG1lbnRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uVHJlYXRtZW50JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRyZWF0bWVudFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UcmVhdG1lbnRObycgbmFtZT0nUmFkaW9CdXR0b25UcmVhdG1lbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRyZWF0bWVudE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaTwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0VHJlYXRtZW50UmVhc29uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz4xMy4gQXBha2FoIHBlcm5haCBtZWxha3VrYW4gcGVtZXJpa3NhYW4gc2ViYWdhaSBiZXJpa3V0PzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uRXZlckNoZWNrWWVzJyBuYW1lPSdSYWRpb0J1dHRvbkV2ZXJDaGVjaycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25FdmVyQ2hlY2tZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uRXZlckNoZWNrTm8nIG5hbWU9J1JhZGlvQnV0dG9uRXZlckNoZWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25FdmVyQ2hlY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hla1VwRXZlckVrZycgbmFtZT0nUmFkaW9CdXR0b25DaGVrVXBFdmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2VrZ2VjZyc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hla1VwRXZlckVrZyc+RUtHL0VDRzwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXJSb250Z2VuJyBuYW1lPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0ncm9udGdlbic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hla1VwRXZlclJvbnRnZW4nPlJvbnRnZW4gZGFkYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXJFY2hvY2FyZGlvZ3JhbScgbmFtZT0nUmFkaW9CdXR0b25DaGVrVXBFdmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2VjaG9jYXJkaW9ncmFtJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGVrVXBFdmVyRWNob2NhcmRpb2dyYW0nPkVjaG9jYXJkaW9ncmFtPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hla1VwRXZlclRyZWFkbWlsbCcgbmFtZT0nUmFkaW9CdXR0b25DaGVrVXBFdmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RyZWFkbWlsbCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hla1VwRXZlclRyZWFkbWlsbCc+VHJlYWRtaWxsPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hla1VwRXZlckxhYm9yYXRvcml1bScgbmFtZT0nUmFkaW9CdXR0b25DaGVrVXBFdmVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2xhYm9yYXRvcnknPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXJMYWJvcmF0b3JpdW0nPkxhYm9yYXRvcml1bTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWtVcEV2ZXJPdGhlcnMnIG5hbWU9J1JhZGlvQnV0dG9uQ2hla1VwRXZlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvdGhlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hla1VwRXZlck90aGVycyc+TGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0Q2hlY2tVcEV2ZXJPdGhlcnNEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5KaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmk8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4oS2FwYW4gZGFuIGJhZ2FpbWFuYSBoYXNpbG55YSBzZXJ0YSBtZWxhbXBpcmthbiBmb3Rva29waSBoYXNpbCBwZW1lcmlrc2FhbikuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RXZlckNoZWNrRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+MTQuIEFwYWthaCBBbmRhIHBlcm5haCB0aWRhayBtYXN1ayBrZXJqYSBkYWxhbSBqYW5na2Egd2FrdHUgbGFtYSBrYXJlbmEga29uZGlzaSBpbmk\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UYWtlTGVhdmVZZXMnIG5hbWU9J1JhZGlvQnV0dG9uVGFrZUxlYXZlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRha2VMZWF2ZVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UYWtlTGVhdmVObycgbmFtZT0nUmFkaW9CdXR0b25UYWtlTGVhdmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRha2VMZWF2ZU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+PC9kaXY+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0zIE1hcmdpbicgaWQ9J0xhYmVsVGFrZUxlYXZlSWZZZXMnPkppa2EgIllhIiBrYXBhbj88L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlVGFrZUxlYXZlSWZZZXMnIHR5cGU9J2RhdGUnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMyBNYXJnaW4nIGlkPSdMYWJlbFRha2VMZWF2ZUhvd0xvbmcnPmRhbiBiZXJhcGEgbGFtYT88L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdOdW1iZXJUYWtlTGVhdmVIb3dMb25nJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMyBNYXJnaW4nPkhhcmk8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjE1LiBNb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dENQQWRkaXRpb25hbEluZm8nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgIDxoMj5QRVJOWUFUQUFOIERBTiBLVUFTQTwvaDI+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVueWF0YWthbiBkZW5nYW4gc2ViZW5hcm55YSBiYWh3YSBzZW11YSBwZXJueWF0YWFuIGRhbiBqYXdhYmFuIGRpIGF0YXMgYWRhbGFoIGxlbmdrYXAgZGFuIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhLjwvbGk+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW1iZXJpIGt1YXNhIGtlcGFkYSBzZXRpYXAgRG9rdGVyLyBSdW1haCBTYWtpdC8gS2xpbmlrLyBQdXNrZXNtYXMvIGxhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpLyBsZW1iYWdhIGF0YXUgcGloYWsgbGFpbiB5YW5nIG1lbXB1bnlhaSBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEsIHVudHVrIG1lbmd1bmdrYXBrYW4ga2VwYWRhIFBlbmFuZ2d1bmcgc2VtdWEga2V0ZXJhbmdhbiB0ZW50YW5nIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gc2F5YS48L2xpPg0KICAgICAgICAgICAgPGxpPkt1YXNhIGluaSBtZXJ1cGFrYW4gaGFsIHlhbmcgdGlkYWsgdGVycGlzYWhrYW4gZGFyaSBTdXJhdCBQZW5nYWp1YW4gQXN1cmFuc2kgSml3YSBkYW4gYWthbiBtZW5naWthdCBzYXlhLCBhaGxpIHdhcmlzLCBkYW4ga2VsdWFyZ2Egc2F5YS48L2xpPg0KICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgc2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBzYXlhIG1lbmluZ2dhbC5TYWxpbmFuLyBmb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwSHlwZXJ0ZW5zaW9uJz4NCiAgICAgIDxmb3JtIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwSHlwZXJ0ZW5zaW9uJz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcENhbmNlbCgnUG9wVXBIeXBlcnRlbnNpb24nLCAnUG9wVXBDYXJkaWFjJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBIeXBlcnRlbnNpb24nLCAnUG9wVXBDYXJkaWFjJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnSHlwZXJ0ZW5zaW9uJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRG9uZSc+DQogICAgICAgICAgPGgyPktVRVNJT05FUiBURUtBTkFOIERBUkFIIFRJTkdHSTwvaDI+DQogICAgICAgIDwvaGVhZGVyPg0KICAgICAgICA8IS0tIEZJRUxEU0VUIC0tPg0KICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNdWx0aSBTaW5nbGUgNmQnPkdhbmdndWFuIGZ1bmdzaS9zaXN0ZW0gSmFudHVuZyBkYW4gUGVtYnVsdWggRGFyYWgsIE55ZXJpIERhZGEsIFNlcmFuZ2FuIEphbnR1bmcsIERlbWFtLCBKYW50dW5nLCBSZW1hdGlrLCBUZWthbmFuIERhcmFoIFRpbmdnaSAoSGlwZXJ0ZW5zaSkvUmVuZGFoLCAoSGlwb3RlbnNpKSwgSGlwZXJrb2xlc3Rlcm9sLCBQZW55ZW1waXRhbi9QZW55dW1iYXRhbiBQZW1idWx1aCBEYXJhaCBPdGFrIGRhbiBsYWlubnlhPzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTMgTWFyZ2luJyBpZD0nTGFiZWxGaXJzdFRpbWUnPjEuIGEuIEthcGFuIHBlcnRhbWEga2FsaSBkaWtldGFodWkgbWVuZGVyaXRhIHRla2FuYW4gZGFyYWggdGluZ2dpPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlRmlyc3RUaW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgTWFyZ2luIFBvc2l0aW9uZXJSaWdodCc+Yi4gQmVyYXBhIHRla2FuYW4gZGFyYWggc2FhdCBpdHU\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0IE1hcmdpbic+bW1IZzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBNYXJnaW4gUG9zaXRpb25lclJpZ2h0JyBpZD0nTnVtYmVyRGlhc3RvbGljJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBNYXJnaW4gUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgTWFyZ2luIFBvc2l0aW9uZXJSaWdodCcgaWQ9J051bWJlclN5c3RvbGljJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+Yy4gTWVuZ2FwYSBzYWF0IGl0dSBkaWxha3VrYW4gcGVtZXJpa3NhYW4gdGVrYW5hbiBkYXJhaD88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DaGVja1JlYXNvblJvdXRpbmUnIG5hbWU9J1JhZGlvQnV0dG9uQ2hlY2tSZWFzb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ncm91dGluZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ2hlY2tSZWFzb25Sb3V0aW5lJz5QZW1lcmlrc2FhbiBydXRpbjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWNrUmVhc29uT3RoZXJzJyBuYW1lPSdSYWRpb0J1dHRvbkNoZWNrUmVhc29uJyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGVja1JlYXNvbk90aGVycyc+S2VsdWhhbiBsYWlubnlhLiBNb2hvbiBqZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmk8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRDaGVja1JlYXNvbk90aGVyRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPmQuIEFwYWthaCBkaWtvbnN1bHRhc2lrYW4ga2UgZG9rdGVyID88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkRvY3RvckNvbnN1bHRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uRG9jdG9yQ29uc3VsdCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Eb2N0b3JDb25zdWx0WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkRvY3RvckNvbnN1bHRObycgbmFtZT0nUmFkaW9CdXR0b25Eb2N0b3JDb25zdWx0JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Eb2N0b3JDb25zdWx0Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2EgIllhIiBtb2hvbiBtZW5naXNpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0RG9jdG9yTmFtZSc+TmFtYSBEb2t0ZXI8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRIVFVQRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHREb2N0b3JBZGRyZXNzJz5BbGFtYXQgRG9rdGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SFRVUERvY3RvckFkZHJlc3MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBNYXJnaW4nIGZvcj0nVGV4dEhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJz5lLiBCZXJhcGEgc2VyaW5nIEFuZGEga29udHJvbCBrZSBEb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dEhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+PC9sYWJlbD4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCc+a2FsaSBwZXI8L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxzZWxlY3QgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1NlbGVjdEhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yUGVyaW9kJz48L3NlbGVjdD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPjIuIEFwYWthaCBrZW5haWthbiB0ZWthbmFuIGRhcmFoIEFuZGEgdGVyc2VidXQgYmVyaHVidW5nYW4gZGVuZ2FuIHBlbnlha2l0IHNlYmFnYWkgYmVyaWt1dDo8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblJlbGF0ZWRUb0hlYXJ0JyBuYW1lPSdSYWRpb0J1dHRvblJlbGF0ZWRUbycgdHlwZT0ncmFkaW8nIHZhbHVlPSdoZWFydCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUmVsYXRlZFRvSGVhcnQnPkphbnR1bmc8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25SZWxhdGVkVG9CcmFpbicgbmFtZT0nUmFkaW9CdXR0b25SZWxhdGVkVG8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nYnJhaW4nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJlbGF0ZWRUb0JyYWluJz5PdGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUmVsYXRlZFRvS2lkbmV5JyBuYW1lPSdSYWRpb0J1dHRvblJlbGF0ZWRUbycgdHlwZT0ncmFkaW8nIHZhbHVlPSdraWRuZXknPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblJlbGF0ZWRUb0tpZG5leSc+R2luamFsPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUmVsYXRlZFRvT3RoZXJzJyBuYW1lPSdSYWRpb0J1dHRvblJlbGF0ZWRUbycgdHlwZT0ncmFkaW8nIHZhbHVlPSdvdGhlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUmVsYXRlZFRvT3RoZXJzJz5MYWlubnlhLCBzZWJ1dGthbjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJlbGF0ZWRUb090aGVyRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbTMgTWFyZ2luJyBpZD0nTGFiZWxXaGVuU3RhcnQnPjMuIGEuIEthcGFuIEFuZGEgbWVtdWxhaSBwZW5nb2JhdGFuIGtlbmFpa2FuIHRla2FuYW4gZGFyYWggdGVyc2VidXQ\\\\\/PC9sYWJlbD4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nTnVtYmVyQWJzZW50U2luY2VEYXlzJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5IYXJpPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSc+MTMuIE1vaG9uIEFuZGEgbWVtYmVyaWthbiBpbmZvcm1hc2kgdGFtYmFoYW4gbGFpbiB5YW5nIG1lbnVydXQgQW5kYSBwZW50aW5nIG11bmdraW4gZGFwYXQgbWVtYmFudHUgcHJvc2VzIHBlbmdhanVhbiBhc3VyYW5zaSBpbmkgZGVuZ2FuIG1lbGVuZ2thcGkga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0xIE1hcmdpbicgaWQ9J0FyZWFIZWFsdGhDb25kaXRpb24nIHR5cGU9J3RleHQnPjwvdGV4dGFyZWE+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPGRpdiBjbGFzcz0nTm90ZSc+DQogICAgICAgICAgPGgyPlBFUk5ZQVRBQU4gREFOIEtVQVNBPC9oMj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW55YXRha2FuIGRlbmdhbiBzZWJlbmFybnlhIGJhaHdhIHNlbXVhIHBlcm55YXRhYW4gZGFuIGphd2FiYW4gZGkgYXRhcyBhZGFsYWggbGVuZ2thcCBkYW4gc2VzdWFpIGRlbmdhbiBrZWFkYWFuIHNlYmVuYXJueWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbWJlcmkga3Vhc2Ega2VwYWRhIHNldGlhcCBEb2t0ZXIvIFJ1bWFoIFNha2l0LyBLbGluaWsvIFB1c2tlc21hcy8gbGFib3JhdG9yaXVtLCBwZXJ1c2FoYWFuIGFzdXJhbnNpIGF0YXUgcGVydXNhaGFhbiByZWFzdXJhbnNpLCBiYWRhbiwgaW5zdGFuc2kvIGxlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gc2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIG1lcnVwYWthbiBoYWwgeWFuZyB0aWRhayB0ZXJwaXNhaGthbiBkYXJpIFN1cmF0IFBlbmdhanVhbiBBc3VyYW5zaSBKaXdhIGRhbiBha2FuIG1lbmdpa2F0IHNheWEsIGFobGkgd2FyaXMsIGRhbiBrZWx1YXJnYSBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIHRldGFwIGJlcmxha3UgcGFkYSB3YWt0dSBzYXlhIG1hc2loIGhpZHVwIG1hdXB1biBzZXN1ZGFoIHNheWEgbWVuaW5nZ2FsLlNhbGluYW4vIGZvdG9rb3BpIGRhcmkgc3VyYXQga3Vhc2EgaW5pIHNhbWEgc2FoIGJlcmxha3VueWEgc2VwZXJ0aSBkb2t1bWVuIGFzbGkuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBOZXJ2ZSc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcE5lcnZlJz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25Qb3BVcENhbmNlbCgnUG9wVXBOZXJ2ZScpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdDYW5jZWwnPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdCdXR0b25Eb25lJyBvbmNsaWNrPSJidXR0b25Qb3BVcERvbmUoJ1BvcFVwTmVydmUnLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdOZXJ2ZScsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSwgWydUZXh0JyArIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0VwaWxlcHN5JyArICdTaW5jZSddKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRG9uZSc+DQogICAgICAgICAgPGgyPlBlcnRhbnlhYW4gS2VzZWhhdGFuPC9oMj4NCiAgICAgICAgPC9oZWFkZXI+DQogICAgICAgIDwhLS0gRklFTERTRVQgLS0+DQogICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J011bHRpIFNpbmdsZSA2Zic+R2FuZ2d1YW4gZnVuZ3NpL3Npc3RlbSBTYXJhZiBkYW4gT3RvdCwgVmVydGlnbywgU3Ryb2tlLCBTZXJpbmcgUHVzaW5nIGF0YXUgUGluZ3NhbiwgRXBpbGVwc2kgKGtlamFuZyksIEtlbHVtcHVoYW4sIEtlc2VtdXRhbiwgQmFhbCwgR2FuZ2d1YW4gS2VqaXdhYW4gZGFuIGxhaW5ueWE\/PC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25FcGlsZXBzeScgb25jbGljaz0iYnV0dG9uUG9wVXBOYXZpZ2F0aW9uKHRoaXMuaWQsICdQb3BVcE5lcnZlJywgJ1BvcFVwRXBpbGVwc3knLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdFcGlsZXBzeScsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0t1ZXNpb25lciBFcGlsZXBzaSBEYW4gS2VqYW5nJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz5zaWxhaGthbiBtZW1iZXJpa2FuIHJpbmNpYW4gbGViaWggbGFuanV0PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSdGdWxsIE11bHRpJyBpZD0nQXJlYUFtYW5kbWVudERldGFpbCc+PC90ZXh0YXJlYT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUnPihtYWtzaW11bSAyNTAga2FyYWt0ZXIpPC9sYWJlbD4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBFcGlsZXBzeSc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcEVwaWxlcHN5Jz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcENhbmNlbCgnUG9wVXBFcGlsZXBzeScsICdQb3BVcE5lcnZlJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBFcGlsZXBzeScsICdQb3BVcE5lcnZlJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnRXBpbGVwc3knLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S3Vlc2lvbmVyIEVwaWxlcHNpIERhbiBLZWphbmc8L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBNQUlOIC0tPg0KICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNdWx0aSBTaW5nbGUgNmYnPkdhbmdndWFuIGZ1bmdzaS9zaXN0ZW0gU2FyYWYgZGFuIE90b3QsIFZlcnRpZ28sIFN0cm9rZSwgU2VyaW5nIFB1c2luZyBhdGF1IFBpbmdzYW4sIEVwaWxlcHNpIChrZWphbmcpLCBLZWx1bXB1aGFuLCBLZXNlbXV0YW4sIEJhYWwsIEdhbmdndWFuIEtlaml3YWFuIGRhbiBsYWlubnlhPzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBGdWxsIFBvc2l0aW9uZXJMZWZ0Jz4xLiBTZWphayB1bXVyIGJlcmFwYSBBbmRhIHRlcnNlcmFuZyBlcGlsZXBzaT88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0U2luY2UnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQgRmlyc3RJbmRlbnQnPjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCc+VGFodW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+Mi4gQmVyYXBhIGthbGkgQW5kYSB0ZXJzZXJhbmcgZXBpbGVwc2k\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEhvd01hbnknIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTWFyZ2luIFBvc2l0aW9uZXJMZWZ0Jz5rYWxpIHBlcjwvbGFiZWw+DQogICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdTZWxlY3RIb3dNYW55UGVyaW9kJz48L3NlbGVjdD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPjMuIEthcGFuIHRlcmFraGlyIGthbGkgQW5kYSB0ZXJzZXJhbmcgZXBpbGVwc2k\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUxhc3QnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+NC4gUGFkYSBzYWF0IEFuZGEgdGVyc2VyYW5nIGVwaWxlcHNpLCBhcGFrYWg6PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE1lZGl1bSBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbldoYXRIYXBwZW5Mb3N0Q29uc2Npb3VzbmVzcycgbmFtZT0nUmFkaW9CdXR0b25XaGF0SGFwcGVuJyB0eXBlPSdyYWRpbycgdmFsdWU9J2xvc3Rjb25zY2lvdXNuZXNzJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbldoYXRIYXBwZW5Mb3N0Q29uc2Npb3VzbmVzcyc+SGFueWEgaGlsYW5nIGtlc2FkYXJhbiBzZWplbmFrIHRhbnBhIGtha3Uta2FrdSwga2VtdWRpYW4gbHVwYSBkZW5nYW4gYXBhIHlhbmcgdGVsYWggdGVyamFkaS48L2xhYmVsPg0KICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25XaGF0SGFwcGVuU3VkZGVubHlGYWxsJyBuYW1lPSdSYWRpb0J1dHRvbldoYXRIYXBwZW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc3VkZGVubHlmYWxsJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbldoYXRIYXBwZW5TdWRkZW5seUZhbGwnPlRpYmEtdGliYSBqYXR1aCBhdGF1IGtha3Uta2FrdSBwYWRhIHNlbHVydWggdHVidWggZGVuZ2FuIGlyYW1hIGtha3UtbGVtYXMta2FrdSBzZWNhcmEgYmVyZ2FudGlhbiwganVnYSB0ZXJqYWRpIHBhZGEgb3RvdC1vdG90IHdhamFoIGRlbmdhbiBtdWx1dCBiZXJidXNhLiBEYW4gcGFkYSBzYWF0IHRlcmphZGkga2VkdWEga2FraSBkYW4gbGVuZ2FuIGx1cnVzLCBrZXNhZGFyYW4gaGlsYW5nIGRhbiBiaWxhIGJlcmFraGlyLCBrZW11ZGlhbiB0ZXJ0aWR1ci48L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+NS4gU2ViZWx1bSB0ZXJqYWRpIHNlcmFuZ2FuLCBhcGFrYWggQW5kYSBtZXJhc2FrYW4gYWRhbnlhIHB1c2luZy1wdXNpbmcsIG1lbmNpdW0gYmF1LWJhdWFuLCBtZWxpaGF0IGNhaGF5YSwgYXRhdSBidW55aS1idW55aWFuPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uSXNGZWVsWWVzJyBuYW1lPSdSYWRpb0J1dHRvbklzRmVlbCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Jc0ZlZWxZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uSXNGZWVsTm8nIG5hbWU9J1JhZGlvQnV0dG9uSXNGZWVsJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Jc0ZlZWxObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+SmlrYSAiWWEiLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dElzRmVlbERlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPjYuIEFwYWthaCBBbmRhIHBlcm5haCBkaXJhd2F0IGthcmVuYSBlcGlsZXBzaT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIEl0ZW0nPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRyZWF0ZWRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uVHJlYXRlZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25UcmVhdGVkWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRyZWF0ZWRObycgbmFtZT0nUmFkaW9CdXR0b25UcmVhdGVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25UcmVhdGVkTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFRyZWF0ZWREZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz43LiBBcGFrYWggQW5kYSBzZWxhbHUgYmVya29uc3VsdGFzaSAvIGJlcm9iYXQga2UgZG9rdGVyPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJz5KaWthIOKAnFlh4oCdLCBtb2hvbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIEl0ZW0nPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNvbnN1bHRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQ29uc3VsdCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Db25zdWx0WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNvbnN1bHRObycgbmFtZT0nUmFkaW9CdXR0b25Db25zdWx0JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25Db25zdWx0Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZ2ZpeCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nVGV4dENvbnN1bHREb2N0b3JOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dENvbnN1bHREb2N0b3JUZWxlcGhvbmUnPk5vLiBUZWxlcG9uL0hhbmRwaG9uZTo8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZ2ZpeCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nVGV4dENvbnN1bHREb2N0b3JUZWxlcGhvbmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0Q29uc3VsdERvY3RvckFkZHJlc3MnPkFsYW1hdCBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZ2ZpeCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nVGV4dENvbnN1bHREb2N0b3JBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz44LiBLYXBhbiB0ZXJha2hpciBrYWxpIEFuZGEgYmVya29uc3VsdGFzaSBkZW5nYW4gZG9rdGVyPzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVMYXN0Q29uc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QXBha2FoIEFuZGEgbWVuZGFwYXQgb2JhdCBkb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE1lZGl1bSBJdGVtJz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkdldERydWdZZXMnIG5hbWU9J1JhZGlvQnV0dG9uR2V0RHJ1ZycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkdldERydWdZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkdldERydWdObycgbmFtZT0nUmFkaW9CdXR0b25HZXREcnVnJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkdldERydWdObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9icj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4oSmlrYSAiWWEiLCBtb2hvbiBtZW5naXNpIGtvbG9tIGRpIGJhd2FoIGluaSkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+TmFtZSBPYmF0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlciBNYXJnaW4nPkRvc2lzPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+RnJla3VlbnNpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RVBVUE5hbWUxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEVQVVBEb3NlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RVBVUEZyZXF1ZW5jeTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRFUFVQTmFtZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RVBVUERvc2UyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRFUFVQRnJlcXVlbmN5MicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEVQVVBOYW1lMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRFUFVQRG9zZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dEVQVVBGcmVxdWVuY3kzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RVBVUE5hbWU0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEVQVVBEb3NlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RVBVUEZyZXF1ZW5jeTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRFUFVQTmFtZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RVBVUERvc2U1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRFUFVQRnJlcXVlbmN5NScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz45LiBBcGFrYWggQW5kYSBtYXNpaCBtaW51bSBvYmF0IHNlY2FyYSB0ZXJhdHVyIGhpbmdnYSBzYWF0IGluaTwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ29uc3VtZURydWdZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQ29uc3VtZURydWcnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ29uc3VtZURydWdZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ29uc3VtZURydWdObycgbmFtZT0nUmFkaW9CdXR0b25Db25zdW1lRHJ1ZycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ29uc3VtZURydWdObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+MTAuIEFwYWthaCBBbmRhIHBlcm5haCBtZW5kZXJpdGEgcGVueWFraXQgaW5mZWtzaSBzZWxhcHV0IG90YWsvZ2VnYXIgb3RhayBzZWJlbHVtbnlhPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvbkluZmVjdGVkTm8nIG5hbWU9J1JhZGlvQnV0dG9uSW5mZWN0ZWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25JbmZlY3RlZE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3IgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25JbmZlY3RlZFllcycgbmFtZT0nUmFkaW9CdXR0b25JbmZlY3RlZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uSW5mZWN0ZWRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPjExLiBBcGFrYWggYWRhIHJpd2F5YXQga2VsdWFyZ2EgQW5kYSB5YW5nIG1lbmRlcml0YSBlcGlsZXBzaSA\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IaXN0b3J5WWVzJyBuYW1lPSdSYWRpb0J1dHRvbkhpc3RvcnknIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSGlzdG9yeVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25IaXN0b3J5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uSGlzdG9yeScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uSGlzdG9yeU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0SGlzdG9yeURlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjEyLiBBcGFrYWggQW5kYSBtZW5kZXJpdGEgcGVueWFraXQgbGFpbiBzZXBlcnRpIGRpIGJhd2FoIGluaTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBJdGVtJz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25PdGhlckRpc2Vhc2VzRGlhYmV0ZXMnIG5hbWU9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlcycgdHlwZT0ncmFkaW8nIHZhbHVlPSdkaWFiZXRlcyc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlc0RpYWJldGVzJz5LZW5jaW5nIE1hbmlzIChEaWFiZXRlcyBNZWxpdHVzKTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbk90aGVyRGlzZWFzZXNIeXBlcnRlbnNpb24nIG5hbWU9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlcycgdHlwZT0ncmFkaW8nIHZhbHVlPSdoeXBlcnRlbnNpb24nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk90aGVyRGlzZWFzZXNIeXBlcnRlbnNpb24nPkRhcmFoIFRpbmdnaSAoSGlwZXJ0ZW5zaSk8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25PdGhlckRpc2Vhc2VzVHVtb3InIG5hbWU9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlcycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0dW1vcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlc1R1bW9yJz5UdW1vcjwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbk90aGVyRGlzZWFzZXNDb21wbGljYXRpb24nIG5hbWU9J1JhZGlvQnV0dG9uT3RoZXJEaXNlYXNlcycgdHlwZT0ncmFkaW8nIHZhbHVlPSdjb21wbGljYXRpb24nPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbk90aGVyRGlzZWFzZXNDb21wbGljYXRpb24nPlBlbnlha2l0IGtvbXBsaWthc2kgbGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRPdGhlckRpc2Vhc2VzQ29tcGxpY2F0aW9uRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPk1vaG9uIG1lbmdpc2kgS3Vlc2lvbmVyIHNlc3VhaSBkZW5nYW4gcGVueWFraXQgbGFpbm55YSB5YW5nIEFuZGEgZGVyaXRhIHNlc3VhaSBkZW5nYW4gcGlsaWhhbjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIEl0ZW0nPnBhZGEgbm9tb3IgMTI8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjEzLiBBcGFrYWggQW5kYSBwZXJuYWggbWVsYWt1a2FuIHBlbWVyaWtzYWFuIGJlcmlrdXQ\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gSXRlbSc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQ2hlY2t1cFR3b1llcycgbmFtZT0nUmFkaW9CdXR0b25DaGVja3VwVHdvJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkNoZWNrdXBUd29ZZXMnPkVsZWt0cm9lbnNlZmFsb2dyYWZpIChyZWthbWFuIHN5YXJhZiBvdGFrKTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkNoZWNrdXBUd29ObycgbmFtZT0nUmFkaW9CdXR0b25DaGVja3VwVHdvJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25DaGVja3VwVHdvTm8nPlJvbnRnZW4gcGhvdG8gdGVuZ2tvcmFrIChrZXBhbGEpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0Q2hlY2t1cFR3b0Rlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+MTQuIE1vaG9uIEFuZGEgbWVtYmVyaWthbiBpbmZvcm1hc2kgdGFtYmFoYW4gbGFpbiB5YW5nIG1lbnVydXQgQW5kYSBwZW50aW5nIG11bmdraW4gZGFwYXQgbWVtYmFudHUgcHJvc2VzIHBlbmdhanVhbiBhc3VyYW5zaSBpbmkgZGVuZ2FuIG1lbGVuZ2thcGkga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0SW5mbycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPGRpdiBjbGFzcz0nTm90ZSc+DQogICAgICAgICAgPGgyPlBFUk5ZQVRBQU4gREFOIEtVQVNBPC9oMj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW55YXRha2FuIGRlbmdhbiBzZWJlbmFybnlhIGJhaHdhIHNlbXVhIHBlcm55YXRhYW4gZGFuIGphd2FiYW4gZGkgYXRhcyBhZGFsYWggbGVuZ2thcCBkYW4gc2VzdWFpIGRlbmdhbiBrZWFkYWFuIHNlYmVuYXJueWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbWJlcmkga3Vhc2Ega2VwYWRhIHNldGlhcCBEb2t0ZXIvIFJ1bWFoIFNha2l0LyBLbGluaWsvIFB1c2tlc21hcy8gbGFib3JhdG9yaXVtLCBwZXJ1c2FoYWFuIGFzdXJhbnNpIGF0YXUgcGVydXNhaGFhbiByZWFzdXJhbnNpLCBiYWRhbiwgaW5zdGFuc2kvIGxlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gc2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIG1lcnVwYWthbiBoYWwgeWFuZyB0aWRhayB0ZXJwaXNhaGthbiBkYXJpIFN1cmF0IFBlbmdhanVhbiBBc3VyYW5zaSBKaXdhIGRhbiBha2FuIG1lbmdpa2F0IHNheWEsIGFobGkgd2FyaXMsIGRhbiBrZWx1YXJnYSBzYXlhLjwvbGk+DQogICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIHRldGFwIGJlcmxha3UgcGFkYSB3YWt0dSBzYXlhIG1hc2loIGhpZHVwIG1hdXB1biBzZXN1ZGFoIHNheWEgbWVuaW5nZ2FsLiBTYWxpbmFuLyBmb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwTGl2ZXInPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBMaXZlcic+DQogICAgICAgIDwhLS0gSEVBREVSIC0tPg0KICAgICAgICA8aGVhZGVyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0J1dHRvbkNhbmNlbCcgb25jbGljaz0iYnV0dG9uUG9wVXBDYW5jZWwoJ1BvcFVwTGl2ZXInKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nQ2FuY2VsJz4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lclJpZ2h0JyBpZD0nQnV0dG9uRG9uZScgb25jbGljaz0iYnV0dG9uUG9wVXBEb25lKCdQb3BVcExpdmVyJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnTGl2ZXInLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUsIFsnRGF0ZScgKyBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdEaWFiZXRlcycgKyAnRmlyc3RLbm93biddKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRG9uZSc+DQogICAgICAgICAgPGgyPlBlcnRhbnlhYW4gS2VzZWhhdGFuPC9oMj4NCiAgICAgICAgPC9oZWFkZXI+DQogICAgICAgIDwhLS0gRklFTERTRVQgLS0+DQogICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J011bHRpIFNpbmdsZSA2Zyc+R2FuZ2d1YW4gZnVuZ3NpL3Npc3RlbSBIYXRpIGRhbiBQYW5rcmVhcywgS2VuY2luZyBNYW5pcyAoRGlhYmV0ZXMgTWVsaXR1cyksIEJhdHUgRW1wZWR1LCBUdW1vciBIYXRpLCBwZW55YWtpdCBMaW1wYSBkYW4gbGFpbm55YT88L3NwYW4+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uJz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeScgaWQ9J0J1dHRvbkRpYWJldGVzJyBvbmNsaWNrPSJidXR0b25Qb3BVcE5hdmlnYXRpb24odGhpcy5pZCwgJ1BvcFVwTGl2ZXInLCAnUG9wVXBEaWFiZXRlcycsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0RpYWJldGVzJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nS3Vlc2lvbmVyIERpYWJldGVzJz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz5zaWxhaGthbiBtZW1iZXJpa2FuIHJpbmNpYW4gbGViaWggbGFuanV0PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSdGdWxsIE11bHRpJyBpZD0nQXJlYUFtYW5kbWVudERldGFpbCc+PC90ZXh0YXJlYT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUnPihtYWtzaW11bSAyNTAga2FyYWt0ZXIpPC9sYWJlbD4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPHNlY3Rpb24gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBEaWFiZXRlcyc+DQogICAgICA8Zm9ybSBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcERpYWJldGVzJz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25TdWJQb3BVcENhbmNlbCgnUG9wVXBEaWFiZXRlcycsICdQb3BVcExpdmVyJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBEaWFiZXRlcycsICdQb3BVcExpdmVyJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnRGlhYmV0ZXMnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+S3Vlc2lvbmVyIERpYWJldGVzPC9oMj4NCiAgICAgICAgPC9oZWFkZXI+DQogICAgICAgIDwhLS0gRklFTERTRVQgLS0+DQogICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J011bHRpIFNpbmdsZSA2Zyc+R2FuZ2d1YW4gZnVuZ3NpL3Npc3RlbSBIYXRpIGRhbiBQYW5rcmVhcywgS2VuY2luZyBNYW5pcyAoRGlhYmV0ZXMgTWVsaXR1cyksIEJhdHUgRW1wZWR1LCBUdW1vciBIYXRpLCBwZW55YWtpdCBMaW1wYSBkYW4gbGFpbm55YT88L3NwYW4+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0xhYmVsRmlyc3RLbm93bic+MS4gS2FwYW4gcGVydGFtYSBrYWxpIGRpa2V0YWh1aSBtZW5kZXJpdGEgZGlhYmV0ZXM\\\/PC9zcGFuPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25CYWNrYm9uZScgb25jbGljaz0iYnV0dG9uUG9wVXBOYXZpZ2F0aW9uKHRoaXMuaWQsICdQb3BVcE1vdGlvbicsICdQb3BVcEJhY2tib25lJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnQmFja2JvbmUnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdLdWVzaW9uZXIgR2FuZ2d1YW4gVHVsYW5nIEJlbGFrYW5nJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnknIGlkPSdCdXR0b25Kb2ludCcgb25jbGljaz0iYnV0dG9uUG9wVXBOYXZpZ2F0aW9uKHRoaXMuaWQsICdQb3BVcE1vdGlvbicsICdQb3BVcEpvaW50Jywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnSm9pbnQnLCBhcnJheUhlYWx0aFF1ZXN0aW9ubmFpcmUpIiB0eXBlPSdidXR0b24nIHZhbHVlPSdLdWVzaW9uZXIgR2FuZ2d1YW4gU2VuZGknPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUnPnNpbGFoa2FuIG1lbWJlcmlrYW4gcmluY2lhbiBsZWJpaCBsYW5qdXQ8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9J0Z1bGwgTXVsdGknIGlkPSdBcmVhQW1hbmRtZW50RGV0YWlsJz48L3RleHRhcmVhPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSc+KG1ha3NpbXVtIDI1MCBrYXJha3Rlcik8L2xhYmVsPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgPC9mb3JtPg0KICAgIDwvc2VjdGlvbj4NCiAgICA8c2VjdGlvbiBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcEJhY2tib25lJz4NCiAgICAgIDxmb3JtIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwQmFja2JvbmUnPg0KICAgICAgICA8IS0tIEhFQURFUiAtLT4NCiAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0J1dHRvblByaW1hcnkgUG9zaXRpb25lckxlZnQnIGlkPSdCdXR0b25DYW5jZWwnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwQ2FuY2VsKCdQb3BVcEJhY2tib25lJywgJ1BvcFVwTW90aW9uJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBCYWNrYm9uZScsICdQb3BVcE1vdGlvbicsIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ0JhY2tib25lJywgYXJyYXlIZWFsdGhRdWVzdGlvbm5haXJlKSIgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRG9uZSc+DQogICAgICAgICAgPGgyPkt1ZXNpb25lciBHYW5nZ3VhbiBUdWxhbmcgQmVsYWthbmc8L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDZpJz5HYW5nZ3VhbiBmdW5nc2kvc2lzdGVtIFR1bGFuZywgT3RvdCwgU2VuZGksIEt1bGl0Pzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJZZXMnIGlkPSdXcmFwJz4xLiBBcGFrYWggQW5kYSBwZXJuYWggbWVuZGVyaXRhIGhlcm5pYS9zcG9uZHlsb3Npcy9rZWxhaW5hbiB0dWxhbmcgYmVsYWthbmcgbGFpbm55YT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NlcGFyYXRvcic+PC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJObycgbmFtZT0nUmFkaW9CdXR0b25CQkRpc3NvcmRlcicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQkJEaXNzb3JkZXJObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJyBmb3I9J1RleHREaXNzb3JkZXJEZXNjcmlwdGlvbic+SmlrYSAiWWEiLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBpZD0nVGV4dEJCRGlzc29yZGVyRGVzY3JpcHRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgSXRlbSc+Mi4gS2FwYW4gcGVydGFtYSBrYWxpIGtlbHVoYW4gdGVyc2VidXQgZGlyYXNha2FuPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUJCRmlyc3RDb21wbGFpbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz4zLiBTZWJlcmFwYSBzZXJpbmdrYWgga2VsdWhhbiB0ZXJzZWJ1dCB0aW1idWwgZGFsYW0gMTIgYnVsYW4gdGVyYWtoaXI\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRDb21wbGFpbkFtb3VudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtJz40LiBNb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgZGFuIHBhZGEgYmFnaWFuIHR1YnVoIG1hbmE\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRCQlBhaW5Mb2NhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPjUuIEFwYWthaCBha3Rpdml0YXMgQW5kYSBtZW5nYWxhbWkgaGFtYmF0YW4\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eVllcycgbmFtZT0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eU5vJyBuYW1lPSdSYWRpb0J1dHRvbkJCTGltaXRlZEFjdGl2aXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25CQkxpbWl0ZWRBY3Rpdml0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz5KaWthICJZYSIsIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBQb3NpdGlvbmVyTGVmdCBNYXJnaW4nIGlkPSdUZXh0QkJMaW1pdGVkQWN0aXZpdHlEZXNjcmlwdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Ni4gS2FwYW4gbWVuZ2FsYW1pIGhhbWJhdGFuPzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVCQkZpcnN0TGltaXRlZEFjdGl2aXR5JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz43LiBNb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgbWVudXJ1dCBEb2t0ZXIgYXBhIHBlbnllYmFiIGRpYWdub3NpcyAgZ2FuZ2d1YW4gdHVsYW5nIGJlbGFrYW5nIHRlcnNlYnV0PzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz4oS2VjZWxha2FhbiwgUHJvc2VzIHBlbnVhYW4sIGtlY2VsYWthYW4gc2V3YWt0dSBiZXJvbGFocmFnYSwgZGFuIHNlYmFnYWlueWEpLjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRCQkNhdXNlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+OC4gQXBha2FoIEFuZGEgcGVybmFoIG1lbmphbGFuaSBYLXJheSwgTVJJLCBhdGF1IHBlbWVyaWtzYWFuIGxhaW5ueWE\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkJCWFJheVllcycgbmFtZT0nUmFkaW9CdXR0b25CQlhSYXknIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQkJYUmF5WWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkJCWFJheU5vJyBuYW1lPSdSYWRpb0J1dHRvbkJCWFJheScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQkJYUmF5Tm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2EgIllhIiwgbW9ob24gYmVyaWthbiB0YW5nZ2FsIHBlbWVyaWtzYWFuOjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUJCWFJheScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz5Nb2hvbiBqZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgaGFzaWwgcGVtZXJpa3NhYW4ga2VzZWhhdGFuIHlhbmcgZGlsYWt1a2FuIHNlaHVidW5nYW4gZGVuZ2FuIGdhbmdndWFuIHR1bGFuZyBiZWxha2FuZyBpbmkuIChMYW1waXJrYW4gZm90b2tvcGkgaGFzaWwgcGVtZXJpa3NhYW4pPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRCQlhSYXlEZXNjcmlwdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+OS4gQXBha2FoIEFuZGEgbWVuZ2d1bmFrYW4gdG9uZ2thdCB1bnR1ayBiZXJqYWxhbiBhdGF1IGFsYXQgYmFudHUgbGFpbm55YT88L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbldhbGtpbmdTdGlja1llcycgbmFtZT0nUmFkaW9CdXR0b25XYWxraW5nU3RpY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25XYWxraW5nU3RpY2tZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbldhbGtpbmdTdGlja05vJyBuYW1lPSdSYWRpb0J1dHRvbldhbGtpbmdTdGljaycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25XYWxraW5nU3RpY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9ocj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2EgIllhIiwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgaWQ9J1RleHRCQldhbGtpbmdTdGlja0Rlc2NyaXB0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+MTAuIEFwYWthaCBBbmRhIHBlcm5haCBkaW9wZXJhc2kgYXRhdSBkaWFuanVya2FuIG9wZXJhc2kgdW50dWsga2VsYWluYW4gaW5pPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeVllcycgbmFtZT0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeU5vJyBuYW1lPSdSYWRpb0J1dHRvblN1Z2dlc3RTdXJnZXJ5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25TdWdnZXN0U3VyZ2VyeU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5KaWthICJZYSIsIG1vaG9uIGJlcmlrYW4gdGFuZ2dhbCBvcGVyYXNpOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J0RhdGVTdWdnZXN0U3VyZ2VyeScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5OYW1hIExlbmdrYXAgRG9rdGVyOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCVE9QRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5vLiBUZWxlcG9uL0hhbmRwaG9uZTo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQlRPUERvY3RvclRlbGVwaG9uZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCVE9QQ2xpbmljTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkFsYW1hdCBLbGluaWsvUnVtYWggU2FraXQ6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBNdWx0aSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQlRPUENsaW5pY0FkZHJlc3MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjExLiBNb2hvbiBqZWxhc2thbiBkZW5nYW4gcmluY2kgamVuaXMgcGVuZ29iYXRhbiBBbmRhIHNhYXQgaW5pIGRhbiBkYWh1bHUgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPkFwYWthaCBkaWJlcmkgc3VudGlrYW4\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE1lZGl1bSBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQkJJbmplY3Rpb25ZZXMnIG5hbWU9J1JhZGlvQnV0dG9uQkJJbmplY3Rpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25CQkluamVjdGlvblllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uQkJJbmplY3Rpb25ObycgbmFtZT0nUmFkaW9CdXR0b25CQkluamVjdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25CQkluamVjdGlvbk5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2JyPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nPlRhbmdnYWwgQmVyb2JhdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+TmFtYSBPYmF0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJz5Eb3NpczwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+RnJla3VlbnNpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2UxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3kxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2UyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3kyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2UzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3kzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQ0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2U0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3k0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRCQk1JRERMRURhdGVUcmVhdG1lbnQ1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVEcnVnTmFtZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQk1JRERMRURvc2U1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJNSURETEVGcmVxdWVuY3k1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgTGVuZ2thcCBEb2t0ZXI6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJCT1RUT01Eb2N0b3JOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Tm8uIFRlbGVwb24vSGFuZHBob25lOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCQk9UVE9NRG9jdG9yVGVsZXBob25lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBLbGluaWsvUnVtYWggU2FraXQ6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJCT1RUT01DbGluaWNOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCQk9UVE9NQ2xpbmljQWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MTIuIFNhYXQgaW5pIGRlbmdhbiBEb2t0ZXIgc2lhcGEgQW5kYSBtZWxha3VrYW4ga29udHJvbD88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRCQkJvdHRvbTJEb2N0b3JOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Tm8uIFRlbGVwb24vSGFuZHBob25lOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCQm90dG9tMkRvY3RvclRlbGVwaG9uZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5hbWEgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEJCQm90dG9tMkNsaW5pY05hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5BbGFtYXQgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbSBNYXJnaW4nIGlkPSdUZXh0QkJCb3R0b20yQ2xpbmljQWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MTMuIFNlYmVyYXBhIHNlcmluZyBBbmRhIGtvbnRyb2w\\\\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uJz4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRITWVkaWNhbENoZWNrWWVzJyBuYW1lPSdSYWRpb0J1dHRvblRITWVkaWNhbENoZWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVEhNZWRpY2FsQ2hlY2tZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRITWVkaWNhbENoZWNrTm8nIG5hbWU9J1JhZGlvQnV0dG9uVEhNZWRpY2FsQ2hlY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVEhNZWRpY2FsQ2hlY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUnPihKaWthICJZYSIsIG1vaG9uIG1lbGVuZ2thcGkgaGFzaWwgcGVtZXJpa3NhYW4gcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+SmVuaXMgUGVtZXJpa3NhYW48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5UYW5nZ2FsPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+SGFzaWw8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPlQzPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUM0RhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFQzUmVzdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5UNDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0VDREYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUNFJlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+VFNIPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRUU0hEYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRUU0hSZXN1bHQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkVDRzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0RUNHRGF0ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0RUNHUmVzdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5CaW9wc2k8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dEJpb3BzeURhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dEJpb3BzeVJlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+U2Nhbi9NUkkvVVNHPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHRTY2FuTVJJVVNHRGF0ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0U2Nhbk1SSVVTR1Jlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+Ni4gQXBha2FoIEFuZGEgcGVybmFoIGRpb3BlcmFzaSBhdGF1IGRpYW5qdXJrYW4gb3BlcmFzaSB1bnR1ayBrZWxhaW5hbiBpbmk\/PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25USE9wZXJhdGlvblllcycgbmFtZT0nUmFkaW9CdXR0b25USE9wZXJhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25USE9wZXJhdGlvblllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25USE9wZXJhdGlvbk5vJyBuYW1lPSdSYWRpb0J1dHRvblRIT3BlcmF0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25USE9wZXJhdGlvbk5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIGJlcmlrYW4gdGFuZ2dhbCBvcGVyYXNpOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlVEhPcGVyYXRpb25EYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TGFtYSBwZXJhd2F0YW4gZGkgUnVtYWggU2FraXQ6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nVGlueSBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRISG9zcGl0YWxUcmVhdG1lbnREdXJhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkhhcmk8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5KZW5pcyBPcGVyYXNpOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0VEhPcGVyYXRpb25UeXBlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRIRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPk5vLiBUZWxlcG9uL0hhbmRwaG9uZTo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRISG9zcGl0YWxUZWxlcGhvbmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5OYW1hIEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRISG9zcGl0YWxOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRISG9zcGl0YWxBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPk1vaG9uIG1lbGFtcGlya2FuIGhhc2lsIFBhdG9sb2dpIEFuYXRvbWkgb3BlcmFzaSB0ZXJzZWJ1dDwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTWVkaXVtIEl0ZW0nPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkF0dGFjaE9wZXJhdGlvblJlc3VsdFllcycgbmFtZT0nUmFkaW9CdXR0b25BdHRhY2hPcGVyYXRpb25SZXN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQXR0YWNoT3BlcmF0aW9uUmVzdWx0WWVzJz5BZGE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25BdHRhY2hPcGVyYXRpb25SZXN1bHRObycgbmFtZT0nUmFkaW9CdXR0b25BdHRhY2hPcGVyYXRpb25SZXN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkF0dGFjaE9wZXJhdGlvblJlc3VsdE5vJz5UaWRhayBhZGE8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+SmlrYSAiVGlkYWsiLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIE11bHRpIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEV4cGxhaW5PcGVyYXRpb25SZXN1bHRObycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz5NZW51cnV0IERva3RlciBBbmRhLCBiYWdhaW1hbmEgaGFzaWwgUGF0b2xvZ3kgQW5hdG9taSB0ZXJzZWJ1dD88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uUGF0aG9sb2d5UmVzdWx0Tm9ybWFsJyBuYW1lPSdSYWRpb0J1dHRvblBhdGhvbG9neVJlc3VsdCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdub3JtYWwnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBhdGhvbG9neVJlc3VsdE5vcm1hbCc+SmluYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25QYXRob2xvZ3lSZXN1bHREYW5nZXInIG5hbWU9J1JhZGlvQnV0dG9uUGF0aG9sb2d5UmVzdWx0JyB0eXBlPSdyYWRpbycgdmFsdWU9J2Rhbmdlcic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uUGF0aG9sb2d5UmVzdWx0RGFuZ2VyJz5HYW5hczwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblBhdGhvbG9neVJlc3VsdE90aGVycycgbmFtZT0nUmFkaW9CdXR0b25QYXRob2xvZ3lSZXN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblBhdGhvbG9neVJlc3VsdE90aGVycyc+TGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbSBNYXJnaW4nIGlkPSdUZXh0UGF0aG9sb2d5UmVzdWx0T3RoZXJEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz43LiBBcGFrYWggYWRhIHBlbmdvYmF0YW4gYXRhdSB0aW5kYWthbiB5YW5nIGRpbGFrdWthbiBzZXRlbGFoIG9wZXJhc2k\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbk1lZGljaW5lQWZ0ZXJPcGVyYXRpb25ZZXMnIG5hbWU9J1JhZGlvQnV0dG9uTWVkaWNpbmVBZnRlck9wZXJhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25NZWRpY2luZUFmdGVyT3BlcmF0aW9uWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbk1lZGljaW5lQWZ0ZXJPcGVyYXRpb25ObycgbmFtZT0nUmFkaW9CdXR0b25NZWRpY2luZUFmdGVyT3BlcmF0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25NZWRpY2luZUFmdGVyT3BlcmF0aW9uTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSAobmFtYSBvYmF0LCBkb3NpcyBkYW4gZnJla3VlbnNpIHBlbmdndW5hYW5ueWEpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPk9iYXQ8L2xhYmVsPg0KICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uVEhNZWRpY2luZU5hbWVZZXMnIG5hbWU9J1JhZGlvQnV0dG9uVEhNZWRpY2luZU5hbWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25USE1lZGljaW5lTmFtZVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uVEhNZWRpY2luZU5hbWVObycgbmFtZT0nUmFkaW9CdXR0b25USE1lZGljaW5lTmFtZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24nIGZvcj0nUmFkaW9CdXR0b25USE1lZGljaW5lTmFtZU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUSE1lZGljaW5lTmFtZScgcGxhY2Vob2xkZXI9JycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPlJhZGlvdGVyYXBpPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRIUmFkaW9UaGVyYXB5WWVzJyBuYW1lPSdSYWRpb0J1dHRvblRIUmFkaW9UaGVyYXB5JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVEhSYWRpb1RoZXJhcHlZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRIUmFkaW9UaGVyYXB5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uVEhSYWRpb1RoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVEhSYWRpb1RoZXJhcHlObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0VEhSYWRpb1RoZXJhcHknIHBsYWNlaG9sZGVyPScnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz5LZW1vdGVyYXBpPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRIQ2hlbW9UaGVyYXB5WWVzJyBuYW1lPSdSYWRpb0J1dHRvblRIQ2hlbW9UaGVyYXB5JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVEhDaGVtb1RoZXJhcHlZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRIQ2hlbW9UaGVyYXB5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uVEhDaGVtb1RoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uVEhDaGVtb1RoZXJhcHlObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0VEhDaGVtb1RoZXJhcHknIHBsYWNlaG9sZGVyPScnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz5MYWlubnlhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRIT3RoZXJUcmVhdG1lbnRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uVEhPdGhlclRyZWF0bWVudCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRIT3RoZXJUcmVhdG1lbnRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRIT3RoZXJUcmVhdG1lbnRObycgbmFtZT0nUmFkaW9CdXR0b25USE90aGVyVHJlYXRtZW50JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvblRIT3RoZXJUcmVhdG1lbnRObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0VEhPdGhlclRyZWF0bWVudCcgcGxhY2Vob2xkZXI9JycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz44LiBNb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFRIQWRkaXRpb25hbEluZm8nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGgyPlBFUk5ZQVRBQU4gREFOIEtVQVNBPC9oMj4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+U2F5YS9LYW1pIG1lbnlhdGFrYW4gYmFod2EgU2F5YS9LYW1pIHRlbGFoIG1lbWFoYW1pIGRhbiBtZW55ZXR1anVpIHVudHVrIG1lbmdpc2kgc2VjYXJhIGxlbmdrYXAgZGFuIGJlbmFyIHNlbXVhIGluZm9ybWFzaSBkYWxhbSBLdWVzaW9uZXIgR2FuZ2d1YW4gS2VsZW5qYXIgR29uZG9rIChUaXJvaWQpIGluaSBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YSBzZWJhZ2FpIGJhZ2lhbiBkYXJpIGtvbnRyYWsgICBhc3VyYW5zaSBKaXdhL0tlc2VoYXRhbi9LZWNlbGFrYWFuLjwvbGk+DQogICAgICAgICAgICA8bGk+U2F5YSBtZW1iZXJpIGt1YXNhIGtlcGFkYSBzZXRpYXAgRG9rdGVyL1J1bWFoIFNha2l0L0tsaW5pay9QdXNrZXNtYXMvTGFib3JhdG9yaXVtLCBwZXJ1c2FoYWFuIGFzdXJhbnNpIGF0YXUgcGVydXNhaGFhbiByZWFzdXJhbnNpLCBiYWRhbiwgaW5zdGFuc2kvbGVtYmFnYSBhdGF1IHBpaGFrIGxhaW4geWFuZyBtZW1wdW55YWkgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBTYXlhLCB1bnR1ayBtZW5ndW5na2Fwa2FuIGtlcGFkYSBQZW5hbmdndW5nIG1lbmdlbmFpIHNlbXVhIGtldGVyYW5nYW4gdGVudGFuZyBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIFNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU1BBSiBkYW4gYWthbiBtZW5naWthdCBTYXlhLCBQZW5lcmltYSBNYW5mYWF0L0FobGkgV2FyaXMsIGRhbiBrZWx1YXJnYSBTYXlhIChqaWthIGFkYSkuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IFNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggU2F5YSBtZW5pbmdnYWwgZHVuaWEuIFNhbGluYW4vZm90b2tvcGkgZGFyaSBzdXJhdCBrdWFzYSBpbmkgc2FtYSBzYWggYmVybGFrdW55YSBzZXBlcnRpIGRva3VtZW4gYXNsaS48L2xpPg0KICAgICAgICAgICAgPGxpPkFwYWJpbGEgaW5mb3JtYXNpIHRlcnNlYnV0IHlhbmcgU2F5YS9LYW1pIGJlcmlrYW4gdGlkYWsgYmVuYXIsIG1ha2EgUGVuYW5nZ3VuZyBiZXJoYWsgbWVtYmF0YWxrYW4gUG9saXMgU2F5YS9LYW1pIHNlamFrIGF3YWwuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgPC9mb3JtPg0KICAgIDwvc2VjdGlvbj4NCiAgICA8c2VjdGlvbiBjbGFzcz0nUG9wVXAnIGlkPSdQb3BVcENlbGwnPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBDZWxsJz4NCiAgICAgICAgPCEtLSBIRUFERVIgLS0+DQogICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJMZWZ0JyBpZD0nQnV0dG9uQ2FuY2VsJyBvbmNsaWNrPSJidXR0b25Qb3BVcENhbmNlbCgnUG9wVXBDZWxsJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblBvcFVwRG9uZSgnUG9wVXBDZWxsJywgc3RyaW5nUGFnZUluZml4VHlwZUN1cnJlbnQgKyAnQ2VsbCcsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSwgWydEYXRlJyArIHN0cmluZ1BhZ2VJbmZpeFR5cGVDdXJyZW50ICsgJ1R1bW9yJyArICdGaXJzdERpYWdub3NlJ10pIiB0eXBlPSdidXR0b24nIHZhbHVlPSdEb25lJz4NCiAgICAgICAgICA8aDI+UGVydGFueWFhbiBLZXNlaGF0YW48L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDZsJz5HYW5nZ3VhbiBmdW5nc2kgUGVydHVtYnVoYW4gU2VsLCBUdW1vciwgS2lzdGEsIEthbmtlciwgQmVuam9sYW4gcGFkYSBwZXJtdWthYW4ga3VsaXQgYXRhdSBwZXJ0dW1idWhhbiBhYm5vcm1hbCBsYWlubnlhPzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24nPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5JyBpZD0nQnV0dG9uVHVtb3InIG9uY2xpY2s9ImJ1dHRvblBvcFVwTmF2aWdhdGlvbih0aGlzLmlkLCAnUG9wVXBDZWxsJywgJ1BvcFVwVHVtb3InLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdUdW1vcicsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0t1ZXNpb25lciBUdW1vcic+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSc+c2lsYWhrYW4gbWVtYmVyaWthbiByaW5jaWFuIGxlYmloIGxhbmp1dDwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0nRnVsbCBNdWx0aScgaWQ9J0FyZWFBbWFuZG1lbnREZXRhaWwnPjwvdGV4dGFyZWE+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlJz4obWFrc2ltdW0gMjUwIGthcmFrdGVyKTwvbGFiZWw+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICA8L2Zvcm0+DQogICAgPC9zZWN0aW9uPg0KICAgIDxzZWN0aW9uIGNsYXNzPSdQb3BVcCcgaWQ9J1BvcFVwVHVtb3InPg0KICAgICAgPGZvcm0gY2xhc3M9J1BvcFVwJyBpZD0nUG9wVXBUdW1vcic+DQogICAgICAgIDwhLS0gSEVBREVSIC0tPg0KICAgICAgICA8aGVhZGVyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nQnV0dG9uUHJpbWFyeSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0J1dHRvbkNhbmNlbCcgb25jbGljaz0iYnV0dG9uU3ViUG9wVXBDYW5jZWwoJ1BvcFVwVHVtb3InLCAnUG9wVXBDZWxsJykiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0NhbmNlbCc+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdCdXR0b25QcmltYXJ5IFBvc2l0aW9uZXJSaWdodCcgaWQ9J0J1dHRvbkRvbmUnIG9uY2xpY2s9ImJ1dHRvblN1YlBvcFVwRG9uZSgnUG9wVXBUdW1vcicsICdQb3BVcENlbGwnLCBzdHJpbmdQYWdlSW5maXhUeXBlQ3VycmVudCArICdUdW1vcicsIGFycmF5SGVhbHRoUXVlc3Rpb25uYWlyZSkiIHR5cGU9J2J1dHRvbicgdmFsdWU9J0RvbmUnPg0KICAgICAgICAgIDxoMj5LdWVzaW9uZXIgVHVtb3I8L2gyPg0KICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTXVsdGkgU2luZ2xlIDZsJz5HYW5nZ3VhbiBmdW5nc2kgUGVydHVtYnVoYW4gU2VsLCBUdW1vciwgS2lzdGEsIEthbmtlciwgQmVuam9sYW4gcGFkYSBwZXJtdWthYW4ga3VsaXQgYXRhdSBwZXJ0dW1idWhhbiBhYm5vcm1hbCBsYWlubnlhPzwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz4xLiBLYXBhbiBwZXJ0YW1hIGthbGkgZGlrZXRhaHVpIGFkYW55YSB0dW1vcj88L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlRmlyc3REaWFnbm9zZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J21lZGl1bSBTaW5nbGUgSXRlbSc+Mi4gUGFkYSBiYWdpYW4gdHVidWggbWFuYSB0dW1vciB0ZXJzZWJ1dCB0dW1idWg\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0V2hlcmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aHI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdtZWRpdW0gU2luZ2xlIEl0ZW0nPjMuIE1vaG9uIHNlYnV0a2FuIGRpYWdub3NpcyBwYXN0aSBkYXJpIHR1bW9yIHRlcnNlYnV0LjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dERpYWdub3NlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+NC4gQXBha2FoIHR1bW9yIHRlcnNlYnV0IHRlbGFoIGRpYW5na2F0LyBkaW9wZXJhc2k\\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBNZWRpdW0gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DdXJyZW50WWVzJyBuYW1lPSdSYWRpb0J1dHRvbkN1cnJlbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ3VycmVudFllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2VwYXJhdG9yJz48L2Rpdj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25DdXJyZW50Tm8nIG5hbWU9J1JhZGlvQnV0dG9uQ3VycmVudCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uJyBmb3I9J1JhZGlvQnV0dG9uQ3VycmVudE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+VGFuZ2dhbCB0ZXJha2hpciBwZXJhd2F0YW46PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgSXRlbSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlTGFzdFRoZXJhcHknIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+QWxhc2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0UmVhc29uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nPlBlbmdvYmF0YW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRUcmVhdG1lbnQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+QmVyYXBhIGthbGkgZGFsYW0gMSAoc2F0dSkgdGFodW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRIb3dPZnRlbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJz5OYW1hIExlbmdrYXAgRG9rdGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0RG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJz5Oby4gVGVsZXBvbi9IYW5kcGhvbmU6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTG9uZyBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0VGVsZXBob25lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nPk5hbWEgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xvbmcgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dENsaW5pY05hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbic+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRDbGluaWNBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+Ni4gQXBha2FoIEFuZGEgcGVybmFoIHRpZGFrIG1hc3VrIGtlcmphIGthcmVuYSBrb25kaXNpIGluaT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE1lZGl1bSBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkxlYXZlWWVzJyBuYW1lPSdSYWRpb0J1dHRvbkxlYXZlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkxlYXZlWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdTZXBhcmF0b3InPjwvZGl2Pg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvbkxlYXZlTm8nIG5hbWU9J1JhZGlvQnV0dG9uTGVhdmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbicgZm9yPSdSYWRpb0J1dHRvbkxlYXZlTm8nPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdXcmFwJz5KaWthIOKAnFlh4oCdLCBrYXBhbjo8L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nRGF0ZUxlYXZlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCBGaXJzdEluZGVudCc+PC9sYWJlbD4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1dyYXAnPmRhbiBiZXJhcGEgbGFtYT88L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dExlYXZlRHVyYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IEZpcnN0SW5kZW50Jz48L2xhYmVsPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nV3JhcCc+aGFyaTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxocj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgSXRlbSc+Ny4gU2VidXRrYW4ga2FwYW4gdGVyYWtoaXIga2FsaSBBbmRhIG1lbGFrdWthbiBrb25zdWx0YXNpIGRlbmdhbiBkb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nPk1vaG9uIGxlbmdrYXBpIHBlcnRhbnlhYW4gcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgZGFuIG1vaG9uIGRpbGFtcGlya2FuIGZvdG9rb3BpIGhhc2lsIHBlbWVyaWtzYWFuLjwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gQ2VudGVyIE1hcmdpbic+SmVuaXMgUGVtZXJpa3NhYW48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyIE1hcmdpbic+VGFuZ2dhbCBQZW1lcmlrc2FhbjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXIgTWFyZ2luJz5IYXNpbCBQZW1lcmlrc2FhbjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEtpbmRPZkNoZWNraW5nMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0RGF0ZU9mQ2hlY2tpbmcxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSZXN1bHRPZkNoZWNraW5nMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEtpbmRPZkNoZWNraW5nMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0RGF0ZU9mQ2hlY2tpbmcyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSZXN1bHRPZkNoZWNraW5nMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dEtpbmRPZkNoZWNraW5nMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdUZXh0RGF0ZU9mQ2hlY2tpbmczJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRSZXN1bHRPZkNoZWNraW5nMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRLaW5kT2ZDaGVja2luZzQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBkYXRhLWZpZWxkPSdkYXRlJyBpZD0nVGV4dERhdGVPZkNoZWNraW5nNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UmVzdWx0T2ZDaGVja2luZzQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0S2luZE9mQ2hlY2tpbmc1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgZGF0YS1maWVsZD0nZGF0ZScgaWQ9J1RleHREYXRlT2ZDaGVja2luZzUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFJlc3VsdE9mQ2hlY2tpbmc1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nbWVkaXVtIFNpbmdsZSBJdGVtJz44LiBNb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgTXVsdGkgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dEFkZGl0aW9uYWxJbmZvJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGhyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICA8aDI+UEVSTllBVEFBTiBEQU4gS1VBU0E8L2gyPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT5TYXlhIG1lbnlhdGFrYW4gZGVuZ2FuIHNlYmVuYXJueWEgYmFod2Egc2VtdWEgcGVybnlhdGFhbiBkYW4gamF3YWJhbiBkaSBhdGFzIGFkYWxhaCBsZW5na2FwIGRhbiBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YS48L2xpPg0KICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci8gUnVtYWggU2FraXQvIEtsaW5pay8gUHVza2VzbWFzLyBsYWJvcmF0b3JpdW0sIHBlcnVzYWhhYW4gYXN1cmFuc2kgYXRhdSBwZXJ1c2FoYWFuIHJlYXN1cmFuc2ksIGJhZGFuLCBpbnN0YW5zaS8gbGVtYmFnYSBhdGF1IHBpaGFrIGxhaW4geWFuZyBtZW1wdW55YWkgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBzYXlhLCB1bnR1ayBtZW5ndW5na2Fwa2FuIGtlcGFkYSBQZW5hbmdndW5nIHNlbXVhIGtldGVyYW5nYW4gdGVudGFuZyBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU3VyYXQgUGVuZ2FqdWFuIEFzdXJhbnNpIEppd2EgZGFuIGFrYW4gbWVuZ2lrYXQgc2F5YSwgYWhsaSB3YXJpcywgZGFuIGtlbHVhcmdhIHNheWEuPC9saT4NCiAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IHNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggc2F5YSBtZW5pbmdnYWwuIFNhbGluYW4vIGZvdG9rb3BpIGRhcmkgc3VyYXQga3Vhc2EgaW5pIHNhbWEgc2FoIGJlcmxha3VueWEgc2VwZXJ0aSBkb2t1bWVuIGFzbGkuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L3NlY3Rpb24+DQogICAgPGRpdiBpZD0nQm94RGF0ZSc+PC9kaXY+DQogICAgPCEtLSAvICVkaXYjQm94VGltZSAtLT4NCiAgPC9tYWluPg0KPC9odG1sPg0K","DateCreated":"\/Date(1468774800000+0700)\/","FileName":"20160803113606.html","FileNameIndo":"20160803113606.html","FolderName":"20160803","Id":9,"SPAJId":1,"SPAJSection":"KS_IN","Status":"A","ValidDate":"\/Date(1468774800000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJDaGVzdFBhaW5BdHRhY2tEdXJhdGlvblNlY29uZCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQb2xpY3lIb2xkZXJDaGVzdFBhaW5BdHRhY2tEdXJhdGlvblNlY29uZCc+RGV0aWsgLzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQ2hlc3RQYWluQXR0YWNrRHVyYXRpb25NaW51dGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUG9saWN5SG9sZGVyQ2hlc3RQYWluQXR0YWNrRHVyYXRpb25NaW51dGUnPk1lbml0IC88L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckNoZXN0UGFpbkF0dGFja0R1cmF0aW9uSG91cicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQb2xpY3lIb2xkZXJDaGVzdFBhaW5BdHRhY2tEdXJhdGlvbkhvdXInPkphbTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4zLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJDaGVzdFBhaW5OZXh0QXR0YWNrTm8nPkFwYWthaCBhZGEgc2VyYW5nYW4gbGFuanV0YW4gc2VzdWRhaG55YT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2hlc3RQYWluTmV4dEF0dGFja05vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2hlc3RQYWluTmV4dEF0dGFja05vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNoZXN0UGFpbk5leHRBdHRhY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2hlc3RQYWluTmV4dEF0dGFja1llcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNoZXN0UGFpbk5leHRBdHRhY2tZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQ2hlc3RQYWluTmV4dEF0dGFjaycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVBvbGljeUhvbGRlckNoZXN0UGFpbkxhc3RBdHRhY2tEYXknPlRhbmdnYWwgc2VyYW5nYW4gdGVyYWtoaXI6PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQ2hlc3RQYWluTGFzdEF0dGFja1llYXInPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJDaGVzdFBhaW5MYXN0QXR0YWNrTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJDaGVzdFBhaW5MYXN0QXR0YWNrRGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQb2xpY3lIb2xkZXJDaGVzdFBhaW5MYXN0QXR0YWNrRHVyYXRpb25TZWNvbmQnPkJlcmFwYSBsYW1hIHNlcmFuZ2FuIHRlcnNlYnV0IGJlcmxhbmdzdW5nPzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQ2hlc3RQYWluTGFzdEF0dGFja0R1cmF0aW9uU2Vjb25kJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVBvbGljeUhvbGRlckNoZXN0UGFpbkxhc3RBdHRhY2tEdXJhdGlvblNlY29uZCc+RGV0aWsgLzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQ2hlc3RQYWluTGFzdEF0dGFja0R1cmF0aW9uTWludXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVBvbGljeUhvbGRlckNoZXN0UGFpbkxhc3RBdHRhY2tEdXJhdGlvbk1pbnV0ZSc+TWVuaXQgLzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQ2hlc3RQYWluTGFzdEF0dGFja0R1cmF0aW9uSG91cicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQb2xpY3lIb2xkZXJDaGVzdFBhaW5MYXN0QXR0YWNrRHVyYXRpb25Ib3VyJz5KYW08L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBXcmFwIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdOdW1iZXJQb2xpY3lIb2xkZXJDaGVzdFBhaW5DdXJyZW50QXR0YWNrVGltZXMnPkhpbmdnYSBzYWF0IGluaSBzZXJhbmdhbiBzdWRhaCB0ZXJqYWRpIHNlYmFueWFrOjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdOdW1iZXJQb2xpY3lIb2xkZXJDaGVzdFBhaW5DdXJyZW50QXR0YWNrVGltZXMnIHR5cGU9J251bWJlcic+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J051bWJlclBvbGljeUhvbGRlckNoZXN0UGFpbkN1cnJlbnRBdHRhY2tUaW1lcyc+S2FsaTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz40Ljwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVBvbGljeUhvbGRlckNoZXN0UGFpbkxhc3RBcmlzZURheSc+S2FwYW4gdGVyYWtoaXIga2FsaSBueWVyaSBkYWRhIHRlcmphZGk\\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_chestpain.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_nyeridada.html","FolderName":"20160803","Id":11,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\\\/PC9zcGFuPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nTnVtYmVyUG9saWN5SG9sZGVyRGlnZXN0RGV0YWlsQWJzZW50U2luY2VEYXlzJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J051bWJlclBvbGljeUhvbGRlckRpZ2VzdERldGFpbEFic2VudFNpbmNlRGF5cyc+PC9sYWJlbD4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+aGFyaS48L3NwYW4+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyRml4IFNpbmdsZSBJdGVtJz4xMy48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgSXRlbScgZm9yPSdBcmVhUG9saWN5SG9sZGVyRGlnZXN0RGV0YWlsSGVhbHRoQ29uZGl0aW9uJz5Nb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J0FyZWFQb2xpY3lIb2xkZXJEaWdlc3REZXRhaWxIZWFsdGhDb25kaXRpb24nPjwvdGV4dGFyZWE+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkRlY2xhcmF0aW9uJz4NCiAgICAgICAgICA8aDI+UGVybnlhdGFhbiBEYW4gS3Vhc2E8L2gyPg0KICAgICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgICAgICA8b2w+DQogICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgU2F5YS9LYW1pIG1lbnlhdGFrYW4gYmFod2EgU2F5YS9LYW1pIHRlbGFoIG1lbWFoYW1pIGRhbiBtZW55ZXR1anVpIHVudHVrIG1lbmdpc2kgc2VjYXJhIGxlbmdrYXAgZGFuIGJlbmFyIHNlbXVhIGluZm9ybWFzaSBkYWxhbQ0KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1F1ZXN0aW9ubmFpcmVUaXRsZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgaW5pIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhIHNlYmFnYWkgYmFnaWFuIGRhcmkga29udHJhayBhc3VyYW5zaSBKaXdhL0tlc2VoYXRhbi9LZWNlbGFrYWFuLg0KICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci9SdW1haCBTYWtpdC9LbGluaWsvUHVza2VzbWFzL0xhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpL2xlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gU2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBtZW5nZW5haSBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBTYXlhLjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSBtZXJ1cGFrYW4gaGFsIHlhbmcgdGlkYWsgdGVycGlzYWhrYW4gZGFyaSBTUEFKIGRhbiBha2FuIG1lbmdpa2F0IFNheWEsIFBlbmVyaW1hIE1hbmZhYXQvQWhsaSBXYXJpcywgZGFuIGtlbHVhcmdhIFNheWEgKGppa2EgYWRhKTwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgU2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBTYXlhIG1lbmluZ2dhbCBkdW5pYS4gU2FsaW5hbi9mb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkFwYWJpbGEgaW5mb3JtYXNpIHRlcnNlYnV0IHlhbmcgU2F5YS9LYW1pIGJlcmlrYW4gdGlkYWsgYmVuYXIsIG1ha2EgUGVuYW5nZ3VuZyBiZXJoYWsgbWVtYmF0YWxrYW4gUG9saXMgU2F5YS9LYW1pIHNlamFrIGF3YWwuPC9saT4NCiAgICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRTaWduZWRQbGFjZSc+RGl0YW5kYXRhbmdhbmk8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFNpZ25lZFBsYWNlJyByZWFkb25seT0ndHJ1ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+PC9zcGFuPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVTaWduZWREYXknPlRhbmdnYWw8L2xhYmVsPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZERheSc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlU2lnbmVkTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZFllYXInPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTaWduYXR1cmUgSXRlbTEnPg0KICAgICAgICAgICAgICAgIDxpbWc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05hbWUnIGlkPSdUZXh0UG9saWN5SG9sZGVyU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgKENhbG9uKSBQZW1lZ2FuZyBQb2xpcw0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NpZ25hdHVyZSBJdGVtMSc+DQogICAgICAgICAgICAgICAgPGltZz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTmFtZScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRTaWduYXR1cmUnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGVzY3JpcHRpb24nPg0KICAgICAgICAgICAgICAgICAgTmFtYSBMZW5na2FwICYgVGFuZGEgdGFuZ2FuDQogICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICAoQ2Fsb24pIFRlcnRhbmdndW5nDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2lnbmF0dXJlIEl0ZW0xJz4NCiAgICAgICAgICAgICAgICA8aW1nPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOYW1lJyBpZD0nVGV4dFNhbGVzU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVuYWdhIFBlbmp1YWwNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgPC9mb3JtPg0KICAgIDwvbWFpbj4NCiAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkZvb3Rlcic+DQogICAgICA8Zm9vdGVyPg0KICAgICAgICA8aW1nIHNyYz0nLi4vLi4vUmVzb3VyY2UvSWNvbi9UdXJxb2lzZS9pY29uX2hhbG9iY2Euc3ZnJz4NCiAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlcic+UFQgQXN1cmFuc2kgSml3YSBCQ0EgdGVyZGFmdGFyIGRhbiBkaWF3YXNpIG9sZWggT3Rvcml0YXMgSmFzYSBLZXVhbmdhbjwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCc+PC9zcGFuPg0KICAgICAgPC9mb290ZXI+DQogICAgPC9zZWN0aW9uPg0KICA8L2JvZHk+DQo8L2h0bWw+DQo=","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_digestion.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_pencernaan.html","FolderName":"20160803","Id":13,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_amandment.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_amandemen.html","FolderName":"20160803","Id":14,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_purchasesummary.html","FileNameIndo":"page_healthquestionnairepdf_purchasesummary.html","FolderName":"20160803","Id":16,"SPAJId":1,"SPAJSection":"PDF","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_tumor.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_tumor.html","FolderName":"20160803","Id":17,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBJdGVtIE51bWJlckluZGVudCc+KE1vaG9uIGRpbGFtcGlya2FuIGZvdG9rb3BpIGhhc2lsIHBlbWVyaWtzYWFuKS48L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvYnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlclJlc3BpcmF0b3J5RGV0YWlsTWVkaWNhbENoZWNrUmVzdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25Gb290ZXInIHN0eWxlPSdtYXJnaW4tdG9wOiAzMzBweDsnPg0KICAgICAgICAgICAgPGZvb3Rlcj4NCiAgICAgICAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0ljb24vVHVycW9pc2UvaWNvbl9oYWxvYmNhLnN2Zyc+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXInPlBUIEFzdXJhbnNpIEppd2EgQkNBIHRlcmRhZnRhciBkYW4gZGlhd2FzaSBvbGVoIE90b3JpdGFzIEphc2EgS2V1YW5nYW48L3NwYW4+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXRhaWwnPjwvc3Bhbj4NCiAgICAgICAgICAgIDwvZm9vdGVyPg0KICAgICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgICA8aGVhZGVyPg0KICAgICAgICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25IZWFkZXInIHN0eWxlPSdtYXJnaW4tdG9wOiA4MHB4OyBwb3NpdGlvbjogcmVsYXRpdmU7IHRvcDogODBweDsgZGlzcGxheTogYmxvY2s7Jz4NCiAgICAgICAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0xvZ28vbG9nb19iY2FsaWZlX3ByaW1hcnkuc3ZnJz4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQWRkcmVzcyc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlciBQb3NpdGlvbmVyUmlnaHQnPlBUIEFzdXJhbnNpIEppd2EgQkNBPC9zcGFuPg0KICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICAgICAgICBDaGFzZSBQbGF6YSBMYW50YWkgMjIgfCBKbC4gSmVuZC4gU3VkaXJtYW4gS2F2IDIxLCBKYWthcnRhIDEyOTIwDQogICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICBUZWxlcG9uOiAoMDIxKSAyMSA4ODggMDAwIHwgRmFrczogKDAyMSkgMjkzNCA3OTc3IHwgRW1haWw6IGN1c3RvbWVyQGJjYWxpZmUuY28uaWQNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPC9oZWFkZXI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnIHN0eWxlPSdtYXJnaW4tdG9wOiA4MHB4Oyc+OC48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVBvbGljeUhvbGRlclJlc3BpcmF0b3J5RGV0YWlsQ29uc3VsdERheScgc3R5bGU9J21hcmdpbi10b3A6IDgwcHg7Jz5Nb2hvbiBsZW5na2FwaSBkYXRhIERva3RlciBkYW4gUnVtYWggU2FraXQgeWFuZyBiaWFzYSBkaWt1bmp1bmdpIHVudHVrIGdhbmdndWFuIHBlcm5hcGFzYW4uPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUG9saWN5SG9sZGVyUmVzcGlyYXRvcnlEZXRhaWxDb25zdWx0RGF5Jz5UYW5nZ2FsIHRlcmFraGlyIGtvbnN1bHRhc2k6PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJSZXNwaXJhdG9yeURldGFpbENvbnN1bHREYXknPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyUmVzcGlyYXRvcnlEZXRhaWxDb25zdWx0TW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyUmVzcGlyYXRvcnlEZXRhaWxDb25zdWx0WWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlclJlc3BpcmF0b3J5RGV0YWlsQ29uc3VsdERpYWdub3NlJz5EaWFnbm9zYTo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJSZXNwaXJhdG9yeURldGFpbENvbnN1bHREaWFnbm9zZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJSZXNwaXJhdG9yeURldGFpbENvbnN1bHREb2N0b3JOYW1lJz5OYW1hIExlbmdrYXAgRG9rdGVyOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlclJlc3BpcmF0b3J5RGV0YWlsQ29uc3VsdERvY3Rvck5hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyUmVzcGlyYXRvcnlEZXRhaWxDb25zdWx0UGhvbmUnPk5vLiBUZWxlcG9uL0hhbmRwaG9uZTo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJSZXNwaXJhdG9yeURldGFpbENvbnN1bHRQaG9uZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJSZXNwaXJhdG9yeURldGFpbENvbnN1bHRIb3NwaXRhbE5hbWUnPk5hbWEgS2xpbmlrL1J1bWFoIFNha2l0OjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlclJlc3BpcmF0b3J5RGV0YWlsQ29uc3VsdEhvc3BpdGFsTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gTXVsdGkgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlclJlc3BpcmF0b3J5RGV0YWlsQ29uc3VsdEhvc3BpdGFsQWRkcmVzcyc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJSZXNwaXJhdG9yeURldGFpbENvbnN1bHRIb3NwaXRhbEFkZHJlc3MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlckZpeCBTaW5nbGUgSXRlbScgc3R5bGU9J21hcmdpbi10b3A6IDMwcHg7Jz45Ljwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBJdGVtJyBzdHlsZT0nbWFyZ2luLXRvcDogMzBweDsnPk1vaG9uIEFuZGEgbWVtYmVyaWthbiBpbmZvcm1hc2kgdGFtYmFoYW4gbGFpbiB5YW5nIG1lbnVydXQgQW5kYSBwZW50aW5nIG11bmdraW4gZGFwYXQgbWVtYmFudHUgcHJvc2VzIHBlbmdhanVhbiBhc3VyYW5zaSBpbmkgZGVuZ2FuIG1lbGVuZ2thcGkga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJSZXNwaXJhdG9yeURldGFpbEFkZGl0aW9uYWxJbmZvJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRGVjbGFyYXRpb24nPg0KICAgICAgICAgIDxoMj5QZXJueWF0YWFuIERhbiBLdWFzYTwvaDI+DQogICAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nTm90ZSc+DQogICAgICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICBTYXlhL0thbWkgbWVueWF0YWthbiBiYWh3YSBTYXlhL0thbWkgdGVsYWggbWVtYWhhbWkgZGFuIG1lbnlldHVqdWkgdW50dWsgbWVuZ2lzaSBzZWNhcmEgbGVuZ2thcCBkYW4gYmVuYXIgc2VtdWEgaW5mb3JtYXNpIGRhbGFtDQogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nUXVlc3Rpb25uYWlyZVRpdGxlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgICBpbmkgc2VzdWFpIGRlbmdhbiBrZWFkYWFuIHNlYmVuYXJueWEgc2ViYWdhaSBiYWdpYW4gZGFyaSBrb250cmFrIGFzdXJhbnNpIEppd2EvS2VzZWhhdGFuL0tlY2VsYWthYW4uDQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+U2F5YSBtZW1iZXJpIGt1YXNhIGtlcGFkYSBzZXRpYXAgRG9rdGVyL1J1bWFoIFNha2l0L0tsaW5pay9QdXNrZXNtYXMvTGFib3JhdG9yaXVtLCBwZXJ1c2FoYWFuIGFzdXJhbnNpIGF0YXUgcGVydXNhaGFhbiByZWFzdXJhbnNpLCBiYWRhbiwgaW5zdGFuc2kvbGVtYmFnYSBhdGF1IHBpaGFrIGxhaW4geWFuZyBtZW1wdW55YWkgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBTYXlhLCB1bnR1ayBtZW5ndW5na2Fwa2FuIGtlcGFkYSBQZW5hbmdndW5nIG1lbmdlbmFpIHNlbXVhIGtldGVyYW5nYW4gdGVudGFuZyBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIFNheWEuPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIG1lcnVwYWthbiBoYWwgeWFuZyB0aWRhayB0ZXJwaXNhaGthbiBkYXJpIFNQQUogZGFuIGFrYW4gbWVuZ2lrYXQgU2F5YSwgUGVuZXJpbWEgTWFuZmFhdC9BaGxpIFdhcmlzLCBkYW4ga2VsdWFyZ2EgU2F5YSAoamlrYSBhZGEpPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+S3Vhc2EgaW5pIHRldGFwIGJlcmxha3UgcGFkYSB3YWt0dSBTYXlhIG1hc2loIGhpZHVwIG1hdXB1biBzZXN1ZGFoIFNheWEgbWVuaW5nZ2FsIGR1bmlhLiBTYWxpbmFuL2ZvdG9rb3BpIGRhcmkgc3VyYXQga3Vhc2EgaW5pIHNhbWEgc2FoIGJlcmxha3VueWEgc2VwZXJ0aSBkb2t1bWVuIGFzbGkuPC9saT4NCiAgICAgICAgICAgICAgICA8bGk+QXBhYmlsYSBpbmZvcm1hc2kgdGVyc2VidXQgeWFuZyBTYXlhL0thbWkgYmVyaWthbiB0aWRhayBiZW5hciwgbWFrYSBQZW5hbmdndW5nIGJlcmhhayBtZW1iYXRhbGthbiBQb2xpcyBTYXlhL0thbWkgc2VqYWsgYXdhbC48L2xpPg0KICAgICAgICAgICAgICA8L29sPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFNpZ25lZFBsYWNlJz5EaXRhbmRhdGFuZ2FuaTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0U2lnbmVkUGxhY2UnIHJlYWRvbmx5PSd0cnVlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVNpZ25lZERheSc+VGFuZ2dhbDwvbGFiZWw+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+PC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlU2lnbmVkRGF5Jz48L3RhYmxlPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVTaWduZWRNb250aCc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlU2lnbmVkWWVhcic+PC90YWJsZT4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NpZ25hdHVyZSBJdGVtMSc+DQogICAgICAgICAgICAgICAgPGltZz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTmFtZScgaWQ9J1RleHRQb2xpY3lIb2xkZXJTaWduYXR1cmUnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGVzY3JpcHRpb24nPg0KICAgICAgICAgICAgICAgICAgTmFtYSBMZW5na2FwICYgVGFuZGEgdGFuZ2FuDQogICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICAoQ2Fsb24pIFBlbWVnYW5nIFBvbGlzDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2lnbmF0dXJlIEl0ZW0xJz4NCiAgICAgICAgICAgICAgICA8aW1nPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOYW1lJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFNpZ25hdHVyZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXNjcmlwdGlvbic+DQogICAgICAgICAgICAgICAgICBOYW1hIExlbmdrYXAgJiBUYW5kYSB0YW5nYW4NCiAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgIChDYWxvbikgVGVydGFuZ2d1bmcNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTaWduYXR1cmUgSXRlbTEnPg0KICAgICAgICAgICAgICAgIDxpbWc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05hbWUnIGlkPSdUZXh0U2FsZXNTaWduYXR1cmUnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGVzY3JpcHRpb24nPg0KICAgICAgICAgICAgICAgICAgTmFtYSBMZW5na2FwICYgVGFuZGEgdGFuZ2FuDQogICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICBUZW5hZ2EgUGVuanVhbA0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8L3NlY3Rpb24+DQogICAgICA8L2Zvcm0+DQogICAgPC9tYWluPg0KICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRm9vdGVyJz4NCiAgICAgIDxmb290ZXI+DQogICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9JY29uL1R1cnFvaXNlL2ljb25faGFsb2JjYS5zdmcnPg0KICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyJz5QVCBBc3VyYW5zaSBKaXdhIEJDQSB0ZXJkYWZ0YXIgZGFuIGRpYXdhc2kgb2xlaCBPdG9yaXRhcyBKYXNhIEtldWFuZ2FuPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsJz48L3NwYW4+DQogICAgICA8L2Zvb3Rlcj4NCiAgICA8L3NlY3Rpb24+DQogIDwvYm9keT4NCjwvaHRtbD4NCg==","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_respiratory.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_pernapasan.html","FolderName":"20160803","Id":18,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckh5cGVydGVuc2lvbkNoZWNrUmVhc29uUm91dGluZScgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25DaGVja1JlYXNvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdyb3V0aW5lJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySHlwZXJ0ZW5zaW9uQ2hlY2tSZWFzb25Sb3V0aW5lJz5QZW1lcmlrc2FhbiBSdXRpbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25DaGVja1JlYXNvbk90aGVycycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25DaGVja1JlYXNvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvdGhlcic+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckh5cGVydGVuc2lvbkNoZWNrUmVhc29uT3RoZXJzJz5LZWx1aGFuIExhaW5ueWEgKG1vaG9uIGplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaSkuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVySHlwZXJ0ZW5zaW9uQ2hlY2tSZWFzb25PdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySHlwZXJ0ZW5zaW9uRG9jdG9yQ29uc3VsdCc+ZC4gQXBha2FoIGRpa29uc3VsdGFzaWthbiBrZSBEb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySHlwZXJ0ZW5zaW9uRG9jdG9yQ29uc3VsdE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySHlwZXJ0ZW5zaW9uRG9jdG9yQ29uc3VsdE5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckh5cGVydGVuc2lvbkRvY3RvckNvbnN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckh5cGVydGVuc2lvbkRvY3RvckNvbnN1bHRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25Eb2N0b3JDb25zdWx0WWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckh5cGVydGVuc2lvbkRvY3RvckNvbnN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J051bWJlckluZGVudCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmdpc2kga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlckh5cGVydGVuc2lvbkhUVVBEb2N0b3JOYW1lJz5OYW1hIExlbmdrYXAgRG9rdGVyOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVySHlwZXJ0ZW5zaW9uSFRVUERvY3Rvck5hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25IVFVQRG9jdG9yQWRkcmVzcyc+QWxhbWF0IExlbmdrYXAgRG9rdGVyOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVySHlwZXJ0ZW5zaW9uSFRVUERvY3RvckFkZHJlc3MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckh5cGVydGVuc2lvbkhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJz5lLiBCZXJhcGEgc2VyaW5nIEFuZGEga29udHJvbCBrZSBEb2t0ZXI8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlckh5cGVydGVuc2lvbkhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBNYXJnaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckh5cGVydGVuc2lvbkhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJz5rYWxpIHBlcjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdTZWxlY3RQb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25Ib3dPZnRlbkNoZWNrdXBUb0RvY3RvclBlcmlvZCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4yLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVySHlwZXJ0ZW5zaW9uV2hlbic+QXBha2FoIGtlbmFpa2FuIHRla2FuYW4gZGFyYWggQW5kYSB0ZXJzZWJ1dCBiZXJodWJ1bmdhbiBkZW5nYW4gcGVueWFraXQgc2ViYWdhaSBiZXJpa3V0OjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG9IZWFydCcgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0naGVhcnQnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG9IZWFydCc+SmFudHVuZzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG9CcmFpbicgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nYnJhaW4nPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG9CcmFpbic+T3RhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG9LaWRuZXknIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySHlwZXJ0ZW5zaW9uUmVsYXRlZFRvJyB0eXBlPSdyYWRpbycgdmFsdWU9J2tpZG5leSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckh5cGVydGVuc2lvblJlbGF0ZWRUb0tpZG5leSc+R2luamFsPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckh5cGVydGVuc2lvblJlbGF0ZWRUb090aGVycycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG9PdGhlcnMnPkxhaW5ueWEsIHNlYnV0a2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZURvdCBMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25SZWxhdGVkVG9PdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+My48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVBvbGljeUhvbGRlckh5cGVydGVuc2lvbldoZW5TdGFydERheSc+YS4gS2FwYW4gQW5kYSBtZW11bGFpIHBlbmdvYmF0YW4ga2VuYWlrYW4gdGVrYW5hbiBkYXJhaCB0ZXJzZWJ1dDwvbGFiZWw+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lclJpZ2h0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckh5cGVydGVuc2lvbldoZW5TdGFydFllYXInPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25XaGVuU3RhcnRNb250aCc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lclJpZ2h0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckh5cGVydGVuc2lvbldoZW5TdGFydERheSc+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJIeXBlcnRlbnNpb25XaGVuTGFzdCc+Yi4JQXBha2FoIEFuZGEgcGVybmFoIGJlcmhlbnRpIG1pbnVtIG9iYXQ\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_hypertension.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_darahtinggi.html","FolderName":"20160803","Id":19,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_epilepsy.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_epilepsi.html","FolderName":"20160803","Id":20,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdEYXRlUG9saWN5SG9sZGVyRGlhYmV0ZXNGaXJzdEtub3duWWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lclJpZ2h0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckRpYWJldGVzRmlyc3RLbm93bk1vbnRoJz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdEYXRlUG9saWN5SG9sZGVyRGlhYmV0ZXNGaXJzdEtub3duRGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mi48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nTnVtYmVyUG9saWN5SG9sZGVyRGlhYmV0ZXNDb250cm9sRnJlcXVlbmN5QW1vdW50Jz5hLiBCZXJhcGEga2FsaSBmcmVrdWVuc2kga29udHJvbCBrZSBkb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J051bWJlclBvbGljeUhvbGRlckRpYWJldGVzQ29udHJvbEZyZXF1ZW5jeUFtb3VudCcgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdOdW1iZXJQb2xpY3lIb2xkZXJEaWFiZXRlc0NvbnRyb2xGcmVxdWVuY3lXZWVrJz5rYWxpIHBlcjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdTZWxlY3RQb2xpY3lIb2xkZXJEaWFiZXRlc0NvbnRyb2xGcmVxdWVuY3lQZXJpb2QnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckRpYWJldGVzQ29udHJvbEZyZXF1ZW5jeVdlZWsnPmIuIE1vaG9uIG1lbGVuZ2thcGkga29sb20gZGkgYmF3YWggaW5pIGRlbmdhbiBuYW1hIGRhbiBhbGFtYXQgbGVuZ2thcCBkb2t0ZXIgeWFuZyBiaWFzYSBkaWt1bmp1bmdpIHVudHVrIGtvbnRyb2w\\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhYmV0ZXNVcmluZUluZm9QbHVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWJldGVzVXJpbmVJbmZvJyB0eXBlPSdyYWRpbycgdmFsdWU9JysnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWJldGVzVXJpbmVJbmZvUGx1cyc+KzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJEaWFiZXRlc1VyaW5lSW5mbzJQbHVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWJldGVzVXJpbmVJbmZvJyB0eXBlPSdyYWRpbycgdmFsdWU9JysrJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJEaWFiZXRlc1VyaW5lSW5mbzJQbHVzJz4rKzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJEaWFiZXRlc1VyaW5lSW5mbzNQbHVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWJldGVzVXJpbmVJbmZvJyB0eXBlPSdyYWRpbycgdmFsdWU9JysrKyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhYmV0ZXNVcmluZUluZm8zUGx1cyc+KysrPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWJldGVzVXJpbmVJbmZvNFBsdXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhYmV0ZXNVcmluZUluZm8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nKysrKyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhYmV0ZXNVcmluZUluZm80UGx1cyc+KysrKzwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyUGFpbkxvY2F0aW9uJz5jLiBNb2hvbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaSBkZW5nYW4gaGFzaWwgMyAodGlnYSkgcGVtZXJpa3NhYW4gdGVyYWtoaXI\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bUZpeCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5KZW5pcyBQZW1lcmlrc2FhbjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPkk8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5JSTwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPklJSTwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bUZpeCBTaW5nbGUgSXRlbSc+S2FkYXIgZ3VsYSBkYXJhaDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyRGlhYmV0ZXNSZXN1bHRHbHVjb3NlTGV2ZWxJJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJEaWFiZXRlc1Jlc3VsdEdsdWNvc2VMZXZlbElJJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJEaWFiZXRlc1Jlc3VsdEdsdWNvc2VMZXZlbElJSScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bUZpeCBTaW5nbGUgSXRlbSc+VGFuZ2dhbCBwZW1lcmlrc2FhbiB0ZXJha2hpcjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyRGlhYmV0ZXNSZXN1bHRMYXN0Q2hlY2tJJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJEaWFiZXRlc1Jlc3VsdExhc3RDaGVja0lJJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJEaWFiZXRlc1Jlc3VsdExhc3RDaGVja0lJSScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWJldGVzQ29udGFpbkFsYnVtaW5Obyc+ZC4JQXBha2FoIHBlcm5haCBkaWRhcGF0a2FuIGFkYW55YSBwcm90ZWluL2FsYnVtaW4gZGFsYW0gdGVzdCB1cmluZT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWJldGVzQ29udGFpbkFsYnVtaW5ZZXMnPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJEaWFiZXRlc0NvbnRhaW5BbGJ1bWluWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWJldGVzQ29udGFpbkFsYnVtaW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhYmV0ZXNDb250YWluQWxidW1pbk5vJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRGlhYmV0ZXNDb250YWluQWxidW1pbk5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckRpYWJldGVzQ29udGFpbkFsYnVtaW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckRpYWJldGVzQ29udGFpbkFsYnVtaW5EZXNjJz5KaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlckRpYWJldGVzQ29udGFpbkFsYnVtaW5EZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJQYWluTG9jYXRpb24nPmUuIEFwYWthaCBkaWxha3VrYW4gcGVtZXJpa3NhYW4gZ2x5Y29zeWxhdGVkIGhhZW1vZ2xvYmluIChIYkExYyk\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_diabetes.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_diabetes.html","FolderName":"20160803","Id":21,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_amandment_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_amandemen.html","FolderName":"20160803","Id":24,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5BdHRhY2tEdXJhdGlvblNlY29uZCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5BdHRhY2tEdXJhdGlvblNlY29uZCc+RGV0aWsgLzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluQXR0YWNrRHVyYXRpb25NaW51dGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluQXR0YWNrRHVyYXRpb25NaW51dGUnPk1lbml0IC88L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZENoZXN0UGFpbkF0dGFja0R1cmF0aW9uSG91cicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5BdHRhY2tEdXJhdGlvbkhvdXInPkphbTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4zLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5OZXh0QXR0YWNrTm8nPkFwYWthaCBhZGEgc2VyYW5nYW4gbGFuanV0YW4gc2VzdWRhaG55YT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluTmV4dEF0dGFja05vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluTmV4dEF0dGFja05vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENoZXN0UGFpbk5leHRBdHRhY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluTmV4dEF0dGFja1llcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZENoZXN0UGFpbk5leHRBdHRhY2tZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluTmV4dEF0dGFjaycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZENoZXN0UGFpbkxhc3RBdHRhY2tEYXknPlRhbmdnYWwgc2VyYW5nYW4gdGVyYWtoaXI6PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluTGFzdEF0dGFja1llYXInPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5MYXN0QXR0YWNrTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5MYXN0QXR0YWNrRGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5MYXN0QXR0YWNrRHVyYXRpb25TZWNvbmQnPkJlcmFwYSBsYW1hIHNlcmFuZ2FuIHRlcnNlYnV0IGJlcmxhbmdzdW5nPzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluTGFzdEF0dGFja0R1cmF0aW9uU2Vjb25kJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZENoZXN0UGFpbkxhc3RBdHRhY2tEdXJhdGlvblNlY29uZCc+RGV0aWsgLzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluTGFzdEF0dGFja0R1cmF0aW9uTWludXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZENoZXN0UGFpbkxhc3RBdHRhY2tEdXJhdGlvbk1pbnV0ZSc+TWVuaXQgLzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQ2hlc3RQYWluTGFzdEF0dGFja0R1cmF0aW9uSG91cicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5MYXN0QXR0YWNrRHVyYXRpb25Ib3VyJz5KYW08L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBXcmFwIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdOdW1iZXJQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5DdXJyZW50QXR0YWNrVGltZXMnPkhpbmdnYSBzYWF0IGluaSBzZXJhbmdhbiBzdWRhaCB0ZXJqYWRpIHNlYmFueWFrOjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdOdW1iZXJQcm9zcGVjdGl2ZUluc3VyZWRDaGVzdFBhaW5DdXJyZW50QXR0YWNrVGltZXMnIHR5cGU9J251bWJlcic+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J051bWJlclByb3NwZWN0aXZlSW5zdXJlZENoZXN0UGFpbkN1cnJlbnRBdHRhY2tUaW1lcyc+S2FsaTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz40Ljwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZENoZXN0UGFpbkxhc3RBcmlzZURheSc+S2FwYW4gdGVyYWtoaXIga2FsaSBueWVyaSBkYWRhIHRlcmphZGk\\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_chestpain_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_nyeridada.html","FolderName":"20160803","Id":25,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNGaXJzdEtub3duWWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lclJpZ2h0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzRmlyc3RLbm93bk1vbnRoJz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNGaXJzdEtub3duRGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mi48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nTnVtYmVyUHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNDb250cm9sRnJlcXVlbmN5QW1vdW50Jz5hLiBCZXJhcGEga2FsaSBmcmVrdWVuc2kga29udHJvbCBrZSBkb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J051bWJlclByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzQ29udHJvbEZyZXF1ZW5jeUFtb3VudCcgdHlwZT0nbnVtYmVyJz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdOdW1iZXJQcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc0NvbnRyb2xGcmVxdWVuY3lXZWVrJz5rYWxpIHBlcjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdTZWxlY3RQcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc0NvbnRyb2xGcmVxdWVuY3lQZXJpb2QnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzQ29udHJvbEZyZXF1ZW5jeVdlZWsnPmIuIE1vaG9uIG1lbGVuZ2thcGkga29sb20gZGkgYmF3YWggaW5pIGRlbmdhbiBuYW1hIGRhbiBhbGFtYXQgbGVuZ2thcCBkb2t0ZXIgeWFuZyBiaWFzYSBkaWt1bmp1bmdpIHVudHVrIGtvbnRyb2w\\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNVcmluZUluZm9QbHVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzVXJpbmVJbmZvJyB0eXBlPSdyYWRpbycgdmFsdWU9JysnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzVXJpbmVJbmZvUGx1cyc+KzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc1VyaW5lSW5mbzJQbHVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzVXJpbmVJbmZvJyB0eXBlPSdyYWRpbycgdmFsdWU9JysrJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc1VyaW5lSW5mbzJQbHVzJz4rKzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc1VyaW5lSW5mbzNQbHVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzVXJpbmVJbmZvJyB0eXBlPSdyYWRpbycgdmFsdWU9JysrKyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNVcmluZUluZm8zUGx1cyc+KysrPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzVXJpbmVJbmZvNFBsdXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNVcmluZUluZm8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nKysrKyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNVcmluZUluZm80UGx1cyc+KysrKzwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkUGFpbkxvY2F0aW9uJz5jLiBNb2hvbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaSBkZW5nYW4gaGFzaWwgMyAodGlnYSkgcGVtZXJpa3NhYW4gdGVyYWtoaXI\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bUZpeCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5KZW5pcyBQZW1lcmlrc2FhbjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPkk8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5JSTwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPklJSTwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bUZpeCBTaW5nbGUgSXRlbSc+S2FkYXIgZ3VsYSBkYXJhaDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNSZXN1bHRHbHVjb3NlTGV2ZWxJJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc1Jlc3VsdEdsdWNvc2VMZXZlbElJJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc1Jlc3VsdEdsdWNvc2VMZXZlbElJSScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bUZpeCBTaW5nbGUgSXRlbSc+VGFuZ2dhbCBwZW1lcmlrc2FhbiB0ZXJha2hpcjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNSZXN1bHRMYXN0Q2hlY2tJJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc1Jlc3VsdExhc3RDaGVja0lJJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc1Jlc3VsdExhc3RDaGVja0lJSScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzQ29udGFpbkFsYnVtaW5Obyc+ZC4JQXBha2FoIHBlcm5haCBkaWRhcGF0a2FuIGFkYW55YSBwcm90ZWluL2FsYnVtaW4gZGFsYW0gdGVzdCB1cmluZT88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzQ29udGFpbkFsYnVtaW5ZZXMnPlRpZGFrPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWFiZXRlc0NvbnRhaW5BbGJ1bWluWWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzQ29udGFpbkFsYnVtaW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNDb250YWluQWxidW1pbk5vJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlhYmV0ZXNDb250YWluQWxidW1pbk5vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzQ29udGFpbkFsYnVtaW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzQ29udGFpbkFsYnVtaW5EZXNjJz5KaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpYWJldGVzQ29udGFpbkFsYnVtaW5EZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRQYWluTG9jYXRpb24nPmUuIEFwYWthaCBkaWxha3VrYW4gcGVtZXJpa3NhYW4gZ2x5Y29zeWxhdGVkIGhhZW1vZ2xvYmluIChIYkExYyk\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_diabetes_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_diabetes.html","FolderName":"20160803","Id":26,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCiAgPCEtLSBIRUFEIC0tPg0KICA8aGVhZD4NCiAgICA8IS0tIEZPUiBERVZFTE9QTUVOVCAtLT4NCiAgICA8IS0tIEZPUiBERVBMT1lNRU5UIC0tPg0KICAgIDwhLS0gTUVUQSBEQVRBIC0tPg0KICAgIDxtZXRhIGNoYXJzZXQ9J3V0Zi04Jz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSAtIEJMRVNTJyBuYW1lPSdhcHBsaWNhdGlvbi1uYW1lJz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSBFbGVjdHJvbmljIFN1Ym1pc3Npb24uJyBuYW1lPSdkZXNjcmlwdGlvbic+DQogICAgPG1ldGEgY29udGVudD0nQkNBIExpZmUgRWxlY3Ryb25pYyBTdWJtaXNzaW9uLicgbmFtZT0na2V5d29yZHMnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdhdXRob3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0licmFoaW0gQXppeicgbmFtZT0nZGVzaWduZXInPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0NvcHlyaWdodCAyMDE2IEJDQSBMaWZlJyBuYW1lPSdjb3B5cmlnaHQnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlIEVsZWN0cm9uaWMgU3VibWlzc2lvbi4nIG5hbWU9J2RjdGVybXMuZGVzY3JpcHRpb24nPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLmNyZWF0b3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLnJpZ2h0c0hvbGRlcic+DQogICAgPG1ldGEgY29udGVudD0nQWxsIHJpZ2h0cyByZXNlcnZlZC4gTm8gcGFydCBvZiB0aGlzIGRvY3VtZW50IG1heSBiZSByZXByb2R1Y2VkIG9yIHRyYW5zbWl0dGVkIGluIGFueSBmb3JtIG9yIGJ5IGFueSBtZWFucywgZWxlY3Ryb25pYywgbWVjaGFuaWNhbCwgcGhvdG9jb3B5aW5nLCByZWNvcmRpbmcsIG9yIG90aGVyd2lzZSwgd2l0aG91dCBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gZnJvbSB0aGUgQXV0aG9yLCBCQ0EgTGlmZS4nIG5hbWU9J2RjdGVybXMucmlnaHRzJz4NCiAgICA8bWV0YSBjb250ZW50PScyMDE2JyBuYW1lPSdkY3Rlcm1zLmRhdGVDb3B5cmlnaHRlZCc+DQogICAgPG1ldGEgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBtaW5pbXVtLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9bm8nIG5hbWU9J3ZpZXdwb3J0Jz4NCiAgICA8IS0tIEZBVklDT04gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iIH0gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iLCA6dHlwZSA9PiAiaW1hZ2UveC1pY29uIiB9IC0tPg0KICAgIDwhLS0gJWxpbmt7IDpyZWwgPT4gImljb24iLCA6aHJlZiA9PiAiI3t1cmxSZXNvdXJjZX1sb2dvX2Zhdmljb24uaWNvIiwgOnR5cGUgPT4gImltYWdlL3gtaWNvbiIgfSAtLT4NCiAgICA8IS0tIENTUyAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9qcXVlcnkubW9iaWxlLTEuNC41Lm1pbi5jc3MnIGlkPSdjc3NyZXNwb25zaXZlJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9oZWFsdGhxdWVzdGlvbm5haXJlcGRmLWxheW91dC1nZW5lcmFsLmNzcycgaWQ9J2Nzc2xheW91dCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPGxpbmsgaHJlZj0nLi4vLi4vanF1ZXJ5TGlicmFyeS9TdHlsZS9DU1MvaGVhbHRocXVlc3Rpb25uYWlyZXBkZi1mb250LWdlbmVyYWwuY3NzJyBpZD0nY3NzZm9udCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPGxpbmsgaHJlZj0nLi4vLi4vanF1ZXJ5TGlicmFyeS9TdHlsZS9DU1MvaGVhbHRocXVlc3Rpb25uYWlyZXBkZi1pbnB1dC1nZW5lcmFsLmNzcycgaWQ9J2Nzc2lucHV0JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8IS0tICVsaW5reyA6aWQgPT4gImNzc2xpbmsiLCA6aHJlZiA9PiAiI3t1cmxDU1N9I3t1cmxDU1NTZWN0aW9uUHJlZml4fS1saW5rLWdlbmVyYWwuY3NzIiwgOnJlbCA9PiAic3R5bGVzaGVldCIsIDp0eXBlID0+ICJ0ZXh0L2NzcyIgfSAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9ibGVzcy1mb250c2l6ZS1tZWRpdW0uY3NzJyBpZD0nY3NzZm9udHNpemUnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvU3R5bGUvQ1NTL2hlYWx0aHF1ZXN0aW9ubmFpcmVwZGYtZm9udGZhbWlseS1icHJlcGxheS5jc3MnIGlkPSdjc3Nmb250ZmFtaWx5JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9oZWFsdGhxdWVzdGlvbm5haXJlcGRmLXRoZW1lLXR1cnFvaXNlLXN2Zy5jc3MnIGlkPSdjc3N0aGVtZScgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPCEtLSAlbGlua3sgOmlkID0+ICJjc3NyZXNwb25zaXZlIiwgOmhyZWYgPT4gIiN7dXJsQ1NTfSN7dXJsQ1NTU2VjdGlvblByZWZpeH0tcmVzcG9uc2l2ZS1nZW5lcmFsLmNzcyIsIDpyZWwgPT4gInN0eWxlc2hlZXQiLCA6dHlwZSA9PiAidGV4dC9jc3MiIH0gLS0+DQogICAgPCEtLSBKQVZBIFNDUklQVCAtLT4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnkubW9iaWxlLTEuNC41Lm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnktMS4xMS4xLm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnktbWlncmF0ZS0xLjIuMS5taW4uanMnIHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvSmF2YVNjcmlwdC9NaW5pbWl6ZWQvaWJyYWhpbWF6aXoubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2licmFoaW1heml6LWhlYWx0aHF1ZXN0aW9ubmFpcmUubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2lvcy1pbnRlZ3JhdGlvbi1oZWFsdGhxdWVzdGlvbm5haXJlLm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0Pg0KICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKQ0KICAgICAgew0KICAgICAgCWltYWdlU2VsZWN0b3IoIi4uLy4uL2pxdWVyeUxpYnJhcnkvUmVzb3VyY2UvIik7DQogICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCiAgICA8dGl0bGU+QkNBIExpZmUgLSBCTEVTUywgSGVhbHRoIFF1ZXN0aW9ubmFpcmUgMSBGb3JtPC90aXRsZT4NCiAgICA8IS0tIEpRVUVSWSAtLT4NCiAgICA8c2NyaXB0Pg0KICAgICAgLy8gSU5JVElBTElaQVRJT04NCiAgICAgIA0KICAgICAgdmFyIHN0cmluZ1BhZ2VUeXBlQ3VycmVudCA9IHN0cmluZ1BhZ2VUeXBlUERGOw0KICAgICAgDQogICAgICAvLyBET0NVTUVOVCBSRUFEWQ0KICAgICAgDQogICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpDQogICAgICB7DQogICAgICAJLy8gU0VDVElPTiBHRU5FUkFMDQogICAgICANCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0U1BBSk51bWJlciIsIDExLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRnVsbE5hbWUiLCAxOSwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZ1bGxOYW1lMm5kIiwgMTksIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRQcm9zcGVjdGl2ZUluc3VyZWRCaXJ0aFBsYWNlIiwgMTYsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCaXJ0aERheSIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCaXJ0aE1vbnRoIiwgMiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJpcnRoWWVhciIsIDQsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgDQogICAgICAJLy8gU0VDVElPTiBNQU5EQVRPUlkNCiAgICAgIA0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtU3RhcnRlZERheSIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtU3RhcnRlZE1vbnRoIiwgMiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFByb2JsZW1TdGFydGVkWWVhciIsIDQsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgDQogICAgICAJbGluZUdlbmVyYXRvcigiI1RleHRQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3RPdGhlciIsIDUpOw0KICAgICAgDQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbExhc3RDb21wbGFpbkRheSIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxMYXN0Q29tcGxhaW5Nb250aCIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxMYXN0Q29tcGxhaW5ZZWFyIiwgNCwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICANCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsVm9taXR0aW5nQmxvb2RMYXN0QXJpc2VEYXkiLCAyLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsVm9taXR0aW5nQmxvb2RMYXN0QXJpc2VNb250aCIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxWb21pdHRpbmdCbG9vZExhc3RBcmlzZVllYXIiLCA0LCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIA0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxIb3NwaXRhbENhcmVGcm9tRGF5IiwgMiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbEhvc3BpdGFsQ2FyZUZyb21Nb250aCIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxIb3NwaXRhbENhcmVGcm9tWWVhciIsIDQsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgDQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbEhvc3BpdGFsQ2FyZVRvRGF5IiwgMiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbEhvc3BpdGFsQ2FyZVRvTW9udGgiLCAyLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsSG9zcGl0YWxDYXJlVG9ZZWFyIiwgNCwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICANCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQWJzZW50U2luY2VEYXkiLCAyLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQWJzZW50U2luY2VNb250aCIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxBYnNlbnRTaW5jZVllYXIiLCA0LCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIA0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVTaWduZWREYXkiLCAyLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlU2lnbmVkTW9udGgiLCAyLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlU2lnbmVkWWVhciIsIDQsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgDQogICAgICAJYm94R2VuZXJhdG9yKCIjVGV4dEFnZW50TmFtZSIsIDE2LCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0QWdlbnRDb2RlIiwgMTEsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRQcm9kdWN0Q29kZSIsIDExLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIA0KICAgICAgCS8vIEZPT1RFUg0KICAgICAgDQogICAgICAJZm9vdGVyU2V0dGVyRm9ySGVhbHRoUXVlc3Rpb25uYWlyZVBERigiT1AvVVcvMDEwNy8wNjE2MDEiLCAzKTsNCiAgICAgIAl0aXRsZVNldHRlckZvckhlYWx0aFF1ZXN0aW9ubmFpcmVQREYoIktVRVNJT05FUiBHQU5HR1VBTiBQRU5DRVJOQUFOIik7DQogICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCiAgPC9oZWFkPg0KICA8IS0tIEJPRFkgLS0+DQogIDxib2R5Pg0KICAgIDwhLS0gSEVBREVSIC0tPg0KICAgIDxoZWFkZXI+DQogICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkhlYWRlcic+DQogICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9Mb2dvL2xvZ29fYmNhbGlmZV9wcmltYXJ5LnN2Zyc+DQogICAgICAgIDxkaXYgY2xhc3M9J0FkZHJlc3MnPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXIgUG9zaXRpb25lclJpZ2h0Jz5QVCBBc3VyYW5zaSBKaXdhIEJDQTwvc3Bhbj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgQ2hhc2UgUGxhemEgTGFudGFpIDIyIHwgSmwuIEplbmQuIFN1ZGlybWFuIEthdiAyMSwgSmFrYXJ0YSAxMjkyMA0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgVGVsZXBvbjogKDAyMSkgMjEgODg4IDAwMCB8IEZha3M6ICgwMjEpIDI5MzQgNzk3NyB8IEVtYWlsOiBjdXN0b21lckBiY2FsaWZlLmNvLmlkDQogICAgICAgICAgPC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGJyPg0KICAgICAgPC9zZWN0aW9uPg0KICAgICAgPGgxPjwvaDE+DQogICAgICA8YnI+DQogICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbk5vdGUnPg0KICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICA8cD5QZXJsdSBkaXBlcmhhdGlrYW46PC9wPg0KICAgICAgICAgIDxvbD4NCiAgICAgICAgICAgIDxsaT5XYWppYiBkaWlzaSBvbGVoIChDYWxvbikgUGVtZWdhbmcgUG9saXMgZGFuL2F0YXUgKENhbG9uKSBUZXJ0YW5nZ3VuZyBkZW5nYW4gdGludGEgaGl0YW0sIGh1cnVmIGNldGFrLCBqZWxhcyBkYW4gbWVtYmVyaSB0YW5kYSAo4oiaKSBwYWRhIGtvdGFrIHNlc3VhaSBwaWxpaGFuLjwvbGk+DQogICAgICAgICAgICA8bGk+V2FqaWIgbWVuYW5kYXRhbmdhbmkgc2V0aWFwIGtvcmVrc2kgcGVudWxpc2FuIChqaWthIGFkYSkuPC9saT4NCiAgICAgICAgICAgIDxsaT5QZW51bGlzYW4gdGFuZ2dhbCBzZWxhbHUgbWVtcGVyZ3VuYWthbiBmb3JtYXQgVGFuZ2dhbC1CdWxhbi1UYWh1bi48L2xpPg0KICAgICAgICAgICAgPGxpPkFwYWJpbGEgZGlwZXJsdWthbiBsZW1iYXIgdGFtYmFoYW4sIGRhcGF0IG1lbXBlcmd1bmFrYW4gRm9ybXVsaXIgUGVybnlhdGFhbi9BbWFuZGVtZW4gVW50dWsgU1BBSiAmIFBlbmdhanVhbiBQZWxheWFuYW4gUG9saXMgeWFuZyBkaWlzaSBkYW4gZGl0YW5kYXRhbmdhbmkgb2xlaCAoQ2Fsb24pIFBlbWVnYW5nIFBvbGlzLCAoQ2Fsb24pIFRlcnRhbmdndW5nIGRhbiBUZW5hZ2EgUGVuanVhbC48L2xpPg0KICAgICAgICAgICAgPGxpPkFwYWJpbGEgdGVsYWggZGlpc2kgbGVuZ2thcCBvbGVoIChDYWxvbikgUGVtZWdhbmcgUG9saXMgZGFuL2F0YXUgKENhbG9uKSBUZXJ0YW5nZ3VuZyB3YWppYiBkaXNlcmFoa2FuIGtlIEthbnRvciBQdXNhdCBQVCBBc3VyYW5zaSBKaXdhIEJDQSAo4oCcUGVuYW5nZ3VuZ+KAnSkuPC9saT4NCiAgICAgICAgICA8L29sPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvc2VjdGlvbj4NCiAgICA8L2hlYWRlcj4NCiAgICA8IS0tIE1BSU4gLS0+DQogICAgPG1haW4+DQogICAgICA8Zm9ybT4NCiAgICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25DdXN0b21lcic+DQogICAgICAgICAgPGgyPkkuIERhdGEgKENhbG9uKSBUZXJ0YW5nZ3VuZzwvaDI+DQogICAgICAgICAgPGZpZWxkc2V0Pg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjEuPC9zcGFuPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gV3JhcCBQbGFpbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0U1BBSk51bWJlcic+Tm9tb3IgU3VyYXQgUGVuZ2FqdWFuIEFzdXJhbnNpIEppd2E6PC9sYWJlbD4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFNQQUpOdW1iZXInPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUGxhaW4gTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRTUEFKTnVtYmVyJyBzdHlsZT0nbWFyZ2luLXRvcDogLTI1cHg7Jz4oU1BBSikvUG9saXMgQXN1cmFuc2k8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjIuPC9zcGFuPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBsYWluIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRGdWxsTmFtZSc+TmFtYSBMZW5na2FwIChDYWxvbikgVGVydGFuZ2d1bmc6PC9sYWJlbD4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZ1bGxOYW1lJz48L3RhYmxlPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBsYWluIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRnVsbE5hbWUnIHN0eWxlPSdtYXJnaW4tdG9wOiAtMjVweDsnPihzZXN1YWkgZGVuZ2FuIEtUUC9QYXNwb3IpPC9sYWJlbD4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZ1bGxOYW1lMm5kJz48L3RhYmxlPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjM8L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgTWVkaXVtIFBsYWluIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRCaXJ0aFBsYWNlJz5UZW1wYXQsIFRhbmdnYWwgbGFoaXIgKENhbG9uKSBUZXJ0YW5nZ3VuZzo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJpcnRoUGxhY2UnIHJlYWRvbmx5PSd0cnVlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4sPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmlydGhEYXknPjwvdGFibGU+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJpcnRoTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJpcnRoWWVhcic+PC90YWJsZT4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgIDxoMj5JSS4gV0FKSUIgRElMRU5HS0FQSSAoQ0FMT04pIFRFUlRBTkdHVU5HPC9oMj4NCiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSdmaWVsZHNldCBXaXRob3V0RG91YmxlRG90Jz4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MS48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3QnPkdhbmdndWFuIHBlbmNlcm5hYW4geWFuZyBwZXJuYWggQW5kYSBhbGFtaT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsUHJvYmxlbVBlcHRpY1VsY2VyJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFByb2JsZW0nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ncGVwdGljdWxjZXInPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtUGVwdGljVWxjZXInPlR1a2FrIExhbWJ1bmc8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsUHJvYmxlbUVudGVyaXRpcycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtJyB0eXBlPSdyYWRpbycgdmFsdWU9J2VudGVyaXRpcyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFByb2JsZW1FbnRlcml0aXMnPlR1a2FrIFVzdXM8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsUHJvYmxlbUludGVzdGluYWxVbGNlcicgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ludGVzdGluYWx1bGNlcic+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFByb2JsZW1JbnRlc3RpbmFsVWxjZXInPlJhZGFuZyBVc3VzIEJlc2FyPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFByb2JsZW1FbnRlcml0aXMxMkZpbmdlcnMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsUHJvYmxlbScgdHlwZT0ncmFkaW8nIHZhbHVlPSdlbnRlcml0aXMxMmZpbmdlcnMnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtRW50ZXJpdGlzMTJGaW5nZXJzJz5SYWRhbmcgVXN1cyAxMiBKYXJpPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFByb2JsZW1VbGNlcicgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtJyB0eXBlPSdyYWRpbycgdmFsdWU9J21hYWcnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtVWxjZXInPk1hYWc8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsUHJvYmxlbU90aGVycycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtJyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsUHJvYmxlbU90aGVycyc+TGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMaW5lRG90IExvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFByb2JsZW1PdGhlcnMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J051bWJlckluZGVudCBEZXRhaWwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtRGVzY3JpcHRpb24nPk1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsUHJvYmxlbURlc2NyaXB0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjIuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtU3RhcnRlZERheSc+U2VqYWsga2FwYW4gYW5kYSBtZW5nYWxhbWkgZ2FuZ2d1YW4gcGVuY2VybmFhbj88L2xhYmVsPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtU3RhcnRlZFllYXInPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxQcm9ibGVtU3RhcnRlZE1vbnRoJz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsUHJvYmxlbVN0YXJ0ZWREYXknPjwvdGFibGU+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4zLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsRnJlcXVlbmN5SW5Nb250aCc+YS4gQmVyYXBhIGthbGkgQW5kYSB0ZXJzZXJhbmcgZ2FuZ2d1YW4gcGVuY2VybmFhbj88L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbEZyZXF1ZW5jeUluTW9udGgnIHJlYWRvbmx5PSd0cnVlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBNYXJnaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbEZyZXF1ZW5jeUluTW9udGgnPmthbGkgcGVyPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1NlbGVjdFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbEZyZXF1ZW5jeUluTW9udGhQZXJpb2QnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbExhc3RDb21wbGFpbic+Yi4gS2FwYW4gdGltYnVsbnlhIGtlbHVhaGFuIHRlcmFraGlyPzwvbGFiZWw+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lclJpZ2h0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbExhc3RDb21wbGFpblllYXInPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxMYXN0Q29tcGxhaW5Nb250aCc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lclJpZ2h0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbExhc3RDb21wbGFpbkRheSc+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjQuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRGZWVsJz5LZWx1aGFuIGFwYSB5YW5nIGFuZGEgcmFzYWthbj88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5Bc3NOYXVzZWEnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5Bc3MnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nbmF1c2VhJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5Bc3NOYXVzZWEnPk11YWw8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5Bc3NHYWcnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5Bc3MnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZ2FnJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5Bc3NHYWcnPk11bnRhaDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpbkFzc1ZvbWl0dGluZ0Jsb29kJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluQXNzJyB0eXBlPSdyYWRpbycgdmFsdWU9J3ZvbWl0dGluZ2Jsb29kJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5Bc3NWb21pdHRpbmdCbG9vZCc+TXVudGFoIERhcmFoPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluQXNzSGVhcnRidXJuJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluQXNzJyB0eXBlPSdyYWRpbycgdmFsdWU9J2hlYXJ0YnVybic+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluQXNzSGVhcnRidXJuJz5OeWVyaSBVbHUgSGF0aTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpbkFzc090aGVycycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpbkFzcycgdHlwZT0ncmFkaW8nIHZhbHVlPSdvdGhlcic+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluQXNzT3RoZXJzJz5MYWlubnlhLCBzZWJ1dGthbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmVEb3QgTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5PdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+NS48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxWb21pdGluZ0Jsb29kJz5hLglBcGFrYWggQW5kYSBwZXJuYWggbWVuZ2FsYW1pIG11bnRhaCBkYXJhaD88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFZvbWl0aW5nQmxvb2RObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFZvbWl0aW5nQmxvb2RObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxWb21pdGluZ0Jsb29kJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxWb21pdGluZ0Jsb29kWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsVm9taXRpbmdCbG9vZFllcycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxWb21pdGluZ0Jsb29kJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxWb21pdGluZ0Jsb29kTGFzdEFyaXNlRGF5Jz5iLiBKaWthIOKAnFlh4oCdLCBrYXBhbiB0ZXJha2hpciBBbmRhIG1lbmdhbGFtaW55YT88L2xhYmVsPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxWb21pdHRpbmdCbG9vZExhc3RBcmlzZVllYXInPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxWb21pdHRpbmdCbG9vZExhc3RBcmlzZU1vbnRoJz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsVm9taXR0aW5nQmxvb2RMYXN0QXJpc2VEYXknPjwvdGFibGU+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsVm9taXR0aW5nQmxvb2RBcmlzZVRpbWUnPmMuIEJlcmFwYSBrYWxpIEFuZGEgbWVuZ2FsYW1pIG11bnRhaCBkYXJhaD88L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFZvbWl0dGluZ0Jsb29kQXJpc2VUaW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBNYXJnaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFZvbWl0dGluZ0Jsb29kQXJpc2VUaW1lJz5rYWxpIHBlcjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdTZWxlY3RQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxWb21pdHRpbmdCbG9vZEFyaXNlVGltZVBlcmlvZCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTnVtYmVySW5kZW50IERldGFpbCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFZvbWl0aW5nQmxvb2RTb2x2aW4nPk1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBkYW4gY2FyYSBtZW5nYXRhc2lueWEgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbFZvbWl0dGluZ0Jsb29kU29sdmluZycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRm9vdGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogODBweDsnPg0KICAgICAgICAgICAgPGZvb3Rlcj4NCiAgICAgICAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0ljb24vVHVycW9pc2UvaWNvbl9oYWxvYmNhLnN2Zyc+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXInPlBUIEFzdXJhbnNpIEppd2EgQkNBIHRlcmRhZnRhciBkYW4gZGlhd2FzaSBvbGVoIE90b3JpdGFzIEphc2EgS2V1YW5nYW48L3NwYW4+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXRhaWwnPjwvc3Bhbj4NCiAgICAgICAgICAgIDwvZm9vdGVyPg0KICAgICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgICA8aGVhZGVyPg0KICAgICAgICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25IZWFkZXInIHN0eWxlPSdtYXJnaW4tdG9wOiAzMHB4OyBwb3NpdGlvbjogcmVsYXRpdmU7IHRvcDogMzBweDsgZGlzcGxheTogYmxvY2s7Jz4NCiAgICAgICAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0xvZ28vbG9nb19iY2FsaWZlX3ByaW1hcnkuc3ZnJz4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQWRkcmVzcyc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlciBQb3NpdGlvbmVyUmlnaHQnPlBUIEFzdXJhbnNpIEppd2EgQkNBPC9zcGFuPg0KICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICAgICAgICBDaGFzZSBQbGF6YSBMYW50YWkgMjIgfCBKbC4gSmVuZC4gU3VkaXJtYW4gS2F2IDIxLCBKYWthcnRhIDEyOTIwDQogICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICBUZWxlcG9uOiAoMDIxKSAyMSA4ODggMDAwIHwgRmFrczogKDAyMSkgMjkzNCA3OTc3IHwgRW1haWw6IGN1c3RvbWVyQGJjYWxpZmUuY28uaWQNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPC9oZWFkZXI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnIHN0eWxlPSdtYXJnaW4tdG9wOiAzMHB4Oyc+Ni48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3RQYWluQ29tcGxhaW4nIHN0eWxlPSdtYXJnaW4tdG9wOiAzMHB4Oyc+SmVsYXNrYW4gc2VjYXJhIHJpbmNpIGtlbHVoYW4gbnllcmkgeWFuZyBBbmRhIGRpcmFzYWthbjo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluQ29uZGl0aW9uJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluUGFpbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdjb25kaXRpb24nPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5Db25kaXRpb24nPlRpbWJ1bCBwYWRhIGtvbmRpc2kgdGVydGVudHUsIGplbGFza2FuOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluUGFpbkNvbmRpdGlvbkRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluRGVjcmVhc2UnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluJyB0eXBlPSdyYWRpbycgdmFsdWU9J2RlY3JlYXNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluRGVjcmVhc2UnPk55ZXJpIGJlcmt1cmFuZyBiaWxhIHNlZGFuZyBtYWthbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5JbmNyZWFzZScgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0naW5jcmVhc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5JbmNyZWFzZSc+TnllcmkgYmVydGFtYmFoIGJpbGEgc2VkYW5nIG1ha2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluUGFpblNwcmVhZCcgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW4nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc3ByZWFkJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluU3ByZWFkJz5OeWVyaSBtZW5qYWxhciBrZSBiYWdpYW4gdHVidWggbGFpbjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluU3ByZWFkSGVhZCcgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5TcHJlYWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0naGVhZCc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluUGFpblNwcmVhZEhlYWQnPktlcGFsYTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5TcHJlYWRDaGVzdCcgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5TcHJlYWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nY2hlc3QnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5TcHJlYWRDaGVzdCc+RGFkYTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5TcHJlYWRTdG9tYWNoJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluUGFpblNwcmVhZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdzdG9tYWNoJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluU3ByZWFkU3RvbWFjaCc+UGVydXQ8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluU3ByZWFkQXJtJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbENvbXBsYWluUGFpblNwcmVhZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdhcm0nPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5TcHJlYWRBcm0nPkxlbmdhbjwvbGFiZWw+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxDb21wbGFpblBhaW5TcHJlYWRPdGhlcnMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluU3ByZWFkJyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluU3ByZWFkT3RoZXJzJz5MYWlubnlhLCBzZWJ1dGthbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmVEb3QgTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQ29tcGxhaW5QYWluU3ByZWFkT3RoZXJEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXJGaXggU2luZ2xlIEl0ZW0nPjcuPC9zcGFuPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIEl0ZW0nIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbERydWdzTmFtZSc+TW9ob24gamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pIG1lbmdlbmFpIG5hbWEgb2JhdCB5YW5nIEFuZGEga29uc3Vtc2kgZGFuIGxhbWEgcGVtYWthaWFubnlhIHNlaHVidW5nYW4gZGVuZ2FuIGdhbmdndWFuIHBlbmNlcm5hYW4\\\/PC9zcGFuPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nTnVtYmVyUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsQWJzZW50U2luY2VEYXlzJyB0eXBlPSdudW1iZXInPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J051bWJlclByb3NwZWN0aXZlSW5zdXJlZERpZ2VzdERldGFpbEFic2VudFNpbmNlRGF5cyc+PC9sYWJlbD4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+aGFyaS48L3NwYW4+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyRml4IFNpbmdsZSBJdGVtJz4xMy48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgSXRlbScgZm9yPSdBcmVhUHJvc3BlY3RpdmVJbnN1cmVkRGlnZXN0RGV0YWlsSGVhbHRoQ29uZGl0aW9uJz5Nb2hvbiBBbmRhIG1lbWJlcmlrYW4gaW5mb3JtYXNpIHRhbWJhaGFuIGxhaW4geWFuZyBtZW51cnV0IEFuZGEgcGVudGluZyBtdW5na2luIGRhcGF0IG1lbWJhbnR1IHByb3NlcyBwZW5nYWp1YW4gYXN1cmFuc2kgaW5pIGRlbmdhbiBtZWxlbmdrYXBpIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J0FyZWFQcm9zcGVjdGl2ZUluc3VyZWREaWdlc3REZXRhaWxIZWFsdGhDb25kaXRpb24nPjwvdGV4dGFyZWE+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkRlY2xhcmF0aW9uJz4NCiAgICAgICAgICA8aDI+UGVybnlhdGFhbiBEYW4gS3Vhc2E8L2gyPg0KICAgICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgICAgICA8b2w+DQogICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgU2F5YS9LYW1pIG1lbnlhdGFrYW4gYmFod2EgU2F5YS9LYW1pIHRlbGFoIG1lbWFoYW1pIGRhbiBtZW55ZXR1anVpIHVudHVrIG1lbmdpc2kgc2VjYXJhIGxlbmdrYXAgZGFuIGJlbmFyIHNlbXVhIGluZm9ybWFzaSBkYWxhbQ0KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1F1ZXN0aW9ubmFpcmVUaXRsZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgaW5pIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhIHNlYmFnYWkgYmFnaWFuIGRhcmkga29udHJhayBhc3VyYW5zaSBKaXdhL0tlc2VoYXRhbi9LZWNlbGFrYWFuLg0KICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci9SdW1haCBTYWtpdC9LbGluaWsvUHVza2VzbWFzL0xhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpL2xlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gU2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBtZW5nZW5haSBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBTYXlhLjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSBtZXJ1cGFrYW4gaGFsIHlhbmcgdGlkYWsgdGVycGlzYWhrYW4gZGFyaSBTUEFKIGRhbiBha2FuIG1lbmdpa2F0IFNheWEsIFBlbmVyaW1hIE1hbmZhYXQvQWhsaSBXYXJpcywgZGFuIGtlbHVhcmdhIFNheWEgKGppa2EgYWRhKTwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgU2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBTYXlhIG1lbmluZ2dhbCBkdW5pYS4gU2FsaW5hbi9mb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkFwYWJpbGEgaW5mb3JtYXNpIHRlcnNlYnV0IHlhbmcgU2F5YS9LYW1pIGJlcmlrYW4gdGlkYWsgYmVuYXIsIG1ha2EgUGVuYW5nZ3VuZyBiZXJoYWsgbWVtYmF0YWxrYW4gUG9saXMgU2F5YS9LYW1pIHNlamFrIGF3YWwuPC9saT4NCiAgICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRTaWduZWRQbGFjZSc+RGl0YW5kYXRhbmdhbmk8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFNpZ25lZFBsYWNlJyByZWFkb25seT0ndHJ1ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+PC9zcGFuPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVTaWduZWREYXknPlRhbmdnYWw8L2xhYmVsPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZERheSc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlU2lnbmVkTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZFllYXInPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTaWduYXR1cmUgSXRlbTEnPg0KICAgICAgICAgICAgICAgIDxpbWc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05hbWUnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgKENhbG9uKSBQZW1lZ2FuZyBQb2xpcw0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NpZ25hdHVyZSBJdGVtMSc+DQogICAgICAgICAgICAgICAgPGltZz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTmFtZScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRTaWduYXR1cmUnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGVzY3JpcHRpb24nPg0KICAgICAgICAgICAgICAgICAgTmFtYSBMZW5na2FwICYgVGFuZGEgdGFuZ2FuDQogICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICAoQ2Fsb24pIFRlcnRhbmdndW5nDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2lnbmF0dXJlIEl0ZW0xJz4NCiAgICAgICAgICAgICAgICA8aW1nPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOYW1lJyBpZD0nVGV4dFNhbGVzU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVuYWdhIFBlbmp1YWwNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgPC9mb3JtPg0KICAgIDwvbWFpbj4NCiAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkZvb3Rlcic+DQogICAgICA8Zm9vdGVyPg0KICAgICAgICA8aW1nIHNyYz0nLi4vLi4vUmVzb3VyY2UvSWNvbi9UdXJxb2lzZS9pY29uX2hhbG9iY2Euc3ZnJz4NCiAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlcic+UFQgQXN1cmFuc2kgSml3YSBCQ0EgdGVyZGFmdGFyIGRhbiBkaWF3YXNpIG9sZWggT3Rvcml0YXMgSmFzYSBLZXVhbmdhbjwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCc+PC9zcGFuPg0KICAgICAgPC9mb290ZXI+DQogICAgPC9zZWN0aW9uPg0KICA8L2JvZHk+DQo8L2h0bWw+DQo=","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_digestion_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_pencernaan.html","FolderName":"20160803","Id":27,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_epilepsy_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_epilepsi.html","FolderName":"20160803","Id":28,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCiAgPCEtLSBIRUFEIC0tPg0KICA8aGVhZD4NCiAgICA8IS0tIEZPUiBERVZFTE9QTUVOVCAtLT4NCiAgICA8IS0tIEZPUiBERVBMT1lNRU5UIC0tPg0KICAgIDwhLS0gTUVUQSBEQVRBIC0tPg0KICAgIDxtZXRhIGNoYXJzZXQ9J3V0Zi04Jz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSAtIEJMRVNTJyBuYW1lPSdhcHBsaWNhdGlvbi1uYW1lJz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSBFbGVjdHJvbmljIFN1Ym1pc3Npb24uJyBuYW1lPSdkZXNjcmlwdGlvbic+DQogICAgPG1ldGEgY29udGVudD0nQkNBIExpZmUgRWxlY3Ryb25pYyBTdWJtaXNzaW9uLicgbmFtZT0na2V5d29yZHMnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdhdXRob3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0licmFoaW0gQXppeicgbmFtZT0nZGVzaWduZXInPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0NvcHlyaWdodCAyMDE2IEJDQSBMaWZlJyBuYW1lPSdjb3B5cmlnaHQnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlIEVsZWN0cm9uaWMgU3VibWlzc2lvbi4nIG5hbWU9J2RjdGVybXMuZGVzY3JpcHRpb24nPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLmNyZWF0b3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLnJpZ2h0c0hvbGRlcic+DQogICAgPG1ldGEgY29udGVudD0nQWxsIHJpZ2h0cyByZXNlcnZlZC4gTm8gcGFydCBvZiB0aGlzIGRvY3VtZW50IG1heSBiZSByZXByb2R1Y2VkIG9yIHRyYW5zbWl0dGVkIGluIGFueSBmb3JtIG9yIGJ5IGFueSBtZWFucywgZWxlY3Ryb25pYywgbWVjaGFuaWNhbCwgcGhvdG9jb3B5aW5nLCByZWNvcmRpbmcsIG9yIG90aGVyd2lzZSwgd2l0aG91dCBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gZnJvbSB0aGUgQXV0aG9yLCBCQ0EgTGlmZS4nIG5hbWU9J2RjdGVybXMucmlnaHRzJz4NCiAgICA8bWV0YSBjb250ZW50PScyMDE2JyBuYW1lPSdkY3Rlcm1zLmRhdGVDb3B5cmlnaHRlZCc+DQogICAgPG1ldGEgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBtaW5pbXVtLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9bm8nIG5hbWU9J3ZpZXdwb3J0Jz4NCiAgICA8IS0tIEZBVklDT04gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iIH0gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iLCA6dHlwZSA9PiAiaW1hZ2UveC1pY29uIiB9IC0tPg0KICAgIDwhLS0gJWxpbmt7IDpyZWwgPT4gImljb24iLCA6aHJlZiA9PiAiI3t1cmxSZXNvdXJjZX1sb2dvX2Zhdmljb24uaWNvIiwgOnR5cGUgPT4gImltYWdlL3gtaWNvbiIgfSAtLT4NCiAgICA8IS0tIENTUyAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9qcXVlcnkubW9iaWxlLTEuNC41Lm1pbi5jc3MnIGlkPSdjc3NyZXNwb25zaXZlJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9oZWFsdGhxdWVzdGlvbm5haXJlcGRmLWxheW91dC1nZW5lcmFsLmNzcycgaWQ9J2Nzc2xheW91dCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPGxpbmsgaHJlZj0nLi4vLi4vanF1ZXJ5TGlicmFyeS9TdHlsZS9DU1MvaGVhbHRocXVlc3Rpb25uYWlyZXBkZi1mb250LWdlbmVyYWwuY3NzJyBpZD0nY3NzZm9udCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPGxpbmsgaHJlZj0nLi4vLi4vanF1ZXJ5TGlicmFyeS9TdHlsZS9DU1MvaGVhbHRocXVlc3Rpb25uYWlyZXBkZi1pbnB1dC1nZW5lcmFsLmNzcycgaWQ9J2Nzc2lucHV0JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8IS0tICVsaW5reyA6aWQgPT4gImNzc2xpbmsiLCA6aHJlZiA9PiAiI3t1cmxDU1N9I3t1cmxDU1NTZWN0aW9uUHJlZml4fS1saW5rLWdlbmVyYWwuY3NzIiwgOnJlbCA9PiAic3R5bGVzaGVldCIsIDp0eXBlID0+ICJ0ZXh0L2NzcyIgfSAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9ibGVzcy1mb250c2l6ZS1tZWRpdW0uY3NzJyBpZD0nY3NzZm9udHNpemUnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvU3R5bGUvQ1NTL2hlYWx0aHF1ZXN0aW9ubmFpcmVwZGYtZm9udGZhbWlseS1icHJlcGxheS5jc3MnIGlkPSdjc3Nmb250ZmFtaWx5JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9oZWFsdGhxdWVzdGlvbm5haXJlcGRmLXRoZW1lLXR1cnFvaXNlLXN2Zy5jc3MnIGlkPSdjc3N0aGVtZScgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPCEtLSAlbGlua3sgOmlkID0+ICJjc3NyZXNwb25zaXZlIiwgOmhyZWYgPT4gIiN7dXJsQ1NTfSN7dXJsQ1NTU2VjdGlvblByZWZpeH0tcmVzcG9uc2l2ZS1nZW5lcmFsLmNzcyIsIDpyZWwgPT4gInN0eWxlc2hlZXQiLCA6dHlwZSA9PiAidGV4dC9jc3MiIH0gLS0+DQogICAgPCEtLSBKQVZBIFNDUklQVCAtLT4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnkubW9iaWxlLTEuNC41Lm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnktMS4xMS4xLm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnktbWlncmF0ZS0xLjIuMS5taW4uanMnIHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvSmF2YVNjcmlwdC9NaW5pbWl6ZWQvaWJyYWhpbWF6aXoubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2licmFoaW1heml6LWhlYWx0aHF1ZXN0aW9ubmFpcmUubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2lvcy1pbnRlZ3JhdGlvbi1oZWFsdGhxdWVzdGlvbm5haXJlLm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0Pg0KICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKQ0KICAgICAgew0KICAgICAgCWltYWdlU2VsZWN0b3IoIi4uLy4uL2pxdWVyeUxpYnJhcnkvUmVzb3VyY2UvIik7DQogICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCiAgICA8dGl0bGU+QkNBIExpZmUgLSBCTEVTUywgSGVhbHRoIFF1ZXN0aW9ubmFpcmUgMSBGb3JtPC90aXRsZT4NCiAgICA8IS0tIEpRVUVSWSAtLT4NCiAgICA8c2NyaXB0Pg0KICAgICAgLy8gSU5JVElBTElaQVRJT04NCiAgICAgIA0KICAgICAgdmFyIHN0cmluZ1BhZ2VUeXBlQ3VycmVudCA9IHN0cmluZ1BhZ2VUeXBlUERGOw0KICAgICAgDQogICAgICANCiAgICAgIC8vIERPQ1VNRU5UIFJFQURZDQogICAgICANCiAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkNCiAgICAgIHsNCiAgICAgIAl2YXIganNvbkR1bW15ID0gJ3sicmVzdWx0Ijp7InJlYWRGcm9tREIiOlt7ImVsZW1lbnRJRCI6IlRleHRQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25NZWRpY2F0aW9uTmFtZTAiLCJWYWx1ZSI6IkRlY29sZ2VuLiJ9LHsiZWxlbWVudElEIjoiVGV4dFByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbk1lZGljYXRpb25Eb3NlMCIsIlZhbHVlIjoiMTUgbWcuIn0seyJlbGVtZW50SUQiOiJUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uTWVkaWNhdGlvbkZyZXF1ZW5jeTAiLCJWYWx1ZSI6IjEga2FsaSBzZWhhcmkuIn0seyJlbGVtZW50SUQiOiJUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uTWVkaWNhdGlvbk5hbWUxIiwiVmFsdWUiOiJQYW5hZG9sLiJ9LHsiZWxlbWVudElEIjoiVGV4dFByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbk1lZGljYXRpb25Eb3NlMSIsIlZhbHVlIjoiMjAgbWcuIn0seyJlbGVtZW50SUQiOiJUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uTWVkaWNhdGlvbkZyZXF1ZW5jeTEiLCJWYWx1ZSI6IjIga2FsaSBzZWhhcmkuIn0seyJlbGVtZW50SUQiOiJUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uTWVkaWNhdGlvbk5hbWUyIiwiVmFsdWUiOiJWaXRhbWluIEMuIn0seyJlbGVtZW50SUQiOiJUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uTWVkaWNhdGlvbkRvc2UyIiwiVmFsdWUiOiIxMDAgbWcuIn0seyJlbGVtZW50SUQiOiJUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uTWVkaWNhdGlvbkZyZXF1ZW5jeTIiLCJWYWx1ZSI6IjEga2FsaSBzZWhhcmkuIn1dfX0nDQogICAgICANCiAgICAgIAkvLyBTRUNUSU9OIEdFTkVSQUwNCiAgICAgIA0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRTUEFKTnVtYmVyIiwgMTEsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRQcm9zcGVjdGl2ZUluc3VyZWRGdWxsTmFtZSIsIDE5LCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRnVsbE5hbWUybmQiLCAxOSwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJpcnRoUGxhY2UiLCAxNiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJpcnRoRGF5IiwgMiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJpcnRoTW9udGgiLCAyLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmlydGhZZWFyIiwgNCwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICANCiAgICAgIAkvLyBTRUNUSU9OIE1BTkRBVE9SWQ0KICAgICAgDQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkZpcnN0VGltZURheSIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25GaXJzdFRpbWVNb250aCIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25GaXJzdFRpbWVZZWFyIiwgNCwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICANCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlUHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uV2hlblN0YXJ0RGF5IiwgMiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbldoZW5TdGFydE1vbnRoIiwgMiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbldoZW5TdGFydFllYXIiLCA0LCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKQ0KICAgICAgDQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVNpZ25lZERheSIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVTaWduZWRNb250aCIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVTaWduZWRZZWFyIiwgNCwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICANCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0QWdlbnROYW1lIiwgMTYsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRBZ2VudENvZGUiLCAxMSwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjVGV4dFByb2R1Y3RDb2RlIiwgMTEsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgDQogICAgICAJLy8gU0VUVEVSDQogICAgICANCiAgICAgIAlmb290ZXJTZXR0ZXJGb3JIZWFsdGhRdWVzdGlvbm5haXJlUERGKCJPUC9VVy8wMTEyLzA2MTYwMSIsIDMpOw0KICAgICAgCXRpdGxlU2V0dGVyRm9ySGVhbHRoUXVlc3Rpb25uYWlyZVBERigiS1VFU0lPTkVSIFRFS0FOQU4gREFSQUggVElOR0dJIik7DQogICAgICAJdGFibGVQREZTdGF0aWNHZW5lcmFsR2VuZXJhdG9yKCJUYWJsZVByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbk1lZGljYXRpb24iLCBbIk5hbWUiLCAiRG9zZSIsICJGcmVxdWVuY3kiXSwgNSk7DQogICAgICANCiAgICAgIAkvLyB2YXIgb2JqZWN0Q29udGVudCA9IEpTT04ucGFyc2UoanNvbkR1bW15KTsNCiAgICAgIAkvLyBnZXRGcm9tRGF0YWJhc2VGb3JIZWFsdGhRdWVzdGlvbm5haXJlKG9iamVjdENvbnRlbnQucmVzdWx0LnJlYWRGcm9tREIsIHN0cmluZ1BhZ2VUeXBlUERGKTsNCiAgICAgIH0pOw0KICAgIDwvc2NyaXB0Pg0KICA8L2hlYWQ+DQogIDwhLS0gQk9EWSAtLT4NCiAgPGJvZHk+DQogICAgPCEtLSBIRUFERVIgLS0+DQogICAgPGhlYWRlcj4NCiAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyJz4NCiAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0xvZ28vbG9nb19iY2FsaWZlX3ByaW1hcnkuc3ZnJz4NCiAgICAgICAgPGRpdiBjbGFzcz0nQWRkcmVzcyc+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlciBQb3NpdGlvbmVyUmlnaHQnPlBUIEFzdXJhbnNpIEppd2EgQkNBPC9zcGFuPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICBDaGFzZSBQbGF6YSBMYW50YWkgMjIgfCBKbC4gSmVuZC4gU3VkaXJtYW4gS2F2IDIxLCBKYWthcnRhIDEyOTIwDQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICBUZWxlcG9uOiAoMDIxKSAyMSA4ODggMDAwIHwgRmFrczogKDAyMSkgMjkzNCA3OTc3IHwgRW1haWw6IGN1c3RvbWVyQGJjYWxpZmUuY28uaWQNCiAgICAgICAgICA8L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8YnI+DQogICAgICA8L3NlY3Rpb24+DQogICAgICA8aDE+PC9oMT4NCiAgICAgIDxicj4NCiAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uTm90ZSc+DQogICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgIDxwPlBlcmx1IGRpcGVyaGF0aWthbjo8L3A+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPldhamliIGRpaXNpIG9sZWggKENhbG9uKSBQZW1lZ2FuZyBQb2xpcyBkYW4vYXRhdSAoQ2Fsb24pIFRlcnRhbmdndW5nIGRlbmdhbiB0aW50YSBoaXRhbSwgaHVydWYgY2V0YWssIGplbGFzIGRhbiBtZW1iZXJpIHRhbmRhICjiiJopIHBhZGEga290YWsgc2VzdWFpIHBpbGloYW4uPC9saT4NCiAgICAgICAgICAgIDxsaT5XYWppYiBtZW5hbmRhdGFuZ2FuaSBzZXRpYXAga29yZWtzaSBwZW51bGlzYW4gKGppa2EgYWRhKS48L2xpPg0KICAgICAgICAgICAgPGxpPlBlbnVsaXNhbiB0YW5nZ2FsIHNlbGFsdSBtZW1wZXJndW5ha2FuIGZvcm1hdCBUYW5nZ2FsLUJ1bGFuLVRhaHVuLjwvbGk+DQogICAgICAgICAgICA8bGk+QXBhYmlsYSBkaXBlcmx1a2FuIGxlbWJhciB0YW1iYWhhbiwgZGFwYXQgbWVtcGVyZ3VuYWthbiBGb3JtdWxpciBQZXJueWF0YWFuL0FtYW5kZW1lbiBVbnR1ayBTUEFKICYgUGVuZ2FqdWFuIFBlbGF5YW5hbiBQb2xpcyB5YW5nIGRpaXNpIGRhbiBkaXRhbmRhdGFuZ2FuaSBvbGVoIChDYWxvbikgUGVtZWdhbmcgUG9saXMsIChDYWxvbikgVGVydGFuZ2d1bmcgZGFuIFRlbmFnYSBQZW5qdWFsLjwvbGk+DQogICAgICAgICAgICA8bGk+QXBhYmlsYSB0ZWxhaCBkaWlzaSBsZW5na2FwIG9sZWggKENhbG9uKSBQZW1lZ2FuZyBQb2xpcyBkYW4vYXRhdSAoQ2Fsb24pIFRlcnRhbmdndW5nIHdhamliIGRpc2VyYWhrYW4ga2UgS2FudG9yIFB1c2F0IFBUIEFzdXJhbnNpIEppd2EgQkNBICjigJxQZW5hbmdndW5n4oCdKS48L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9zZWN0aW9uPg0KICAgIDwvaGVhZGVyPg0KICAgIDwhLS0gTUFJTiAtLT4NCiAgICA8bWFpbj4NCiAgICAgIDxmb3JtPg0KICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkN1c3RvbWVyJz4NCiAgICAgICAgICA8aDI+SS4gRGF0YSAoQ2Fsb24pIFRlcnRhbmdndW5nPC9oMj4NCiAgICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MS48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBXcmFwIFBsYWluIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRTUEFKTnVtYmVyJz5Ob21vciBTdXJhdCBQZW5nYWp1YW4gQXN1cmFuc2kgSml3YTo8L2xhYmVsPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0U1BBSk51bWJlcic+PC90YWJsZT4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQbGFpbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFNQQUpOdW1iZXInIHN0eWxlPSdtYXJnaW4tdG9wOiAtMjVweDsnPihTUEFKKS9Qb2xpcyBBc3VyYW5zaTwvbGFiZWw+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mi48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUGxhaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZ1bGxOYW1lJz5OYW1hIExlbmdrYXAgKENhbG9uKSBUZXJ0YW5nZ3VuZzo8L2xhYmVsPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRnVsbE5hbWUnPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUGxhaW4gTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRGdWxsTmFtZScgc3R5bGU9J21hcmdpbi10b3A6IC0yNXB4Oyc+KHNlc3VhaSBkZW5nYW4gS1RQL1Bhc3Bvcik8L2xhYmVsPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRnVsbE5hbWUybmQnPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mzwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBNZWRpdW0gUGxhaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJpcnRoUGxhY2UnPlRlbXBhdCwgVGFuZ2dhbCBsYWhpciAoQ2Fsb24pIFRlcnRhbmdndW5nOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmlydGhQbGFjZScgcmVhZG9ubHk9J3RydWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPiw8L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCaXJ0aERheSc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmlydGhNb250aCc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmlydGhZZWFyJz48L3RhYmxlPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgPGgyPklJLiBXQUpJQiBESUxFTkdLQVBJIChDQUxPTikgVEVSVEFOR0dVTkc8L2gyPg0KICAgICAgICA8ZmllbGRzZXQgY2xhc3M9J1dpdGhvdXREb3VibGVEb3QnPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4xLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uRmlyc3RUaW1lJz5hLiBLYXBhbiBwZXJ0YW1hIGthbGkgQW5kYSBtZW5nZXRhaHVpIG1lbmRlcml0YSB0ZWthbmFuIGRhcmFoIHRpbmdnaT88L2xhYmVsPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25GaXJzdFRpbWVZZWFyJz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uRmlyc3RUaW1lTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25GaXJzdFRpbWVEYXknPjwvdGFibGU+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdOdW1iZXJQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25TeXN0b2xpYyc+Yi4gQmVyYXBhIHRla2FuYW4gZGFyYWggQW5kYSBzYWF0IGl0dTwvbGFiZWw+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz5tbUhnPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGlkPSdOdW1iZXJQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25EaWFzdG9saWMnIHR5cGU9J251bWJlcic+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBQb3NpdGlvbmVyUmlnaHQnPi88L3NwYW4+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBpZD0nTnVtYmVyUHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uU3lzdG9saWMnIHR5cGU9J251bWJlcic+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkNoZWNrUmVhc29uJz5jLiBNZW5nYXBhIEFuZGEgc2FhdCBpdHUgbWVsYWt1a2FuIHBlbWVyaWtzYWFuIHRla2FuYW4gZGFyYWg\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkNoZWNrUmVhc29uUm91dGluZScgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25DaGVja1JlYXNvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdyb3V0aW5lJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uQ2hlY2tSZWFzb25Sb3V0aW5lJz5QZW1lcmlrc2FhbiBSdXRpbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25DaGVja1JlYXNvbk90aGVycycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25DaGVja1JlYXNvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvdGhlcic+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkNoZWNrUmVhc29uT3RoZXJzJz5LZWx1aGFuIExhaW5ueWEgKG1vaG9uIGplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaSkuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uQ2hlY2tSZWFzb25PdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uRG9jdG9yQ29uc3VsdCc+ZC4gQXBha2FoIGRpa29uc3VsdGFzaWthbiBrZSBEb2t0ZXI\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uRG9jdG9yQ29uc3VsdE5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uRG9jdG9yQ29uc3VsdE5vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkRvY3RvckNvbnN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkRvY3RvckNvbnN1bHRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25Eb2N0b3JDb25zdWx0WWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkRvY3RvckNvbnN1bHQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J051bWJlckluZGVudCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmdpc2kga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkhUVVBEb2N0b3JOYW1lJz5OYW1hIExlbmdrYXAgRG9rdGVyOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uSFRVUERvY3Rvck5hbWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25IVFVQRG9jdG9yQWRkcmVzcyc+QWxhbWF0IExlbmdrYXAgRG9rdGVyOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uSFRVUERvY3RvckFkZHJlc3MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJz5lLiBCZXJhcGEgc2VyaW5nIEFuZGEga29udHJvbCBrZSBEb2t0ZXI8L2xhYmVsPg0KICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBNYXJnaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbkhvd09mdGVuQ2hlY2t1cFRvRG9jdG9yJz5rYWxpIHBlcjwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdTZWxlY3RQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25Ib3dPZnRlbkNoZWNrdXBUb0RvY3RvclBlcmlvZCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4yLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uV2hlbic+QXBha2FoIGtlbmFpa2FuIHRla2FuYW4gZGFyYWggQW5kYSB0ZXJzZWJ1dCBiZXJodWJ1bmdhbiBkZW5nYW4gcGVueWFraXQgc2ViYWdhaSBiZXJpa3V0OjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG9IZWFydCcgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0naGVhcnQnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG9IZWFydCc+SmFudHVuZzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG9CcmFpbicgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nYnJhaW4nPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG9CcmFpbic+T3RhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG9LaWRuZXknIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSHlwZXJ0ZW5zaW9uUmVsYXRlZFRvJyB0eXBlPSdyYWRpbycgdmFsdWU9J2tpZG5leSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvblJlbGF0ZWRUb0tpZG5leSc+R2luamFsPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvblJlbGF0ZWRUb090aGVycycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG8nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nb3RoZXInPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG9PdGhlcnMnPkxhaW5ueWEsIHNlYnV0a2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZURvdCBMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25SZWxhdGVkVG9PdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+My48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbldoZW5TdGFydERheSc+YS4gS2FwYW4gQW5kYSBtZW11bGFpIHBlbmdvYmF0YW4ga2VuYWlrYW4gdGVrYW5hbiBkYXJhaCB0ZXJzZWJ1dDwvbGFiZWw+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lclJpZ2h0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbldoZW5TdGFydFllYXInPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lclJpZ2h0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJSaWdodCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25XaGVuU3RhcnRNb250aCc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lclJpZ2h0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEh5cGVydGVuc2lvbldoZW5TdGFydERheSc+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRIeXBlcnRlbnNpb25XaGVuTGFzdCc+Yi4JQXBha2FoIEFuZGEgcGVybmFoIGJlcmhlbnRpIG1pbnVtIG9iYXQ\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_hypertension_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_darahtinggi.html","FolderName":"20160803","Id":29,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_respiratory_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_pernapasan.html","FolderName":"20160803","Id":30,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_tumor_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_tumor.html","FolderName":"20160803","Id":31,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJGbGlnaHRGTEpvYlBpbG90JyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckZsaWdodEZMSm9iJyB0eXBlPSdyYWRpbycgdmFsdWU9J3BpbG90Jz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRmxpZ2h0RkxKb2JQaWxvdCc+UGlsb3Q8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRmxpZ2h0RkxKb2JOYXZpZ2F0b3InIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRmxpZ2h0RkxKb2InIHR5cGU9J3JhZGlvJyB2YWx1ZT0nbmF2aWdhdG9yJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRmxpZ2h0RkxKb2JOYXZpZ2F0b3InPk5hdmlnYXRvcjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJGbGlnaHRGTEpvYlN0ZXdhcmRlc3MnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRmxpZ2h0RkxKb2InIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc3Rld2FyZGVzcyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckZsaWdodEZMSm9iU3Rld2FyZGVzcyc+UHJhbXVnYXJpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjIuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRmxpZ2h0SGF2ZVBsYW5lWWVzJz5BcGFrYWggQW5kYSBtZW1pbGlraSBwZXNhd2F0IHNlbmRpcmk\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRmxpZ2h0SGF2ZVBsYW5lWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckZsaWdodEhhdmVQbGFuZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRmxpZ2h0SGF2ZVBsYW5lWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJGbGlnaHRIYXZlUGxhbmVObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJGbGlnaHRIYXZlUGxhbmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJGbGlnaHRIYXZlUGxhbmVObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+My48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJGbGlnaHRQbGFuZVR5cGUnPg0KICAgICAgICAgICAgU2VidXRrYW4gamVuaXMgcGVzYXdhdCBhcGFrYWggeWFuZyBBbmRhIHRlcmJhbmdrYW4gLyB0dW1wYW5naSA\/DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICBNb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuDQogICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVyRmxpZ2h0UGxhbmVUeXBlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjQuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RhYmxlUG9saWN5SG9sZGVyRmxpZ2h0TGljZW5zZUxpc3QnPk1vaG9uIHNlYnV0a2FuIHNlY2FyYSByaW5jaSBsaXNlbnNpIGRhbi9hdGF1IHNlcnRpZmlrYXQgcGVuZXJiYW5nYW4geWFuZyBBbmRhIG1pbGlraS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+TGlzZW5zaS9TZXJ0aWZpa2F0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+VGFuZ2dhbCBQZXJvbGVoYW48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5NYXNhIEJlcmxha3U8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjInIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlckZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+NS48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyRmxpZ2h0U2NvcGUnPg0KICAgICAgICAgICAgQXBha2FoIEFuZGEgYmVyZW5jYW5hIHVudHVrIG1lcnViYWggY2FrdXBhbiBsaXNlbnNpIHlhbmcgc2FhdCBpbmkgQW5kYSBtaWxpa2k\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_flight.html","FileNameIndo":"pemegangpolis_kuesioneraktivitas_penerbangan.html","FolderName":"20160803","Id":32,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRGbGlnaHRGTEpvYlBpbG90JyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEZsaWdodEZMSm9iJyB0eXBlPSdyYWRpbycgdmFsdWU9J3BpbG90Jz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0RkxKb2JQaWxvdCc+UGlsb3Q8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0RkxKb2JOYXZpZ2F0b3InIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0RkxKb2InIHR5cGU9J3JhZGlvJyB2YWx1ZT0nbmF2aWdhdG9yJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0RkxKb2JOYXZpZ2F0b3InPk5hdmlnYXRvcjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRGbGlnaHRGTEpvYlN0ZXdhcmRlc3MnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0RkxKb2InIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc3Rld2FyZGVzcyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEZsaWdodEZMSm9iU3Rld2FyZGVzcyc+UHJhbXVnYXJpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjIuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0SGF2ZVBsYW5lWWVzJz5BcGFrYWggQW5kYSBtZW1pbGlraSBwZXNhd2F0IHNlbmRpcmk\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0SGF2ZVBsYW5lWWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEZsaWdodEhhdmVQbGFuZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0SGF2ZVBsYW5lWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRGbGlnaHRIYXZlUGxhbmVObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRGbGlnaHRIYXZlUGxhbmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRGbGlnaHRIYXZlUGxhbmVObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+My48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRGbGlnaHRQbGFuZVR5cGUnPg0KICAgICAgICAgICAgU2VidXRrYW4gamVuaXMgcGVzYXdhdCBhcGFrYWggeWFuZyBBbmRhIHRlcmJhbmdrYW4gLyB0dW1wYW5naSA\/DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICBNb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkuDQogICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0gUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0UGxhbmVUeXBlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjQuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RhYmxlUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0TGljZW5zZUxpc3QnPk1vaG9uIHNlYnV0a2FuIHNlY2FyYSByaW5jaSBsaXNlbnNpIGRhbi9hdGF1IHNlcnRpZmlrYXQgcGVuZXJiYW5nYW4geWFuZyBBbmRhIG1pbGlraS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+TGlzZW5zaS9TZXJ0aWZpa2F0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+VGFuZ2dhbCBQZXJvbGVoYW48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5NYXNhIEJlcmxha3U8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjInIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZU9idGFpbjUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZsaWdodExpY2Vuc2VDZXJ0aWZpY2F0ZUV4dGVudGlvbjUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+NS48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkRmxpZ2h0U2NvcGUnPg0KICAgICAgICAgICAgQXBha2FoIEFuZGEgYmVyZW5jYW5hIHVudHVrIG1lcnViYWggY2FrdXBhbiBsaXNlbnNpIHlhbmcgc2FhdCBpbmkgQW5kYSBtaWxpa2k\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_flight_IN.html","FileNameIndo":"tertanggung_kuesioneraktivitas_penerbangan.html","FolderName":"20160803","Id":36,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaWxpdGFyeVVuaXRQb2xpY2UnPktlcG9saXNpYW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbGl0YXJ5VW5pdFBvbGljZScgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaWxpdGFyeVVuaXQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ncG9saWNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbGl0YXJ5VW5pdE1pbGl0YXJ5Jz5NaWxpdGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaWxpdGFyeVVuaXRNaWxpdGFyeScgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaWxpdGFyeVVuaXQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nbWlsaXRhcnknPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjIuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyTWlsaXRhcnlEdXR5Jz5Nb2hvbiBqZWxhc2thbiBkaXZpc2kvYmFnaWFuLCBqYWJhdGFuLCBwYW5na2F0IGRhbiB0ZW1wYXQgYmVydHVnYXMgQW5kYSBzYWF0IGluaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaSA6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyTWlsaXRhcnlEdXR5JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjMuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBGdWxsIFBvc2l0aW9uZXJMZWZ0Jz5BcGFrYWggQW5kYSBtZWxha3VrYW4ga2VnaWF0YW4geWFuZyBiZXJpc2lrbyB0aW5nZ2ksIHNlc3VhaSBkZW5nYW4gdGFiZWwgcGVydGFueWFhbiBkaWJhd2FoIGluaSA\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_military.html","FileNameIndo":"pemegangpolis_kuesioneraktivitas_angkatanbersenjata.html","FolderName":"20160803","Id":37,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaWxpdGFyeVVuaXRQb2xpY2UnPktlcG9saXNpYW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbGl0YXJ5VW5pdFBvbGljZScgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaWxpdGFyeVVuaXQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ncG9saWNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbGl0YXJ5VW5pdE1pbGl0YXJ5Jz5NaWxpdGVyPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaWxpdGFyeVVuaXRNaWxpdGFyeScgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaWxpdGFyeVVuaXQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nbWlsaXRhcnknPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjIuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkTWlsaXRhcnlEdXR5Jz5Nb2hvbiBqZWxhc2thbiBkaXZpc2kvYmFnaWFuLCBqYWJhdGFuLCBwYW5na2F0IGRhbiB0ZW1wYXQgYmVydHVnYXMgQW5kYSBzYWF0IGluaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaSA6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkTWlsaXRhcnlEdXR5JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjMuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBGdWxsIFBvc2l0aW9uZXJMZWZ0Jz5BcGFrYWggQW5kYSBtZWxha3VrYW4ga2VnaWF0YW4geWFuZyBiZXJpc2lrbyB0aW5nZ2ksIHNlc3VhaSBkZW5nYW4gdGFiZWwgcGVydGFueWFhbiBkaWJhd2FoIGluaSA\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_military_IN.html","FileNameIndo":"tertanggung_kuesioneraktivitas_angkatanbersenjata.html","FolderName":"20160803","Id":38,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0nTXVsdGkgRnVsbCBJdGVtJyBpZD0nQXJlYVBvbGljeUhvbGRlck1pbmluZ0FyZWFQZXJjZW50Jz48L3RleHRhcmVhPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRm9vdGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogMTcwcHg7ICc+DQogICAgICAgICAgICA8Zm9vdGVyPg0KICAgICAgICAgICAgICA8aW1nIHNyYz0nLi4vLi4vUmVzb3VyY2UvSWNvbi9UdXJxb2lzZS9pY29uX2hhbG9iY2Euc3ZnJz4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlcic+UFQgQXN1cmFuc2kgSml3YSBCQ0EgdGVyZGFmdGFyIGRhbiBkaWF3YXNpIG9sZWggT3Rvcml0YXMgSmFzYSBLZXVhbmdhbjwvc3Bhbj4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCc+PC9zcGFuPg0KICAgICAgICAgICAgPC9mb290ZXI+DQogICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkhlYWRlcicgc3R5bGU9J21hcmdpbi10b3A6IDYwcHg7IHBvc2l0aW9uOiByZWxhdGl2ZTsgdG9wOiA2MHB4OyBkaXNwbGF5OiBibG9jazsnPg0KICAgICAgICAgICAgICA8aW1nIHNyYz0nLi4vLi4vUmVzb3VyY2UvTG9nby9sb2dvX2JjYWxpZmVfcHJpbWFyeS5zdmcnPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdBZGRyZXNzJz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyIFBvc2l0aW9uZXJSaWdodCc+UFQgQXN1cmFuc2kgSml3YSBCQ0E8L3NwYW4+DQogICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXRhaWwgUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgICAgICAgIENoYXNlIFBsYXphIExhbnRhaSAyMiB8IEpsLiBKZW5kLiBTdWRpcm1hbiBLYXYgMjEsIEpha2FydGEgMTI5MjANCiAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgIFRlbGVwb246ICgwMjEpIDIxIDg4OCAwMDAgfCBGYWtzOiAoMDIxKSAyOTM0IDc5NzcgfCBFbWFpbDogY3VzdG9tZXJAYmNhbGlmZS5jby5pZA0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgc3R5bGU9J21hcmdpbi10b3A6IDYwcHg7Jz41Ljwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nQXJlYVBvbGljeUhvbGRlck1pbmluZ091dGRvb3InIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4Oyc+DQogICAgICAgICAgICBBcGFrYWggQW5kYSBpa3V0IHNlcnRhIGRhbGFtIGFrdGlmaXRhcyBUYW1iYW5nIFRlcmJ1a2EvDQogICAgICAgICAgICA8aT4NCiAgICAgICAgICAgICAgT3BlbiBDYXN0IE1pbmluZz8NCiAgICAgICAgICAgIDwvaT4NCiAgICAgICAgICA8L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ09wZW5DYXN0Tm8nIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4Oyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ09wZW5DYXN0Tm8nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nT3BlbkNhc3QnIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4OycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4Oyc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ09wZW5DYXN0WWVzJyBzdHlsZT0nbWFyZ2luLXRvcDogNjBweDsnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaW5pbmdPcGVuQ2FzdFllcycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaW5pbmdPcGVuQ2FzdCcgc3R5bGU9J21hcmdpbi10b3A6IDYwcHg7JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0JyBzdHlsZT0nbWFyZ2luLXRvcDogNjBweDsnPjwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBJdGVtIE51bWJlckluZGVudCc+SmlrYSAiWWEiIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpYmF3YWggaW5pPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9J011bHRpIEZ1bGwgSXRlbScgaWQ9J0FyZWFQb2xpY3lIb2xkZXJNaW5pbmdPdXRkb29yJz48L3RleHRhcmVhPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyRml4IFNpbmdsZSBJdGVtJz42Ljwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIEl0ZW0nIGZvcj0nQXJlYVBvbGljeUhvbGRlck1pbmluZ1dvcmtMb2NhdGlvbic+RGltYW5hIGxva2FzaSBBbmRhIGJla2VyamE\/PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBJdGVtIE51bWJlckluZGVudCc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGliYXdhaCBpbmkgKHNlYnV0a2FuIG5hbWEgbG9rYXNpIGRhbiBkYWVyYWgvcHJvdmluc2lueWEpPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9J011bHRpIEZ1bGwgSXRlbScgaWQ9J0FyZWFQb2xpY3lIb2xkZXJNaW5pbmdXb3JrTG9jYXRpb24nPjwvdGV4dGFyZWE+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyRml4IFNpbmdsZSBJdGVtJz43Ljwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIEl0ZW0nIGZvcj0nQXJlYU1pbGl0YXJ5WW91clVuaXR5Jz5BcGFiaWxhIEFuZGEgYmVrZXJqYSBkaSBsYXBhbmdhbiwgbW9ob24gbWVuamF3YWIgcGVydGFueWFhbi1wZXJ0YW55YWFuIGJlcmlrdXQ6PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyTWluaW5nT2ZmU2hvcmUnPmEuIERpbWFuYWthaCBsb2thc2kgQW5kYSBiZWtlcmphIGJlcmFkYT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nT0xMb2NhdGlvbk9uU2hvcmUnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nT0xMb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvbnNob3JlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ09MTG9jYXRpb25PblNob3JlJz5QZXJtdWthYW4gdGFuYWgvZGFyYXQ8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nT0xMb2NhdGlvbk9mU2hvcmUnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nT0xMb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvZnNob3JlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ09MTG9jYXRpb25PZlNob3JlJz5MZXBhcyBwYW50YWk8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJNaW5pbmdVbmRlckdyb3VuZCc+Yi4gQmlsYSBkaSBkYXJhdCBhcGFrYWggZGkgcGVybXVrYWFuIHRhbmFoIGF0YXUgZGkgYmF3YWggdGFuYWg\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ09MTG9jYXRpb25PblNob3JlWWVzR3JvdW5kJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ09MTG9jYXRpb25PblNob3JlWWVzJyB0eXBlPSdyYWRpbycgdmFsdWU9J29uc2hvcmUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nT0xMb2NhdGlvbk9uU2hvcmVZZXNHcm91bmQnPlBlcm11a2FhbiB0YW5haC9kYXJhdDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaW5pbmdPTExvY2F0aW9uT25TaG9yZVllc1VuZGVyZ3JvdW5kJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ09MTG9jYXRpb25PblNob3JlWWVzJyB0eXBlPSdyYWRpbycgdmFsdWU9J29mc2hvcmUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nT0xMb2NhdGlvbk9uU2hvcmVZZXNVbmRlcmdyb3VuZCc+QmF3YWggdGFuYWgsIHNlYnV0a2FuIGtlZGFsYW1hbm55YSA6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZURvdCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVyTWluaW5nT0xMb2NhdGlvbk9uU2hvcmVVbmRlcmdyb3VuZERlcHRoJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5tZXRlcjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaW5pbmdEdXR5Jz5jLiBBcGFrYWggQW5kYSBqdWdhIGJlcnR1Z2FzIGRpIGxlcGFzIHBhbnRhaSBkYW4vYXRhdSBiYXdhaCB0YW5haD88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaW5pbmdEdXR5WWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ0R1dHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ0R1dHlZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ0R1dHlObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaW5pbmdEdXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nRHV0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIEl0ZW0gTnVtYmVySW5kZW50Jz5KaWthICJZYSIgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGliYXdhaCBpbmk8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBJdGVtIE51bWJlckluZGVudCc+KEJlcmFwYSBmcmVrdWVuc2lueWEgZGFsYW0gMSAoc2F0dSkgdGFodW4gYmVyYWRhIGRpIGxva2FzaSB0ZXJzZWJ1dCBkYW4gYmVyYXBhIGxhbWEpPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1NpbmdsZSBGdWxsIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyTWluaW5nRHV0eURlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nRXhwbG9zaXZlJz5kLiBBcGFrYWggZGFsYW0gYmVrZXJqYSBBbmRhIG1lbmdndW5ha2FuIGJhaGFuIHBlbGVkYWs\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nVXNpbmdFeHBsb3NpdmVZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nVXNpbmdFeHBsb3NpdmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ1VzaW5nRXhwbG9zaXZlWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJNaW5pbmdVc2luZ0V4cGxvc2l2ZU5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlck1pbmluZ1VzaW5nRXhwbG9zaXZlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nVXNpbmdFeHBsb3NpdmVObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyTWluaW5nRGl2aW5nRHV0eSc+ZS4gQXBha2FoIEFuZGEgbWVsYWt1a2FuIHR1Z2FzIHBlbnllbGFtYW4\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_oilgas.html","FileNameIndo":"pemegangpolis_kuesioneraktivitas_pertambangan.html","FolderName":"20160803","Id":39,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0nTXVsdGkgRnVsbCBJdGVtJyBpZD0nQXJlYVByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ0FyZWFQZXJjZW50Jz48L3RleHRhcmVhPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRm9vdGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogMTcwcHg7ICc+DQogICAgICAgICAgICA8Zm9vdGVyPg0KICAgICAgICAgICAgICA8aW1nIHNyYz0nLi4vLi4vUmVzb3VyY2UvSWNvbi9UdXJxb2lzZS9pY29uX2hhbG9iY2Euc3ZnJz4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlcic+UFQgQXN1cmFuc2kgSml3YSBCQ0EgdGVyZGFmdGFyIGRhbiBkaWF3YXNpIG9sZWggT3Rvcml0YXMgSmFzYSBLZXVhbmdhbjwvc3Bhbj4NCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCc+PC9zcGFuPg0KICAgICAgICAgICAgPC9mb290ZXI+DQogICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICAgIDxoZWFkZXI+DQogICAgICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkhlYWRlcicgc3R5bGU9J21hcmdpbi10b3A6IDYwcHg7IHBvc2l0aW9uOiByZWxhdGl2ZTsgdG9wOiA2MHB4OyBkaXNwbGF5OiBibG9jazsnPg0KICAgICAgICAgICAgICA8aW1nIHNyYz0nLi4vLi4vUmVzb3VyY2UvTG9nby9sb2dvX2JjYWxpZmVfcHJpbWFyeS5zdmcnPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdBZGRyZXNzJz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyIFBvc2l0aW9uZXJSaWdodCc+UFQgQXN1cmFuc2kgSml3YSBCQ0E8L3NwYW4+DQogICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXRhaWwgUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgICAgICAgIENoYXNlIFBsYXphIExhbnRhaSAyMiB8IEpsLiBKZW5kLiBTdWRpcm1hbiBLYXYgMjEsIEpha2FydGEgMTI5MjANCiAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgIFRlbGVwb246ICgwMjEpIDIxIDg4OCAwMDAgfCBGYWtzOiAoMDIxKSAyOTM0IDc5NzcgfCBFbWFpbDogY3VzdG9tZXJAYmNhbGlmZS5jby5pZA0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgc3R5bGU9J21hcmdpbi10b3A6IDYwcHg7Jz41Ljwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nQXJlYVByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ091dGRvb3InIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4Oyc+DQogICAgICAgICAgICBBcGFrYWggQW5kYSBpa3V0IHNlcnRhIGRhbGFtIGFrdGlmaXRhcyBUYW1iYW5nIFRlcmJ1a2EvDQogICAgICAgICAgICA8aT4NCiAgICAgICAgICAgICAgT3BlbiBDYXN0IE1pbmluZz8NCiAgICAgICAgICAgIDwvaT4NCiAgICAgICAgICA8L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ09wZW5DYXN0Tm8nIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4Oyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ09wZW5DYXN0Tm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nT3BlbkNhc3QnIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4OycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4Oyc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ09wZW5DYXN0WWVzJyBzdHlsZT0nbWFyZ2luLXRvcDogNjBweDsnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdPcGVuQ2FzdFllcycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdPcGVuQ2FzdCcgc3R5bGU9J21hcmdpbi10b3A6IDYwcHg7JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0JyBzdHlsZT0nbWFyZ2luLXRvcDogNjBweDsnPjwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBJdGVtIE51bWJlckluZGVudCc+SmlrYSAiWWEiIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpYmF3YWggaW5pPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9J011bHRpIEZ1bGwgSXRlbScgaWQ9J0FyZWFQcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdPdXRkb29yJz48L3RleHRhcmVhPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyRml4IFNpbmdsZSBJdGVtJz42Ljwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIEl0ZW0nIGZvcj0nQXJlYVByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ1dvcmtMb2NhdGlvbic+RGltYW5hIGxva2FzaSBBbmRhIGJla2VyamE\/PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBJdGVtIE51bWJlckluZGVudCc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGliYXdhaCBpbmkgKHNlYnV0a2FuIG5hbWEgbG9rYXNpIGRhbiBkYWVyYWgvcHJvdmluc2lueWEpPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9J011bHRpIEZ1bGwgSXRlbScgaWQ9J0FyZWFQcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdXb3JrTG9jYXRpb24nPjwvdGV4dGFyZWE+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyRml4IFNpbmdsZSBJdGVtJz43Ljwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIEl0ZW0nIGZvcj0nQXJlYU1pbGl0YXJ5WW91clVuaXR5Jz5BcGFiaWxhIEFuZGEgYmVrZXJqYSBkaSBsYXBhbmdhbiwgbW9ob24gbWVuamF3YWIgcGVydGFueWFhbi1wZXJ0YW55YWFuIGJlcmlrdXQ6PC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nT2ZmU2hvcmUnPmEuIERpbWFuYWthaCBsb2thc2kgQW5kYSBiZWtlcmphIGJlcmFkYT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nT0xMb2NhdGlvbk9uU2hvcmUnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nT0xMb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvbnNob3JlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ09MTG9jYXRpb25PblNob3JlJz5QZXJtdWthYW4gdGFuYWgvZGFyYXQ8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nT0xMb2NhdGlvbk9mU2hvcmUnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nT0xMb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdvZnNob3JlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ09MTG9jYXRpb25PZlNob3JlJz5MZXBhcyBwYW50YWk8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdVbmRlckdyb3VuZCc+Yi4gQmlsYSBkaSBkYXJhdCBhcGFrYWggZGkgcGVybXVrYWFuIHRhbmFoIGF0YXUgZGkgYmF3YWggdGFuYWg\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ09MTG9jYXRpb25PblNob3JlWWVzR3JvdW5kJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ09MTG9jYXRpb25PblNob3JlWWVzJyB0eXBlPSdyYWRpbycgdmFsdWU9J29uc2hvcmUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nT0xMb2NhdGlvbk9uU2hvcmVZZXNHcm91bmQnPlBlcm11a2FhbiB0YW5haC9kYXJhdDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdPTExvY2F0aW9uT25TaG9yZVllc1VuZGVyZ3JvdW5kJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ09MTG9jYXRpb25PblNob3JlWWVzJyB0eXBlPSdyYWRpbycgdmFsdWU9J29mc2hvcmUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nT0xMb2NhdGlvbk9uU2hvcmVZZXNVbmRlcmdyb3VuZCc+QmF3YWggdGFuYWgsIHNlYnV0a2FuIGtlZGFsYW1hbm55YSA6PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZURvdCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nT0xMb2NhdGlvbk9uU2hvcmVVbmRlcmdyb3VuZERlcHRoJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5tZXRlcjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdEdXR5Jz5jLiBBcGFrYWggQW5kYSBqdWdhIGJlcnR1Z2FzIGRpIGxlcGFzIHBhbnRhaSBkYW4vYXRhdSBiYXdhaCB0YW5haD88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdEdXR5WWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ0R1dHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ0R1dHlZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ0R1dHlObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdEdXR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nRHV0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIEl0ZW0gTnVtYmVySW5kZW50Jz5KaWthICJZYSIgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGliYXdhaCBpbmk8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBJdGVtIE51bWJlckluZGVudCc+KEJlcmFwYSBmcmVrdWVuc2lueWEgZGFsYW0gMSAoc2F0dSkgdGFodW4gYmVyYWRhIGRpIGxva2FzaSB0ZXJzZWJ1dCBkYW4gYmVyYXBhIGxhbWEpPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1NpbmdsZSBGdWxsIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nRHV0eURlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nRXhwbG9zaXZlJz5kLiBBcGFrYWggZGFsYW0gYmVrZXJqYSBBbmRhIG1lbmdndW5ha2FuIGJhaGFuIHBlbGVkYWs\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nVXNpbmdFeHBsb3NpdmVZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nVXNpbmdFeHBsb3NpdmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ1VzaW5nRXhwbG9zaXZlWWVzJz5ZYTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRNaW5pbmdVc2luZ0V4cGxvc2l2ZU5vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZE1pbmluZ1VzaW5nRXhwbG9zaXZlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nVXNpbmdFeHBsb3NpdmVObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkTWluaW5nRGl2aW5nRHV0eSc+ZS4gQXBha2FoIEFuZGEgbWVsYWt1a2FuIHR1Z2FzIHBlbnllbGFtYW4\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_oilgas_IN.html","FileNameIndo":"tertanggung_kuesioneraktivitas_pertambangan.html","FolderName":"20160803","Id":40,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_diving.html","FileNameIndo":"pemegangpolis_kuesioneraktivitas_menyelam.html","FolderName":"20160803","Id":43,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_diving_IN.html","FileNameIndo":"tertanggung_kuesioneraktivitas_menyelam.html","FolderName":"20160803","Id":44,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_alcohol.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_alkohol.html","FolderName":"20160803","Id":79,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRoeXJvaWRUaGVyYXB5SHlwZXJ0aHlyb2lkaXNtZScgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVEhUaGVyYXB5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2h5cGVydGh5cm9pZGlzbWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVGhlcmFweUh5cGVydGh5cm9pZGlzbWUnPkhpcGVydGlyb2lkaXNtZTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVEhUaGVyYXB5SHlwb3RoeXJvaWRpc21lJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRoeXJvaWRUSFRoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0naHlwb3RoeXJvaWRpc21lJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRIVGhlcmFweUh5cG90aHlyb2lkaXNtZSc+SGlwb3Rpcm9pZGlzbWU8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRIVGhlcmFweVRoeXJvaWRpdGlzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRoeXJvaWRUSFRoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndGh5cm9pZGl0aXMnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVEhUaGVyYXB5VGh5cm9pZGl0aXMnPlRpcm9pZGl0aXM8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVEhUaGVyYXB5SGFzaW1vdG8nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRIVGhlcmFweScgdHlwZT0ncmFkaW8nIHZhbHVlPSdoYXNpbW90byc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRIVGhlcmFweUhhc2ltb3RvJz5QZW55YWtpdCBIYXNoaW1vdG88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVEhUaGVyYXB5R29pdGVyJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRoeXJvaWRUSFRoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZ29pdGVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVEhUaGVyYXB5R29pdGVyJz5Hb2l0ZXI8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVEhUaGVyYXB5R3JhdmUnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRIVGhlcmFweScgdHlwZT0ncmFkaW8nIHZhbHVlPSdncmF2ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRIVGhlcmFweUdyYXZlJz5QZW55YWtpdCBHcmF2ZTwvbGFiZWw+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVEhUVGhlcmFweU90aGVycycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVEhUaGVyYXB5JyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVEhUVGhlcmFweU90aGVycyc+TGFpbm55YSwgc2VidXRrYW4uPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZURvdCBMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhUaGVyYXB5T3RoZXJEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4zPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUG9saWN5SG9sZGVyVGh5cm9pZExhc3RDb25zdWx0RGF5Jz5Nb2hvbiBtZWxlbmdrYXBpIHBhZGEga29sb20gZGkgYmF3YWggaW5pIGRlbmdhbiBkYXRhIERva3RlciBkYW4gdGVtcGF0IEFuZGEga29uc3VsdGFzaT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVBvbGljeUhvbGRlclRoeXJvaWRUSExhc3RDb25zdWx0RGF5Jz5UYW5nZ2FsIHRlcmFraGlyIGtvbnN1bHRhc2k8L2xhYmVsPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVBvbGljeUhvbGRlclRoeXJvaWRUSExhc3RDb25zdWx0RGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVBvbGljeUhvbGRlclRoeXJvaWRUSExhc3RDb25zdWx0TW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyVGh5cm9pZFRITGFzdENvbnN1bHRZZWFyJz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhDb25zdWx0RG9jdE5hbWUnPk5hbWEgTGVuZ2thcCBEb2t0ZXI8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSENvbnN1bHREb2N0TmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSENvbnN1bHRQaG9uZSc+Tm8uIFRlbGVwb24vSGFuZHBob25lPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhDb25zdWx0UGhvbmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhDb25zdWx0Q2xpbmljJz5OYW1hIEtsaW5pay9SdW1haCBTYWtpdDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZFRIQ29uc3VsdENsaW5pYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSENvbnN1bHRBZGRyZXNzJz5BbGFtYXQgS2xpbmlrL1J1bWFoIFNha2l0PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhDb25zdWx0QWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRm9vdGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogMzUwcHg7Jz4NCiAgICAgICAgICAgIDxmb290ZXI+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9JY29uL1R1cnFvaXNlL2ljb25faGFsb2JjYS5zdmcnPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyJz5QVCBBc3VyYW5zaSBKaXdhIEJDQSB0ZXJkYWZ0YXIgZGFuIGRpYXdhc2kgb2xlaCBPdG9yaXRhcyBKYXNhIEtldWFuZ2FuPC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsJz48L3NwYW4+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogNjBweDsgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IDYwcHg7IGRpc3BsYXk6IGJsb2NrOyc+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9Mb2dvL2xvZ29fYmNhbGlmZV9wcmltYXJ5LnN2Zyc+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0FkZHJlc3MnPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXIgUG9zaXRpb25lclJpZ2h0Jz5QVCBBc3VyYW5zaSBKaXdhIEJDQTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgICAgICAgQ2hhc2UgUGxhemEgTGFudGFpIDIyIHwgSmwuIEplbmQuIFN1ZGlybWFuIEthdiAyMSwgSmFrYXJ0YSAxMjkyMA0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVsZXBvbjogKDAyMSkgMjEgODg4IDAwMCB8IEZha3M6ICgwMjEpIDI5MzQgNzk3NyB8IEVtYWlsOiBjdXN0b21lckBiY2FsaWZlLmNvLmlkDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICAgIDwvaGVhZGVyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsnPjQ8L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRha2VuJyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsnPkFwYWthaCBBbmRhIHBlcm5haCBhdGF1IHNhYXQgaW5pIHNlZGFuZyBtZW5na29uc3Vtc2kgb2JhdCBzZWh1YnVuZ2FuIGtlbGFpbmFuIGtlbGVuamFyIGdvbmRvayAodGlyb2lkKT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRIQ29uc3VtZURydWdZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRIQ29uc3VtZURydWcnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRIQ29uc3VtZURydWdZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRoeXJvaWRUSENvbnN1bWVEcnVnTm8nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRIQ29uc3VtZURydWcnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRoeXJvaWRUSENvbnN1bWVEcnVnTm8nPlRpZGFrIChKaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5naXNpIGtvbG9tIGRpIGJhd2FoIGluaSkuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPlRhbmdnYWwgQmVyb2JhdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPk5hbWEgT2JhdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPkRvc2lzPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+RnJla3VlbnNpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uRGF0ZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSE1lZGljYXRpb25OYW1lMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhdGlvbkRvc2UxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uRnJlcXVlbmN5MScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSE1lZGljYXRpb25EYXRlMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhdGlvbk5hbWUyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uRG9zZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSE1lZGljYXRpb25GcmVxdWVuY3kyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhdGlvbkRhdGUzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uTmFtZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSE1lZGljYXRpb25Eb3NlMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhdGlvbkZyZXF1ZW5jeTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uRGF0ZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSE1lZGljYXRpb25OYW1lNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhdGlvbkRvc2U0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uRnJlcXVlbmN5NCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSE1lZGljYXRpb25EYXRlNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhdGlvbk5hbWU1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uRG9zZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSE1lZGljYXRpb25GcmVxdWVuY3k1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPlRhbmdnYWw8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5LZXRlcmFuZ2FuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+S2FwYW4gcGVuZ29iYXRhbiBkaW11bGFpPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uU3RhcnREYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uU3RhcnRSZWFzb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+S2FwYW4gcGVuZ29iYXRhbiBkaWhlbnRpa2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uU3RvcERhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUSE1lZGljYXRpb25TdG9wUmVhc29uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0Jz5Nb2hvbiBqZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgYWxhc2FuIHBlbmdvYmF0YW4gZGliZXJoZW50aWthbi48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZSBGdWxsIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2F0aW9uU3RvcFJlYXNvbkRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPk1vaG9uIGplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaSBqaWthIGFkYSBwZW5nb2JhdGFuIGxhaW5ueWEuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmUgRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhdGlvblN0b3BSZWFzb25PdGhlck1lZGljaW5lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz41PC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRoeXJvaWREaWZmZXJlbnRUZXN0Jz5BcGFrYWggQW5kYSBwZXJuYWggbWVsYWt1a2FuIHBlbWVyaWtzYWFuIG1lZGlzIHNlaHVidW5nYW4ga2VsYWluYW4ga2VsZW5qYXIgZ29uZG9rICh0aXJvaWQpPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2FsQ2hlY2tZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhbENoZWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRoeXJvaWRUSE1lZGljYWxDaGVja1llcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhbENoZWNrTm8nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVGh5cm9pZFRITWVkaWNhbENoZWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVEhNZWRpY2FsQ2hlY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCc+KEppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbGVuZ2thcGkgaGFzaWwgcGVtZXJpa3NhYW4gcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5KZW5pcyBQZW1lcmlrc2FhbjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPlRhbmdnYWw8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5IYXNpbDwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPlQzPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVDNEYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVDNSZXN1bHQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+VDQ8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUNERhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUNFJlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5UU0g8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRUU0hEYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkVFNIUmVzdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkVDRzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZEVDR0RhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRFQ0dSZXN1bHQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QmlvcHNpPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUaHlyb2lkQmlvcHN5RGF0ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZEJpb3BzeVJlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5TY2FuL01SSS9VU0c8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRoeXJvaWRTY2FuTVJJVVNHRGF0ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVGh5cm9pZFNjYW5NUklVU0dSZXN1bHQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkZvb3Rlcicgc3R5bGU9J21hcmdpbi10b3A6IDgwcHg7Jz4NCiAgICAgICAgICAgIDxmb290ZXI+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9JY29uL1R1cnFvaXNlL2ljb25faGFsb2JjYS5zdmcnPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyJz5QVCBBc3VyYW5zaSBKaXdhIEJDQSB0ZXJkYWZ0YXIgZGFuIGRpYXdhc2kgb2xlaCBPdG9yaXRhcyBKYXNhIEtldWFuZ2FuPC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsJz48L3NwYW4+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IDcwcHg7IGRpc3BsYXk6IGJsb2NrOyc+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9Mb2dvL2xvZ29fYmNhbGlmZV9wcmltYXJ5LnN2Zyc+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0FkZHJlc3MnPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXIgUG9zaXRpb25lclJpZ2h0Jz5QVCBBc3VyYW5zaSBKaXdhIEJDQTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgICAgICAgQ2hhc2UgUGxhemEgTGFudGFpIDIyIHwgSmwuIEplbmQuIFN1ZGlybWFuIEthdiAyMSwgSmFrYXJ0YSAxMjkyMA0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVsZXBvbjogKDAyMSkgMjEgODg4IDAwMCB8IEZha3M6ICgwMjEpIDI5MzQgNzk3NyB8IEVtYWlsOiBjdXN0b21lckBiY2FsaWZlLmNvLmlkDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICAgIDwvaGVhZGVyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsnPjY8L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUaHlyb2lkVEhPcGVyYXRpb24nIHN0eWxlPSdtYXJnaW4tdG9wOiA3MHB4Oyc+QXBha2FoIEFuZGEgcGVybmFoIGRpb3BlcmFzaSBhdGF1IGRpYW5qdXJrYW4gb3BlcmFzaSB1bnR1ayBrZWxhaW5hbiBpbmk\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_gland.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_kelenjargondok.html","FolderName":"20160803","Id":80,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJIaWtpbmdIS0hvd0xvbmcnPk1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUnIGlkPSdUZXh0UG9saWN5SG9sZGVySGlraW5nSEtIb3dMb25nJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjMuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJIaWtpbmdIS0ZyZXF1ZW5jeSc+QmVyYXBhIGthbGkgZGFsYW0gMSAoc2F0dSkgYnVsYW4gQW5kYSBtZWxha3VrYW4gb2xhaCByYWdhIGluaT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckhpa2luZ0hLRnJlcXVlbmN5Jz5Nb2hvbiBqZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmksIHRlcm1hc3VrIGppa2Egb2xhaCByYWdhIGluaSBBbmRhIGxha3VrYW4gdGlkYWsgcnV0aW4gZGFsYW0gMSAoc2F0dSkgYnVsYW4uPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlJyBpZD0nVGV4dFBvbGljeUhvbGRlckhpa2luZ0hLRnJlcXVlbmN5JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjQuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJIaWtpbmdIS0xvY2F0aW9uJz5EaW1hbmEvbG9rYXNpIHlhbmcgcGFsaW5nIHNlcmluZyBBbmRhIGRhdGFuZ2kgdW50dWsgbWVsYWt1a2FuIG9sYWggcmFnYSBpbmk\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_hiking.html","FileNameIndo":"pemegangpolis_kuesioneraktivitas_mendaki.html","FolderName":"20160803","Id":81,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKb2ludEF0cml0aXNObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckpvaW50QXRyaXRpc05vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckpvaW50QXRyaXRpcycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKb2ludEF0cml0aXNZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKb2ludEF0cml0aXNZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRBdHJpdGlzJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRBdHJpdGlzRGVzY3JpcHRpb24nPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUnIGlkPSdUZXh0UG9saWN5SG9sZGVySm9pbnRBdHJpdGlzRGVzY3JpcHRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mi48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdGdWxsIFdyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVBvbGljeUhvbGRlckpvaW50QXRyaXRpc0NvbXBsYWluRGF5Jz5LYXBhbiBwZXJ0YW1hIGthbGkga2VsdWhhbiB0ZXJzZWJ1dCBkaXJhc2FrYW4\/PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJKb2ludEF0cml0aXNDb21wbGFpbkRheSc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJKb2ludEF0cml0aXNDb21wbGFpbk1vbnRoJz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckpvaW50QXRyaXRpc0NvbXBsYWluWWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjMuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJKb2ludEF0cml0aXNDb21wbGFpbkFtb3VudCc+U2ViZXJhcGEgc2VyaW5na2FoIGtlbHVoYW4gdGVyc2VidXQgdGltYnVsIGRhbGFtIDEyIGJ1bGFuIHRlcmFraGlyPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlJyBpZD0nVGV4dFBvbGljeUhvbGRlckpvaW50QXRyaXRpc0NvbXBsYWluQW1vdW50JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjQuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJKb2ludEF0cml0aXNDb21wbGFpbkxvY2F0aW9uJz5Nb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgZGFuIHBhZGEgYmFnaWFuIHR1YnVoIG1hbmE\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlJyBpZD0nVGV4dFBvbGljeUhvbGRlckpvaW50QXRyaXRpc0NvbXBsYWluTG9jYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+NS48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKb2ludEpOTGltaXRlZEFjdGl2aXR5Jz5BcGFrYWggYWt0aXZpdGFzIEFuZGEgbWVuZ2FsYW1pIGhhbWJhdGFuPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRKTkxpbWl0ZWRBY3Rpdml0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRKTkxpbWl0ZWRBY3Rpdml0eU5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckpvaW50Sk5MaW1pdGVkQWN0aXZpdHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRKTkxpbWl0ZWRBY3Rpdml0eVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckpvaW50Sk5MaW1pdGVkQWN0aXZpdHlZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRKTkxpbWl0ZWRBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckpvaW50Sk5MaW1pdGVkQWN0aXZpdHlEZXNjcmlwdGlvbic+SmlrYSDigJxZYeKAnSwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZScgaWQ9J1RleHRQb2xpY3lIb2xkZXJKb2ludEpOTGltaXRlZEFjdGl2aXR5RGVzY3JpcHRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Ni48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKb2ludENlcnRhaW5Mb2NhdGlvbic+QXBha2FoIEFuZGEgbWVuZ2FsYW1pIGdhbmdndWFuIGZ1bmdzaSBzZW5kaSBhdGF1IGJhZ2lhbiB0dWJ1aCB0ZXJ0ZW50dSA\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKb2ludENlcnRhaW5Mb2NhdGlvbk5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRDZXJ0YWluTG9jYXRpb25ObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKb2ludENlcnRhaW5Mb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKb2ludENlcnRhaW5Mb2NhdGlvblllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckpvaW50Q2VydGFpbkxvY2F0aW9uWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckpvaW50Q2VydGFpbkxvY2F0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJKb2ludENlcnRhaW5Mb2NhdGlvbic+SmlrYSDigJxZYeKAnSwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZScgaWQ9J1RleHRQb2xpY3lIb2xkZXJKb2ludENlcnRhaW5Mb2NhdGlvbkRlc2NyaXB0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXJGaXggU2luZ2xlIEl0ZW0nPjcuPC9zcGFuPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIEl0ZW0nIGZvcj0nVGV4dFBvbGljeUhvbGRlckpvaW50Sk5Db21wbGFpbkRldGFpbCc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLCBrYXBhbiBkYW4gYXBhIHBlbnllYmFiIGRpYWdub3NpcyBkb2t0ZXIgYXRhcyBnYW5nZ3VhbiBzZW5kaSB5YW5nIEFuZGEgZGVyaXRhIHNlcnRhIGFwYSBkaWFnbm9zaXMgdGVyc2VidXQ\\/PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJKb2ludEpOTGFzdENoZWNrVXBEYXknPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVySm9pbnRKTkxhc3RDaGVja1VwTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVySm9pbnRKTkxhc3RDaGVja1VwWWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjE1Ljwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJKb2ludE9mZkZyb21Xb3JrJz5BcGFrYWggQW5kYSBwZXJuYWggdGlkYWsgbWFzdWsga2VyamEgZGFsYW0gamFuZ2thIHdha3R1IGxhbWEga2FyZW5hIGtvbmRpc2kgaW5pPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRPZmZGcm9tV29ya05vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRPZmZGcm9tV29ya05vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckpvaW50T2ZmRnJvbVdvcmsnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRPZmZGcm9tV29ya1llcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckpvaW50T2ZmRnJvbVdvcmtZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVySm9pbnRPZmZGcm9tV29yaycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUG9saWN5SG9sZGVySm9pbnRPZmZpY2VPZmZGcm9tV29ya0RheSc+SmlrYSDigJxZYeKAnSwga2FwYW46PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJKb2ludE9mZmljZU9mZkZyb21Xb3JrRGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckpvaW50T2ZmaWNlT2ZmRnJvbVdvcmtNb250aCc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJKb2ludE9mZmljZU9mZkZyb21Xb3JrWWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVySm9pbnRPZmZpY2VPZmZGcm9tV29ya0R1cmF0aW9uJz5EYW4gYmVyYXBhIGxhbWE\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1RpbnkgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlckpvaW50T2ZmaWNlT2ZmRnJvbVdvcmtEdXJhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCc+SGFyaTwvc3Bhbj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXJGaXggU2luZ2xlIEl0ZW0nPjE2Ljwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBJdGVtJyBmb3I9J1RleHRQb2xpY3lIb2xkZXJKb2ludEpOQWRkaXRpb2luYWxJbmZvcm1hdGlvbic+TW9ob24gQW5kYSBtZW1iZXJpa2FuIGluZm9ybWFzaSB0YW1iYWhhbiBsYWluIHlhbmcgbWVudXJ1dCBBbmRhIHBlbnRpbmcgbXVuZ2tpbiBkYXBhdCBtZW1iYW50dSBwcm9zZXMgcGVuZ2FqdWFuIGFzdXJhbnNpIGluaSBkZW5nYW4gbWVsZW5na2FwaSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlJyBpZD0nVGV4dFBvbGljeUhvbGRlckpvaW50Sk5BZGRpdGlvbmFsSW5mb3JtYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25EZWNsYXJhdGlvbic+DQogICAgICAgICAgPGgyPlBlcm55YXRhYW4gRGFuIEt1YXNhPC9oMj4NCiAgICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICAgICAgPG9sPg0KICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgIFNheWEvS2FtaSBtZW55YXRha2FuIGJhaHdhIFNheWEvS2FtaSB0ZWxhaCBtZW1haGFtaSBkYW4gbWVueWV0dWp1aSB1bnR1ayBtZW5naXNpIHNlY2FyYSBsZW5na2FwIGRhbiBiZW5hciBzZW11YSBpbmZvcm1hc2kgZGFsYW0NCiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdRdWVzdGlvbm5haXJlVGl0bGUnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgIGluaSBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YSBzZWJhZ2FpIGJhZ2lhbiBkYXJpIGtvbnRyYWsgYXN1cmFuc2kgSml3YS9LZXNlaGF0YW4vS2VjZWxha2Fhbi4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5TYXlhIG1lbWJlcmkga3Vhc2Ega2VwYWRhIHNldGlhcCBEb2t0ZXIvUnVtYWggU2FraXQvS2xpbmlrL1B1c2tlc21hcy9MYWJvcmF0b3JpdW0sIHBlcnVzYWhhYW4gYXN1cmFuc2kgYXRhdSBwZXJ1c2FoYWFuIHJlYXN1cmFuc2ksIGJhZGFuLCBpbnN0YW5zaS9sZW1iYWdhIGF0YXUgcGloYWsgbGFpbiB5YW5nIG1lbXB1bnlhaSBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIFNheWEsIHVudHVrIG1lbmd1bmdrYXBrYW4ga2VwYWRhIFBlbmFuZ2d1bmcgbWVuZ2VuYWkgc2VtdWEga2V0ZXJhbmdhbiB0ZW50YW5nIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gU2F5YS48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU1BBSiBkYW4gYWthbiBtZW5naWthdCBTYXlhLCBQZW5lcmltYSBNYW5mYWF0L0FobGkgV2FyaXMsIGRhbiBrZWx1YXJnYSBTYXlhIChqaWthIGFkYSk8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IFNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggU2F5YSBtZW5pbmdnYWwgZHVuaWEuIFNhbGluYW4vZm90b2tvcGkgZGFyaSBzdXJhdCBrdWFzYSBpbmkgc2FtYSBzYWggYmVybGFrdW55YSBzZXBlcnRpIGRva3VtZW4gYXNsaS48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5BcGFiaWxhIGluZm9ybWFzaSB0ZXJzZWJ1dCB5YW5nIFNheWEvS2FtaSBiZXJpa2FuIHRpZGFrIGJlbmFyLCBtYWthIFBlbmFuZ2d1bmcgYmVyaGFrIG1lbWJhdGFsa2FuIFBvbGlzIFNheWEvS2FtaSBzZWphayBhd2FsLjwvbGk+DQogICAgICAgICAgICAgIDwvb2w+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0U2lnbmVkUGxhY2UnPkRpdGFuZGF0YW5nYW5pPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRTaWduZWRQbGFjZScgcmVhZG9ubHk9J3RydWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlU2lnbmVkRGF5Jz5UYW5nZ2FsPC9sYWJlbD4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz48L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVTaWduZWREYXknPjwvdGFibGU+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZE1vbnRoJz48L3RhYmxlPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVTaWduZWRZZWFyJz48L3RhYmxlPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2lnbmF0dXJlIEl0ZW0xJz4NCiAgICAgICAgICAgICAgICA8aW1nPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOYW1lJyBpZD0nVGV4dFBvbGljeUhvbGRlclNpZ25hdHVyZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXNjcmlwdGlvbic+DQogICAgICAgICAgICAgICAgICBOYW1hIExlbmdrYXAgJiBUYW5kYSB0YW5nYW4NCiAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgIChDYWxvbikgUGVtZWdhbmcgUG9saXMNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTaWduYXR1cmUgSXRlbTEnPg0KICAgICAgICAgICAgICAgIDxpbWc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05hbWUnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgKENhbG9uKSBUZXJ0YW5nZ3VuZw0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NpZ25hdHVyZSBJdGVtMSc+DQogICAgICAgICAgICAgICAgPGltZz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTmFtZScgaWQ9J1RleHRTYWxlc1NpZ25hdHVyZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXNjcmlwdGlvbic+DQogICAgICAgICAgICAgICAgICBOYW1hIExlbmdrYXAgJiBUYW5kYSB0YW5nYW4NCiAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgIFRlbmFnYSBQZW5qdWFsDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDwvc2VjdGlvbj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L21haW4+DQogICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25Gb290ZXInPg0KICAgICAgPGZvb3Rlcj4NCiAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0ljb24vVHVycW9pc2UvaWNvbl9oYWxvYmNhLnN2Zyc+DQogICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXInPlBUIEFzdXJhbnNpIEppd2EgQkNBIHRlcmRhZnRhciBkYW4gZGlhd2FzaSBvbGVoIE90b3JpdGFzIEphc2EgS2V1YW5nYW48L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSdEZXRhaWwnPjwvc3Bhbj4NCiAgICAgIDwvZm9vdGVyPg0KICAgIDwvc2VjdGlvbj4NCiAgPC9ib2R5Pg0KPC9odG1sPg0K","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_joint.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_sendi.html","FolderName":"20160803","Id":82,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_paragliding.html","FileNameIndo":"pemegangpolis_kuesioneraktivitas_terbanglayang.html","FolderName":"20160803","Id":83,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_racing.html","FileNameIndo":"pemegangpolis_kuesioneraktivitas_balapmotor.html","FolderName":"20160803","Id":84,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCiAgPCEtLSBIRUFEIC0tPg0KICA8aGVhZD4NCiAgICA8IS0tIEZPUiBERVZFTE9QTUVOVCAtLT4NCiAgICA8IS0tIEZPUiBERVBMT1lNRU5UIC0tPg0KICAgIDwhLS0gTUVUQSBEQVRBIC0tPg0KICAgIDxtZXRhIGNoYXJzZXQ9J3V0Zi04Jz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSAtIEJMRVNTJyBuYW1lPSdhcHBsaWNhdGlvbi1uYW1lJz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSBFbGVjdHJvbmljIFN1Ym1pc3Npb24uJyBuYW1lPSdkZXNjcmlwdGlvbic+DQogICAgPG1ldGEgY29udGVudD0nQkNBIExpZmUgRWxlY3Ryb25pYyBTdWJtaXNzaW9uLicgbmFtZT0na2V5d29yZHMnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdhdXRob3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0licmFoaW0gQXppeicgbmFtZT0nZGVzaWduZXInPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0NvcHlyaWdodCAyMDE2IEJDQSBMaWZlJyBuYW1lPSdjb3B5cmlnaHQnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlIEVsZWN0cm9uaWMgU3VibWlzc2lvbi4nIG5hbWU9J2RjdGVybXMuZGVzY3JpcHRpb24nPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLmNyZWF0b3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLnJpZ2h0c0hvbGRlcic+DQogICAgPG1ldGEgY29udGVudD0nQWxsIHJpZ2h0cyByZXNlcnZlZC4gTm8gcGFydCBvZiB0aGlzIGRvY3VtZW50IG1heSBiZSByZXByb2R1Y2VkIG9yIHRyYW5zbWl0dGVkIGluIGFueSBmb3JtIG9yIGJ5IGFueSBtZWFucywgZWxlY3Ryb25pYywgbWVjaGFuaWNhbCwgcGhvdG9jb3B5aW5nLCByZWNvcmRpbmcsIG9yIG90aGVyd2lzZSwgd2l0aG91dCBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gZnJvbSB0aGUgQXV0aG9yLCBCQ0EgTGlmZS4nIG5hbWU9J2RjdGVybXMucmlnaHRzJz4NCiAgICA8bWV0YSBjb250ZW50PScyMDE2JyBuYW1lPSdkY3Rlcm1zLmRhdGVDb3B5cmlnaHRlZCc+DQogICAgPG1ldGEgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBtaW5pbXVtLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9bm8nIG5hbWU9J3ZpZXdwb3J0Jz4NCiAgICA8IS0tIEZBVklDT04gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iIH0gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iLCA6dHlwZSA9PiAiaW1hZ2UveC1pY29uIiB9IC0tPg0KICAgIDwhLS0gJWxpbmt7IDpyZWwgPT4gImljb24iLCA6aHJlZiA9PiAiI3t1cmxSZXNvdXJjZX1sb2dvX2Zhdmljb24uaWNvIiwgOnR5cGUgPT4gImltYWdlL3gtaWNvbiIgfSAtLT4NCiAgICA8IS0tIENTUyAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9qcXVlcnkubW9iaWxlLTEuNC41Lm1pbi5jc3MnIGlkPSdjc3NyZXNwb25zaXZlJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9oZWFsdGhxdWVzdGlvbm5haXJlcGRmLWxheW91dC1nZW5lcmFsLmNzcycgaWQ9J2Nzc2xheW91dCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPGxpbmsgaHJlZj0nLi4vLi4vanF1ZXJ5TGlicmFyeS9TdHlsZS9DU1MvaGVhbHRocXVlc3Rpb25uYWlyZXBkZi1mb250LWdlbmVyYWwuY3NzJyBpZD0nY3NzZm9udCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPGxpbmsgaHJlZj0nLi4vLi4vanF1ZXJ5TGlicmFyeS9TdHlsZS9DU1MvaGVhbHRocXVlc3Rpb25uYWlyZXBkZi1pbnB1dC1nZW5lcmFsLmNzcycgaWQ9J2Nzc2lucHV0JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8IS0tICVsaW5reyA6aWQgPT4gImNzc2xpbmsiLCA6aHJlZiA9PiAiI3t1cmxDU1N9I3t1cmxDU1NTZWN0aW9uUHJlZml4fS1saW5rLWdlbmVyYWwuY3NzIiwgOnJlbCA9PiAic3R5bGVzaGVldCIsIDp0eXBlID0+ICJ0ZXh0L2NzcyIgfSAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9ibGVzcy1mb250c2l6ZS1tZWRpdW0uY3NzJyBpZD0nY3NzZm9udHNpemUnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvU3R5bGUvQ1NTL2hlYWx0aHF1ZXN0aW9ubmFpcmVwZGYtZm9udGZhbWlseS1icHJlcGxheS5jc3MnIGlkPSdjc3Nmb250ZmFtaWx5JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9oZWFsdGhxdWVzdGlvbm5haXJlcGRmLXRoZW1lLXR1cnFvaXNlLXN2Zy5jc3MnIGlkPSdjc3N0aGVtZScgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPCEtLSAlbGlua3sgOmlkID0+ICJjc3NyZXNwb25zaXZlIiwgOmhyZWYgPT4gIiN7dXJsQ1NTfSN7dXJsQ1NTU2VjdGlvblByZWZpeH0tcmVzcG9uc2l2ZS1nZW5lcmFsLmNzcyIsIDpyZWwgPT4gInN0eWxlc2hlZXQiLCA6dHlwZSA9PiAidGV4dC9jc3MiIH0gLS0+DQogICAgPCEtLSBKQVZBIFNDUklQVCAtLT4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnkubW9iaWxlLTEuNC41Lm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnktMS4xMS4xLm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnktbWlncmF0ZS0xLjIuMS5taW4uanMnIHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvSmF2YVNjcmlwdC9NaW5pbWl6ZWQvaWJyYWhpbWF6aXoubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2licmFoaW1heml6LWhlYWx0aHF1ZXN0aW9ubmFpcmUubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2lvcy1pbnRlZ3JhdGlvbi1oZWFsdGhxdWVzdGlvbm5haXJlLm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0Pg0KICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKQ0KICAgICAgew0KICAgICAgCWltYWdlU2VsZWN0b3IoIi4uLy4uL2pxdWVyeUxpYnJhcnkvUmVzb3VyY2UvIik7DQogICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCiAgICA8dGl0bGU+QkNBIExpZmUgLSBCTEVTUywgSGVhbHRoIFF1ZXN0aW9ubmFpcmUgMSBGb3JtPC90aXRsZT4NCiAgICA8IS0tIEpRVUVSWSAtLT4NCiAgICA8c2NyaXB0Pg0KICAgICAgLy8gSU5JVElBTElaQVRJT04NCiAgICAgIA0KICAgICAgdmFyIHN0cmluZ1BhZ2VUeXBlQ3VycmVudCA9IHN0cmluZ1BhZ2VUeXBlUERGOw0KICAgICAgDQogICAgICANCiAgICAgIC8vIERPQ1VNRU5UIFJFQURZDQogICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpDQogICAgICB7DQogICAgICAJdmFyIGpzb25EdW1teSA9ICd7InJlc3VsdCI6eyJyZWFkRnJvbURCIjpbeyJlbGVtZW50SUQiOiJEYXRlUG9saWN5SG9sZGVyVHJhdmVsaW5nVFZUcmlwU3RhcnRlZCIsIlZhbHVlIjoiMDEvMDIvMTk5MCJ9XX19Jw0KICAgICAgDQogICAgICAJLy8gU0VDVElPTiBHRU5FUkFMDQogICAgICANCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0U1BBSk51bWJlciIsIDExLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0UG9saWN5SG9sZGVyRnVsbE5hbWUiLCAxOSwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjVGV4dFBvbGljeUhvbGRlckZ1bGxOYW1lMm5kIiwgMTksIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRQb2xpY3lIb2xkZXJCaXJ0aFBsYWNlIiwgMTYsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQb2xpY3lIb2xkZXJCaXJ0aERheSIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVQb2xpY3lIb2xkZXJCaXJ0aE1vbnRoIiwgMiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVBvbGljeUhvbGRlckJpcnRoWWVhciIsIDQsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgDQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVNpZ25lZERheSIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVTaWduZWRNb250aCIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVTaWduZWRZZWFyIiwgNCwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICANCiAgICAgIAkvLyBTRUNUSU9OIE1BTkRBVE9SWQ0KICAgICAgDQogICAgICAJYm94R2VuZXJhdG9yKCIjVGV4dEFnZW50TmFtZSIsIDE2LCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0QWdlbnRDb2RlIiwgMTEsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRQcm9kdWN0Q29kZSIsIDExLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIA0KICAgICAgCWZvb3RlclNldHRlckZvckhlYWx0aFF1ZXN0aW9ubmFpcmVQREYoIk9QL1VXLzAxMTkvMDYxNjAxIiwgMyk7DQogICAgICAJdGl0bGVTZXR0ZXJGb3JIZWFsdGhRdWVzdGlvbm5haXJlUERGKCJLVUVTSU9ORVIgVU5UVUsgUEVSSkFMQU5BTiBLRSBMVUFSIE5FR0VSSS8gVElOR0dBTCBESSBMVUFSIE5FR0VSSSIpOw0KICAgICAgDQogICAgICAJLy8gdmFyIG9iamVjdENvbnRlbnQgPSBKU09OLnBhcnNlKGpzb25EdW1teSk7DQogICAgICAJLy8gZ2V0RnJvbURhdGFiYXNlRm9ySGVhbHRoUXVlc3Rpb25uYWlyZShvYmplY3RDb250ZW50LnJlc3VsdC5yZWFkRnJvbURCLCBzdHJpbmdQYWdlVHlwZVBERik7DQogICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCiAgPC9oZWFkPg0KICA8IS0tIEJPRFkgLS0+DQogIDxib2R5IGlkPSdNYWluJz4NCiAgICA8IS0tIEhFQURFUiAtLT4NCiAgICA8aGVhZGVyPg0KICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25IZWFkZXInPg0KICAgICAgICA8aW1nIHNyYz0nLi4vLi4vUmVzb3VyY2UvTG9nby9sb2dvX2JjYWxpZmVfcHJpbWFyeS5zdmcnPg0KICAgICAgICA8ZGl2IGNsYXNzPSdBZGRyZXNzJz4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyIFBvc2l0aW9uZXJSaWdodCc+UFQgQXN1cmFuc2kgSml3YSBCQ0E8L3NwYW4+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXRhaWwgUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIENoYXNlIFBsYXphIExhbnRhaSAyMiB8IEpsLiBKZW5kLiBTdWRpcm1hbiBLYXYgMjEsIEpha2FydGEgMTI5MjANCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIFRlbGVwb246ICgwMjEpIDIxIDg4OCAwMDAgfCBGYWtzOiAoMDIxKSAyOTM0IDc5NzcgfCBFbWFpbDogY3VzdG9tZXJAYmNhbGlmZS5jby5pZA0KICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxicj4NCiAgICAgIDwvc2VjdGlvbj4NCiAgICAgIDxoMT5LVUVTSU9ORVIgVU5UVUsgUEVSSkFMQU5BTiBLRSBMVUFSIE5FR0VSSS9USU5HR0FMIERJIExVQVIgTkVHRVJJPC9oMT4NCiAgICAgIDxicj4NCiAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uTm90ZSc+DQogICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgIDxwPlBlcmx1IGRpcGVyaGF0aWthbjo8L3A+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPldhamliIGRpaXNpIG9sZWggKENhbG9uKSBQZW1lZ2FuZyBQb2xpcyBkYW4vYXRhdSAoQ2Fsb24pIFRlcnRhbmdndW5nIGRlbmdhbiB0aW50YSBoaXRhbSwgaHVydWYgY2V0YWssIGplbGFzIGRhbiBtZW1iZXJpIHRhbmRhICjiiJopIHBhZGEga290YWsgc2VzdWFpIHBpbGloYW4uPC9saT4NCiAgICAgICAgICAgIDxsaT5XYWppYiBtZW5hbmRhdGFuZ2FuaSBzZXRpYXAga29yZWtzaSBwZW51bGlzYW4gKGppa2EgYWRhKS48L2xpPg0KICAgICAgICAgICAgPGxpPlBlbnVsaXNhbiB0YW5nZ2FsIHNlbGFsdSBtZW1wZXJndW5ha2FuIGZvcm1hdCBUYW5nZ2FsLUJ1bGFuLVRhaHVuLjwvbGk+DQogICAgICAgICAgICA8bGk+QXBhYmlsYSBkaXBlcmx1a2FuIGxlbWJhciB0YW1iYWhhbiwgZGFwYXQgbWVtcGVyZ3VuYWthbiBGb3JtdWxpciBQZXJueWF0YWFuL0FtYW5kZW1lbiBVbnR1ayBTUEFKICYgUGVuZ2FqdWFuIFBlbGF5YW5hbiBQb2xpcyB5YW5nIGRpaXNpIGRhbiBkaXRhbmRhdGFuZ2FuaSBvbGVoIChDYWxvbikgUGVtZWdhbmcgUG9saXMsIChDYWxvbikgVGVydGFuZ2d1bmcgZGFuIFRlbmFnYSBQZW5qdWFsLjwvbGk+DQogICAgICAgICAgICA8bGk+QXBhYmlsYSB0ZWxhaCBkaWlzaSBsZW5na2FwIG9sZWggKENhbG9uKSBQZW1lZ2FuZyBQb2xpcyBkYW4vYXRhdSAoQ2Fsb24pIFRlcnRhbmdndW5nIHdhamliIGRpc2VyYWhrYW4ga2UgS2FudG9yIFB1c2F0IFBUIEFzdXJhbnNpIEppd2EgQkNBICjigJxQZW5hbmdndW5n4oCdKS48L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9zZWN0aW9uPg0KICAgIDwvaGVhZGVyPg0KICAgIDwhLS0gTUFJTiAtLT4NCiAgICA8bWFpbj4NCiAgICAgIDxmb3JtPg0KICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkN1c3RvbWVyJz4NCiAgICAgICAgICA8aDI+SS4gRGF0YSAoQ2Fsb24pIFRlcnRhbmdndW5nPC9oMj4NCiAgICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MS48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBXcmFwIFBsYWluIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRTUEFKTnVtYmVyJz5Ob21vciBTdXJhdCBQZW5nYWp1YW4gQXN1cmFuc2kgSml3YTo8L2xhYmVsPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0U1BBSk51bWJlcic+PC90YWJsZT4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQbGFpbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFNQQUpOdW1iZXInIHN0eWxlPSdtYXJnaW4tdG9wOiAtMjVweDsnPihTUEFKKS9Qb2xpcyBBc3VyYW5zaTwvbGFiZWw+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mi48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUGxhaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckZ1bGxOYW1lJz5OYW1hIExlbmdrYXAgKENhbG9uKSBUZXJ0YW5nZ3VuZzo8L2xhYmVsPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVyRnVsbE5hbWUnPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUGxhaW4gTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJGdWxsTmFtZScgc3R5bGU9J21hcmdpbi10b3A6IC0yNXB4Oyc+KHNlc3VhaSBkZW5nYW4gS1RQL1Bhc3Bvcik8L2xhYmVsPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVyRnVsbE5hbWUybmQnPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mzwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBNZWRpdW0gUGxhaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckJpcnRoUGxhY2UnPlRlbXBhdCwgVGFuZ2dhbCBsYWhpciAoQ2Fsb24pIFRlcnRhbmdndW5nOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVyQmlydGhQbGFjZScgcmVhZG9ubHk9J3RydWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPiw8L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJCaXJ0aERheSc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQmlydGhNb250aCc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQmlydGhZZWFyJz48L3RhYmxlPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGgyPklJLiBXQUpJQiBESUxFTkdLQVBJIChDQUxPTikgVEVSVEFOR0dVTkc8L2gyPg0KICAgICAgICA8ZmllbGRzZXQgY2xhc3M9J2ZpZWxkc2V0IFdpdGhvdXREb3VibGVEb3QnPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4xLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRyYXZlbGluZ1RWUmVhc29uJz5BcGFrYWggYWxhc2FuIHV0YW1hIHVudHVrIG1lbGFrdWthbiBwZXJqYWxhbmFuIGF0YXUgYmVydGVtcGF0IHRpbmdnYWwgZGkgbHVhciBuZWdlcmkgPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVlJlYXNvbkJ1c2luZXNzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRyYXZlbGluZ1RWUmVhc29uJyB0eXBlPSdyYWRpbycgdmFsdWU9J2J1c2luZXNzJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVHJhdmVsaW5nVFZSZWFzb25CdXNpbmVzcyc+QmlzbmlzPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRyYXZlbGluZ1RWUmVhc29uVmFjYXRpb24nIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVHJhdmVsaW5nVFZSZWFzb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndmFjYXRpb24nPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVlJlYXNvblZhY2F0aW9uJz5MaWJ1cmFuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRyYXZlbGluZ1RWUmVhc29uT3RoZXJzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRyYXZlbGluZ1RWUmVhc29uJyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVHJhdmVsaW5nVFZSZWFzb25PdGhlcnMnPkxhaW5ueWEsIHNlYnV0a2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZURvdCBMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVlJlYXNvbk90aGVyRGVzYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4yLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckNoZXN0UGFpblNwcmVhZCc+U2VidXRrYW4gZGVuZ2FuIHJpbmNpIHR1anVhbiByZW5jYW5hIGJlcGVyZ2lhbiBkYWxhbSAxMiAoZHVhIGJlbGFzKSBidWxhbiB5YW5nIGFrYW4gZGF0YW5nIHBhZGEga29sb20gZGkgYmF3YWggaW5pIDo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+TmVnYXJhPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+S290YTwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPlRhbmdnYWwgVGliYTwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPlRhbmdnYWwgQmVyYW5na2F0PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+VGlwZSBWaXNhPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWRGVzdGluYXRpb25Db3VudHJ5MScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXN0aW5hdGlvbkNpdHkxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkFycml2YWxEYXRlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXBhcnR1cmVEYXRlMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZWaXNhVHlwZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWRGVzdGluYXRpb25Db3VudHJ5MicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXN0aW5hdGlvbkNpdHkyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkFycml2YWxEYXRlMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXBhcnR1cmVEYXRlMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZWaXNhVHlwZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWRGVzdGluYXRpb25Db3VudHJ5MycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXN0aW5hdGlvbkNpdHkzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkFycml2YWxEYXRlMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXBhcnR1cmVEYXRlMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZWaXNhVHlwZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWRGVzdGluYXRpb25Db3VudHJ5NCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXN0aW5hdGlvbkNpdHk0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkFycml2YWxEYXRlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXBhcnR1cmVEYXRlNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZWaXNhVHlwZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWRGVzdGluYXRpb25Db3VudHJ5NScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXN0aW5hdGlvbkNpdHk1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkFycml2YWxEYXRlNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZEZXBhcnR1cmVEYXRlNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZWaXNhVHlwZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+My48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJDaGVzdFBhaW5TcHJlYWQnPlNlYnV0a2FuIGRlbmdhbiByaW5jaSB0dWp1YW4gcGVyamFsYW5hbiB5YW5nIHRlbGFoIGRpbGFrdWthbiBkYWxhbSAxMiAoZHVhIGJlbGFzKSBidWxhbiB0ZXJha2hpciBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaSA6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPk5lZ2FyYTwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPktvdGE8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5UYW5nZ2FsIFRpYmE8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5UYW5nZ2FsIEJlcmFuZ2thdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPlRpcGUgVmlzYTwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVk5leHREZXN0aW5hdGlvbkNvdW50cnkxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVk5leHREZXN0aW5hdGlvbkNpdHkxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVk5leHRBcnJpdmFsRGF0ZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dERlcGFydHVyZURhdGUxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVk5leHRWaXNhVHlwZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dERlc3RpbmF0aW9uQ291bnRyeTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dERlc3RpbmF0aW9uQ2l0eTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dEFycml2YWxEYXRlMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZOZXh0RGVwYXJ0dXJlRGF0ZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dFZpc2FUeXBlMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZOZXh0RGVzdGluYXRpb25Db3VudHJ5MycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZOZXh0RGVzdGluYXRpb25DaXR5MycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZOZXh0QXJyaXZhbERhdGUzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVk5leHREZXBhcnR1cmVEYXRlMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZOZXh0VmlzYVR5cGUzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVk5leHREZXN0aW5hdGlvbkNvdW50cnk0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVk5leHREZXN0aW5hdGlvbkNpdHk0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVk5leHRBcnJpdmFsRGF0ZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dERlcGFydHVyZURhdGU0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVk5leHRWaXNhVHlwZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0gTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dERlc3RpbmF0aW9uQ291bnRyeTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dERlc3RpbmF0aW9uQ2l0eTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dEFycml2YWxEYXRlNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZOZXh0RGVwYXJ0dXJlRGF0ZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWTmV4dFZpc2FUeXBlNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRm9vdGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogMjBweDsgJz4NCiAgICAgICAgICAgIDxmb290ZXI+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9JY29uL1R1cnFvaXNlL2ljb25faGFsb2JjYS5zdmcnPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyJz5QVCBBc3VyYW5zaSBKaXdhIEJDQSB0ZXJkYWZ0YXIgZGFuIGRpYXdhc2kgb2xlaCBPdG9yaXRhcyBKYXNhIEtldWFuZ2FuPC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsJz48L3NwYW4+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogMzBweDsgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IDMwcHg7IGRpc3BsYXk6IGJsb2NrOyc+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9Mb2dvL2xvZ29fYmNhbGlmZV9wcmltYXJ5LnN2Zyc+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0FkZHJlc3MnPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXIgUG9zaXRpb25lclJpZ2h0Jz5QVCBBc3VyYW5zaSBKaXdhIEJDQTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgICAgICAgQ2hhc2UgUGxhemEgTGFudGFpIDIyIHwgSmwuIEplbmQuIFN1ZGlybWFuIEthdiAyMSwgSmFrYXJ0YSAxMjkyMA0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVsZXBvbjogKDAyMSkgMjEgODg4IDAwMCB8IEZha3M6ICgwMjEpIDI5MzQgNzk3NyB8IEVtYWlsOiBjdXN0b21lckBiY2FsaWZlLmNvLmlkDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICAgIDwvaGVhZGVyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBzdHlsZT0nbWFyZ2luLXRvcDogMzBweDsnPjQuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdNeU5hdGlvbmFsaXR5JyBzdHlsZT0nbWFyZ2luLXRvcDogMzBweDsnPlNlYnV0a2FuIGtld2FyZ2FuZWdhcmFhbiBBbmRhLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTnVtYmVySW5kZW50JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdNeU5hdGlvbmFsaXR5Jz4oSmlrYSBsZWJpaCBkYXJpIDEga2V3YXJnYW5lZ2FyYWFuIG1vaG9uIHNlYnV0a2FuIHNlbHVydWhueWEgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ015TmF0aW9uYWxpdHknIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+NS48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ0Ficm9hZEFzc2V0Jz5TZWJ1dGthbiBkZW5nYW4gcmluY2kgYXNldCBhdGF1IHBlcnVtYWhhbiB5YW5nIGRpbWlsaWtpL2Rpa29udHJvbCBvbGVoIEFuZGEgZGkgbmVnYXJhIHlhbmcgQW5kYSBrdW5qdW5naTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPmF0YXUgbmVnYXJhIHRlbXBhdCBBbmRhIHRpbmdnYWwsIHBhZGEga29sb20gZGkgYmF3YWggaW5pOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ0Ficm9hZEFzc2V0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjYuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlclRyYXZlbGluZ1RWU3RheSc+SmlrYSBBbmRhIGJlcmVuY2FuYSB1bnR1ayBiZXJhZGEgZGkgbmVnYXJhIG1hbmFwdW4gc2VsYW1hIGxlYmloIGRhcmkgMjEgaGFyaSwgaGFyYXAgbWVtYmVyaWthbiByaW5jaWFuIHNlYmFnYWkgYmVyaWt1dDo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVlN0YXknPmEuIEplbmlzIHRlbXBhdCB0aW5nZ2FsIEFuZGE6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdGdWxsIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCBOdW1iZXJJbmRlbnQnPihNaXNhbDogYXBhcnRlbWVuLCBydW1haCwgaG90ZWwsIHRlbXBhdCBwZW5hbXB1bmdhbiBzZW1lbnRhcmEsIGRhbiBsYWluIGxhaW4pPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmUgRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVlN0YXknIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWQWRkcmVzcyc+Yi4gQWxhbWF0IGxlbmdrYXAgdGVtcGF0IHRpbmdnYWwgQW5kYTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IE51bWJlckluZGVudCc+KFRlcm1hc3VrIG5hbWEgamFsYW4gZGFuIG5vbW9yLCBrb3RhLCBrb2RlIHBvcywgbmVnYXJhKTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMaW5lIEZ1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkhvc3BpdGFsRGlzdGFuY2UnPmMuIFNlYmVyYXBhIGphdWggamFyYWsgZmFzaWxpdGFzIG1lZGlzIGRhcmkgdGVtcGF0IHRpbmdnYWwgQW5kYTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IE51bWJlckluZGVudCc+KEphcmFrIG1lbnVqdSBwcmFrdGVrIGRva3RlciBkYW4vYXRhdSBydW1haCBzYWtpdCkuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmUgRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkhvc3BpdGFsRGlzdGFuY2UnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Ny48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyVHJhdmVsaW5nVFZCdXNpbmVzc1RyaXAnPkppa2EgcGVyamFsYW5hbiBBbmRhIHVudHVrIHR1anVhbiBiaXNuaXMsIGhhcmFwIG1lbWJlcmlrYW4gcmluY2lhbiBzZWJhZ2FpIGJlcmlrdXQ6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZDb21wYW55QnVzaW5lc3NOYW1lJz5hLiBOYW1hIHBlcnVzYWhhYW4vdGVtcGF0IHVzYWhhOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMaW5lIEZ1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZDb21wYW55QnVzaW5lc3NOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZCdXNpbmVzc1R5cGUnPmIuIEplbmlzIHVzYWhhOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMaW5lIEZ1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZCdXNpbmVzc1R5cGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkpvYkRlc2NyaXB0aW9uJz5jLiBUdWdhcyBkYW4gdGFuZ2d1bmcgamF3YWI6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmUgRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkpvYkRlc2NyaXB0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUG9saWN5SG9sZGVyVHJhdmVsaW5nVFZUcmlwU3RhcnRlZCc+ZC4gVGFuZ2dhbCBtdWxhaSBwZXJqYWxhbiBiaXNuaXMgOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdMaW5lIEZ1bGwgU2luZ2xlIEl0ZW0nIGRhdGEtZmllbGQ9J2RhdGUnIGlkPSdEYXRlUG9saWN5SG9sZGVyVHJhdmVsaW5nVFZUcmlwU3RhcnRlZCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWQW5udWFsUmVtdW5lcmF0aW9uJz5lLiBSZW11bmVyYXNpIHRhaHVuYW46PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmUgRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkFubnVhbFJlbXVuZXJhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZJbmp1cnlQcm9jZWR1cmUnPmYuIFNlYnV0a2FuIGRlbmdhbiByaW5jaSBjYXJhIG1lbmRhcGF0a2FuIHBlcmF3YXRhbiBrZXNlaGF0YW4gZGFuIGNhcmEgYXRhdSBwcm9zZWR1ciBkYWxhbSBrYXN1cyBwZW55YWtpdCBiZXJhdCBhdGF1IGNlZGVyYTo8L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZSBGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWSW5qdXJ5UHJvY2VkdXJlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25Gb290ZXInIHN0eWxlPSdtYXJnaW4tdG9wOiA1MHB4OyAnPg0KICAgICAgICAgICAgPGZvb3Rlcj4NCiAgICAgICAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0ljb24vVHVycW9pc2UvaWNvbl9oYWxvYmNhLnN2Zyc+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXInPlBUIEFzdXJhbnNpIEppd2EgQkNBIHRlcmRhZnRhciBkYW4gZGlhd2FzaSBvbGVoIE90b3JpdGFzIEphc2EgS2V1YW5nYW48L3NwYW4+DQogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXRhaWwnPjwvc3Bhbj4NCiAgICAgICAgICAgIDwvZm9vdGVyPg0KICAgICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgICA8aGVhZGVyPg0KICAgICAgICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25IZWFkZXInIHN0eWxlPSdtYXJnaW4tdG9wOiA1MHB4OyBwb3NpdGlvbjogcmVsYXRpdmU7IHRvcDogNTBweDsgZGlzcGxheTogYmxvY2s7Jz4NCiAgICAgICAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0xvZ28vbG9nb19iY2FsaWZlX3ByaW1hcnkuc3ZnJz4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQWRkcmVzcyc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlciBQb3NpdGlvbmVyUmlnaHQnPlBUIEFzdXJhbnNpIEppd2EgQkNBPC9zcGFuPg0KICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICAgICAgICBDaGFzZSBQbGF6YSBMYW50YWkgMjIgfCBKbC4gSmVuZC4gU3VkaXJtYW4gS2F2IDIxLCBKYWthcnRhIDEyOTIwDQogICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICBUZWxlcG9uOiAoMDIxKSAyMSA4ODggMDAwIHwgRmFrczogKDAyMSkgMjkzNCA3OTc3IHwgRW1haWw6IGN1c3RvbWVyQGJjYWxpZmUuY28uaWQNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPC9oZWFkZXI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVlRyYW5zcG9ydGF0aW9uJyBzdHlsZT0nbWFyZ2luLXRvcDogNjBweDsnPmcuIFNhcmFuYSB0cmFuc3BvcnRhc2kgeWFuZyB0ZXJzZWRpYSBkaSBuZWdhcmEgdGVyc2VidXQ6PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdGdWxsIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCBOdW1iZXJJbmRlbnQnPihNaXNhbDogYW5na3V0YW4gdW11bSBhdGF1IHByaWJhZGksIHBlc2F3YXQgcHJpYmFkaSwgZGFuIGxhaW4tbGFpbikuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmUgRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVlRyYW5zcG9ydGF0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW50VFZTYWZldHlFcXVpcG1lbnQnPmguIFNlYnV0a2FuIGFsYXQvcGVyYW5na2F0IHBlbmdhbWFuIHlhbmcgZGlzaWFwa2FuL2RpcGVyZ3VuYWthbiBvbGVoIHBlbWJlcmkga2VyamEgcGFkYSBzYWF0IG1lbGFrdWthbiBwZWtlcmphYW46PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmUgRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVlNhZmV0eUVxdWlwbWVudCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkNvbnRyYWN0Jz5pLiBBcGFrYWggQW5kYSB0ZXJpa2F0IGRlbmdhbiBzdWF0dSBrb250cmFrIGF0YXUgcGVyamFuamlhbj88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0IE51bWJlckluZGVudCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZDb250cmFjdCc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQgTnVtYmVySW5kZW50JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJUcmF2ZWxpbmdUVkNvbnRyYWN0Jz4oVGFuZ2dhbCBtdWxhaSwgZHVyYXNpIGRhbiBsYWluLWxhaW4gc2VydGEgbWVtYmVyaWthbiBmb3Rva29waSBrb250cmFrIGF0YXUgcGVyamFuamlhbiBqaWthIHRlcnNlZGlhKS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZSBGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWQ29udHJhY3QnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlckZpeCBTaW5nbGUgSXRlbSc+OC48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgSXRlbScgZm9yPSdUZXh0UG9saWN5SG9sZGVyVHJhdmVsaW5nVFZBZGRpdGlvbmFsSW5mb3JtYXRpb24nPk1vaG9uIEFuZGEgbWVtYmVyaWthbiBpbmZvcm1hc2kgdGFtYmFoYW4gbGFpbiB5YW5nIG1lbnVydXQgQW5kYSBwZW50aW5nIG11bmdraW4gZGFwYXQgbWVtYmFudHUgcHJvc2VzIHBlbmdhanVhbiBhc3VyYW5zaSBpbmkgZGVuZ2FuIG1lbGVuZ2thcGkga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlclRyYXZlbGluZ1RWQWRkaXRpb25hbEluZm9ybWF0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRGVjbGFyYXRpb24nIHN0eWxlPSdtYXJnaW4tdG9wOiAzMHB4Oyc+DQogICAgICAgICAgPGgyPlBlcm55YXRhYW4gRGFuIEt1YXNhPC9oMj4NCiAgICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICAgICAgPG9sPg0KICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgIFNheWEvS2FtaSBtZW55YXRha2FuIGJhaHdhIFNheWEvS2FtaSB0ZWxhaCBtZW1haGFtaSBkYW4gbWVueWV0dWp1aSB1bnR1ayBtZW5naXNpIHNlY2FyYSBsZW5na2FwIGRhbiBiZW5hciBzZW11YSBpbmZvcm1hc2kgZGFsYW0NCiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdRdWVzdGlvbm5haXJlVGl0bGUnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgIGluaSBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YSBzZWJhZ2FpIGJhZ2lhbiBkYXJpIGtvbnRyYWsgYXN1cmFuc2kgSml3YS9LZXNlaGF0YW4vS2VjZWxha2Fhbi4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5TYXlhIG1lbWJlcmkga3Vhc2Ega2VwYWRhIHNldGlhcCBEb2t0ZXIvUnVtYWggU2FraXQvS2xpbmlrL1B1c2tlc21hcy9MYWJvcmF0b3JpdW0sIHBlcnVzYWhhYW4gYXN1cmFuc2kgYXRhdSBwZXJ1c2FoYWFuIHJlYXN1cmFuc2ksIGJhZGFuLCBpbnN0YW5zaS9sZW1iYWdhIGF0YXUgcGloYWsgbGFpbiB5YW5nIG1lbXB1bnlhaSBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIFNheWEsIHVudHVrIG1lbmd1bmdrYXBrYW4ga2VwYWRhIFBlbmFuZ2d1bmcgbWVuZ2VuYWkgc2VtdWEga2V0ZXJhbmdhbiB0ZW50YW5nIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gU2F5YS48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU1BBSiBkYW4gYWthbiBtZW5naWthdCBTYXlhLCBQZW5lcmltYSBNYW5mYWF0L0FobGkgV2FyaXMsIGRhbiBrZWx1YXJnYSBTYXlhIChqaWthIGFkYSk8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IFNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggU2F5YSBtZW5pbmdnYWwgZHVuaWEuIFNhbGluYW4vZm90b2tvcGkgZGFyaSBzdXJhdCBrdWFzYSBpbmkgc2FtYSBzYWggYmVybGFrdW55YSBzZXBlcnRpIGRva3VtZW4gYXNsaS48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5BcGFiaWxhIGluZm9ybWFzaSB0ZXJzZWJ1dCB5YW5nIFNheWEvS2FtaSBiZXJpa2FuIHRpZGFrIGJlbmFyLCBtYWthIFBlbmFuZ2d1bmcgYmVyaGFrIG1lbWJhdGFsa2FuIFBvbGlzIFNheWEvS2FtaSBzZWphayBhd2FsLjwvbGk+DQogICAgICAgICAgICAgIDwvb2w+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0U2lnbmVkUGxhY2UnPkRpdGFuZGF0YW5nYW5pPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRTaWduZWRQbGFjZScgcmVhZG9ubHk9J3RydWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlU2lnbmVkRGF5Jz5UYW5nZ2FsPC9sYWJlbD4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz48L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVTaWduZWREYXknPjwvdGFibGU+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZE1vbnRoJz48L3RhYmxlPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVTaWduZWRZZWFyJz48L3RhYmxlPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2lnbmF0dXJlIEl0ZW0xJz4NCiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSdTaWduYXR1cmVJbWFnZSc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05hbWUnIGlkPSdUZXh0UG9saWN5SG9sZGVyU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgKENhbG9uKSBQZW1lZ2FuZyBQb2xpcw0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NpZ25hdHVyZSBJdGVtMSc+DQogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0nU2lnbmF0dXJlSW1hZ2UnPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOYW1lJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFNpZ25hdHVyZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXNjcmlwdGlvbic+DQogICAgICAgICAgICAgICAgICBOYW1hIExlbmdrYXAgJiBUYW5kYSB0YW5nYW4NCiAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgIChDYWxvbikgVGVydGFuZ2d1bmcNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTaWduYXR1cmUgSXRlbTEnPg0KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9J1NpZ25hdHVyZUltYWdlJz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTmFtZScgaWQ9J1RleHRTYWxlc1NpZ25hdHVyZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXNjcmlwdGlvbic+DQogICAgICAgICAgICAgICAgICBOYW1hIExlbmdrYXAgJiBUYW5kYSB0YW5nYW4NCiAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgIFRlbmFnYSBQZW5qdWFsDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDwvc2VjdGlvbj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L21haW4+DQogICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25Gb290ZXInPg0KICAgICAgPGZvb3Rlcj4NCiAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0ljb24vVHVycW9pc2UvaWNvbl9oYWxvYmNhLnN2Zyc+DQogICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXInPlBUIEFzdXJhbnNpIEppd2EgQkNBIHRlcmRhZnRhciBkYW4gZGlhd2FzaSBvbGVoIE90b3JpdGFzIEphc2EgS2V1YW5nYW48L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSdEZXRhaWwnPjwvc3Bhbj4NCiAgICAgIDwvZm9vdGVyPg0KICAgIDwvc2VjdGlvbj4NCiAgPC9ib2R5Pg0KPC9odG1sPg0K","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_traveling.html","FileNameIndo":"pemegangpolis_kuesioneraktivitas_perjalanankeluarnegeri.html","FolderName":"20160803","Id":85,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_alcohol_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_alkohol.html","FolderName":"20160803","Id":86,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJEaXNzb3JkZXJObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJEaXNzb3JkZXJObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCRGlzc29yZGVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJEaXNzb3JkZXJZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCRGlzc29yZGVyWWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJEaXNzb3JkZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTnVtYmVySW5kZW50IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+SmlrYSDigJxZYeKAnSwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJEaXNzb3JkZXJEZXNjcmlwdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4yLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkZpcnN0Q29tcGxhaW4nPkthcGFuIHBlcnRhbWEga2FsaSBrZWx1aGFuIHRlcnNlYnV0IGRpcmFzYWthbj88L2xhYmVsPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJGaXJzdENvbXBsYWluRGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJGaXJzdENvbXBsYWluTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkZpcnN0Q29tcGxhaW5ZZWFyJz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mzwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVDb21wbGFpbkFtb3VudERheSc+U2ViZXJhcGEgc2VyaW5na2FoIGtlbHVoYW4gdGVyc2VidXQgdGltYnVsIGRhbGFtIDEyIGJ1bGFuIHRlcmFraGlyPzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUNvbXBsYWluQW1vdW50JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjQ8L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdGdWxsIFdyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCUGFpbkxvY2F0aW9uJz5Nb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgZGFuIHBhZGEgYmFnaWFuIHR1YnVoIG1hbmE\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQlBhaW5Mb2NhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz41PC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eVllcyc+QXBha2FoIGFrdGl2aXRhcyBBbmRhIG1lbmdhbGFtaSBoYW1iYXRhbj88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eU5vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJMaW1pdGVkQWN0aXZpdHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJMaW1pdGVkQWN0aXZpdHlZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTnVtYmVySW5kZW50IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+SmlrYSDigJxZYeKAnSwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJMaW1pdGVkQWN0aXZpdHlEZXNjcmlwdGlvbic+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eURlc2NyaXB0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjYuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCRmlyc3RMaW1pdGVkQWN0aXZpdHlEYXknPkthcGFuIG1lbmdhbGFtaSBoYW1iYXRhbiA\/PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCRmlyc3RMaW1pdGVkQWN0aXZpdHlEYXknPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkZpcnN0TGltaXRlZEFjdGl2aXR5TW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkZpcnN0TGltaXRlZEFjdGl2aXR5WWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjc8L3NwYW4+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkNhdXNlJz5Nb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgbWVudXJ1dCBEb2t0ZXIgYXBhIHBlbnllYmFiIGRpYWdub3NpcyAgZ2FuZ2d1YW4gdHVsYW5nIGJlbGFrYW5nIHRlcnNlYnV0PyAoS2VjZWxha2FhbiwgUHJvc2VzIHBlbnVhYW4sIGtlY2VsYWthYW4gc2V3YWt0dSBiZXJvbGFocmFnYSwgZGFuIHNlYmFnYWlueWEpLjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJDYXVzZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRm9vdGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogMTYwcHg7Jz4NCiAgICAgICAgICAgIDxmb290ZXI+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9JY29uL1R1cnFvaXNlL2ljb25faGFsb2JjYS5zdmcnPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyJz5QVCBBc3VyYW5zaSBKaXdhIEJDQSB0ZXJkYWZ0YXIgZGFuIGRpYXdhc2kgb2xlaCBPdG9yaXRhcyBKYXNhIEtldWFuZ2FuPC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsJz48L3NwYW4+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IDcwcHg7IGRpc3BsYXk6IGJsb2NrOyc+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9Mb2dvL2xvZ29fYmNhbGlmZV9wcmltYXJ5LnN2Zyc+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0FkZHJlc3MnPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXIgUG9zaXRpb25lclJpZ2h0Jz5QVCBBc3VyYW5zaSBKaXdhIEJDQTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgICAgICAgQ2hhc2UgUGxhemEgTGFudGFpIDIyIHwgSmwuIEplbmQuIFN1ZGlybWFuIEthdiAyMSwgSmFrYXJ0YSAxMjkyMA0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVsZXBvbjogKDAyMSkgMjEgODg4IDAwMCB8IEZha3M6ICgwMjEpIDI5MzQgNzk3NyB8IEVtYWlsOiBjdXN0b21lckBiY2FsaWZlLmNvLmlkDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICAgIDwvaGVhZGVyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBzdHlsZT0nbWFyZ2luLXRvcDogNjBweDsnPjguPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQlhSYXlZZXMnIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4Oyc+QXBha2FoIEFuZGEgcGVybmFoIG1lbmphbGFuaSBYLXJheSwgTVJJLCBhdGF1IHBlbWVyaWtzYWFuIGxhaW5ueWE\\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJCb3R0b20yRG9jdG9yTmFtZSc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJCb3R0b20yRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCQm90dG9tMkRvY3RvclRlbGVwaG9uZSc+Tm8uIFRlbGVwb24vSGFuZHBob25lOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkJvdHRvbTJEb2N0b3JUZWxlcGhvbmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkJvdHRvbTJDbGluaWNOYW1lJz5OYW1hIEtsaW5pay9SdW1haCBTYWtpdDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkJvdHRvbTJDbGluaWNOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJCb3R0b20yQ2xpbmljQWRkcmVzcyc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkJvdHRvbTJDbGluaWNBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjEzLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJDb250cm9sQW1vdW50Jz5TZWJlcmFwYSBzZXJpbmcgQW5kYSBrb250cm9sPzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkNvbnRyb2xBbW91bnQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE1hcmdpbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkNvbnRyb2xBbW91bnQnPmthbGkgcGVyPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1NlbGVjdFByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJDb250cm9sQW1vdW50UGVyaW9kJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjE0Ljwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkxhc3RDb25zdWx0RGF5Jz5LYXBhbiB0ZXJha2hpciBrYWxpIEFuZGEga29udHJvbD88L2xhYmVsPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJMYXN0Q29uc3VsdERheSc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCTGFzdENvbnN1bHRNb250aCc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCTGFzdENvbnN1bHRZZWFyJz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MTU8L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkFic2VudCc+QXBha2FoIEFuZGEgcGVybmFoIHRpZGFrIG1hc3VrIGtlcmphIGRhbGFtIGphbmdrYSB3YWt0dSBsYW1hIGthcmVuYSBrb25kaXNpIGluaSA\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJBYnNlbnRObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJBYnNlbnRObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCQWJzZW50JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJBYnNlbnRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCQWJzZW50WWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJBYnNlbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J051bWJlckluZGVudCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIGthcGFuPC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCQWJzZW50RGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJBYnNlbnRNb250aCc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCYWNrYm9uZUJCQWJzZW50WWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J051bWJlckluZGVudCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkRhbiBiZXJhcGEgbGFtYSA\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1RpbnkgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJhY2tib25lQkJBYnNlbnRBbW91bnQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5IYXJpPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjE2PC9zcGFuPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkFkZGl0aW9uYWxJbmZvcm1hdGlvbic+TW9ob24gQW5kYSBtZW1iZXJpa2FuIGluZm9ybWFzaSB0YW1iYWhhbiBsYWluIHlhbmcgbWVudXJ1dCBBbmRhIHBlbnRpbmcgbXVuZ2tpbiBkYXBhdCBtZW1iYW50dSBwcm9zZXMgcGVuZ2FqdWFuIGFzdXJhbnNpIGluaSBkZW5nYW4gbWVsZW5na2FwaSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmFja2JvbmVCQkFkZGl0aW9uYWxJbmZvcm1hdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkRlY2xhcmF0aW9uJz4NCiAgICAgICAgICA8aDI+UGVybnlhdGFhbiBEYW4gS3Vhc2E8L2gyPg0KICAgICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgICAgICA8b2w+DQogICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgU2F5YS9LYW1pIG1lbnlhdGFrYW4gYmFod2EgU2F5YS9LYW1pIHRlbGFoIG1lbWFoYW1pIGRhbiBtZW55ZXR1anVpIHVudHVrIG1lbmdpc2kgc2VjYXJhIGxlbmdrYXAgZGFuIGJlbmFyIHNlbXVhIGluZm9ybWFzaSBkYWxhbQ0KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1F1ZXN0aW9ubmFpcmVUaXRsZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgaW5pIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhIHNlYmFnYWkgYmFnaWFuIGRhcmkga29udHJhayBhc3VyYW5zaSBKaXdhL0tlc2VoYXRhbi9LZWNlbGFrYWFuLg0KICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci9SdW1haCBTYWtpdC9LbGluaWsvUHVza2VzbWFzL0xhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpL2xlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gU2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBtZW5nZW5haSBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBTYXlhLjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSBtZXJ1cGFrYW4gaGFsIHlhbmcgdGlkYWsgdGVycGlzYWhrYW4gZGFyaSBTUEFKIGRhbiBha2FuIG1lbmdpa2F0IFNheWEsIFBlbmVyaW1hIE1hbmZhYXQvQWhsaSBXYXJpcywgZGFuIGtlbHVhcmdhIFNheWEgKGppa2EgYWRhKTwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgU2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBTYXlhIG1lbmluZ2dhbCBkdW5pYS4gU2FsaW5hbi9mb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkFwYWJpbGEgaW5mb3JtYXNpIHRlcnNlYnV0IHlhbmcgU2F5YS9LYW1pIGJlcmlrYW4gdGlkYWsgYmVuYXIsIG1ha2EgUGVuYW5nZ3VuZyBiZXJoYWsgbWVtYmF0YWxrYW4gUG9saXMgU2F5YS9LYW1pIHNlamFrIGF3YWwuPC9saT4NCiAgICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRTaWduZWRQbGFjZSc+RGl0YW5kYXRhbmdhbmk8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFNpZ25lZFBsYWNlJyByZWFkb25seT0ndHJ1ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+PC9zcGFuPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVTaWduZWREYXknPlRhbmdnYWw8L2xhYmVsPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZERheSc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlU2lnbmVkTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZFllYXInPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTaWduYXR1cmUgSXRlbTEnPg0KICAgICAgICAgICAgICAgIDxpbWc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05hbWUnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgKENhbG9uKSBQZW1lZ2FuZyBQb2xpcw0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NpZ25hdHVyZSBJdGVtMSc+DQogICAgICAgICAgICAgICAgPGltZz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTmFtZScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRTaWduYXR1cmUnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGVzY3JpcHRpb24nPg0KICAgICAgICAgICAgICAgICAgTmFtYSBMZW5na2FwICYgVGFuZGEgdGFuZ2FuDQogICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICAoQ2Fsb24pIFRlcnRhbmdndW5nDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2lnbmF0dXJlIEl0ZW0xJz4NCiAgICAgICAgICAgICAgICA8aW1nPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOYW1lJyBpZD0nVGV4dFNhbGVzU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVuYWdhIFBlbmp1YWwNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgPC9mb3JtPg0KICAgIDwvbWFpbj4NCiAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkZvb3Rlcic+DQogICAgICA8Zm9vdGVyPg0KICAgICAgICA8aW1nIHNyYz0nLi4vLi4vUmVzb3VyY2UvSWNvbi9UdXJxb2lzZS9pY29uX2hhbG9iY2Euc3ZnJz4NCiAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlcic+UFQgQXN1cmFuc2kgSml3YSBCQ0EgdGVyZGFmdGFyIGRhbiBkaWF3YXNpIG9sZWggT3Rvcml0YXMgSmFzYSBLZXVhbmdhbjwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCc+PC9zcGFuPg0KICAgICAgPC9mb290ZXI+DQogICAgPC9zZWN0aW9uPg0KICA8L2JvZHk+DQo8L2h0bWw+DQo=","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_backbone_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_tulangbelakang.html","FolderName":"20160803","Id":87,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUaGVyYXB5SHlwZXJ0aHlyb2lkaXNtZScgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhUaGVyYXB5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2h5cGVydGh5cm9pZGlzbWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVGhlcmFweUh5cGVydGh5cm9pZGlzbWUnPkhpcGVydGlyb2lkaXNtZTwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhUaGVyYXB5SHlwb3RoeXJvaWRpc21lJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSFRoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0naHlwb3RoeXJvaWRpc21lJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRIVGhlcmFweUh5cG90aHlyb2lkaXNtZSc+SGlwb3Rpcm9pZGlzbWU8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRIVGhlcmFweVRoeXJvaWRpdGlzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSFRoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndGh5cm9pZGl0aXMnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhUaGVyYXB5VGh5cm9pZGl0aXMnPlRpcm9pZGl0aXM8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVEhUaGVyYXB5SGFzaW1vdG8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRIVGhlcmFweScgdHlwZT0ncmFkaW8nIHZhbHVlPSdoYXNpbW90byc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRIVGhlcmFweUhhc2ltb3RvJz5QZW55YWtpdCBIYXNoaW1vdG88L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVEhUaGVyYXB5R29pdGVyJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSFRoZXJhcHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZ29pdGVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVEhUaGVyYXB5R29pdGVyJz5Hb2l0ZXI8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVEhUaGVyYXB5R3JhdmUnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRIVGhlcmFweScgdHlwZT0ncmFkaW8nIHZhbHVlPSdncmF2ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRIVGhlcmFweUdyYXZlJz5QZW55YWtpdCBHcmF2ZTwvbGFiZWw+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhUVGhlcmFweU90aGVycycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhUaGVyYXB5JyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhUVGhlcmFweU90aGVycyc+TGFpbm55YSwgc2VidXRrYW4uPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZURvdCBMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhUaGVyYXB5T3RoZXJEZXNjJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4zPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZExhc3RDb25zdWx0RGF5Jz5Nb2hvbiBtZWxlbmdrYXBpIHBhZGEga29sb20gZGkgYmF3YWggaW5pIGRlbmdhbiBkYXRhIERva3RlciBkYW4gdGVtcGF0IEFuZGEga29uc3VsdGFzaT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSExhc3RDb25zdWx0RGF5Jz5UYW5nZ2FsIHRlcmFraGlyIGtvbnN1bHRhc2k8L2xhYmVsPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSExhc3RDb25zdWx0RGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSExhc3RDb25zdWx0TW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITGFzdENvbnN1bHRZZWFyJz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhDb25zdWx0RG9jdE5hbWUnPk5hbWEgTGVuZ2thcCBEb2t0ZXI8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSENvbnN1bHREb2N0TmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSENvbnN1bHRQaG9uZSc+Tm8uIFRlbGVwb24vSGFuZHBob25lPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhDb25zdWx0UGhvbmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBJdGVtJyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhDb25zdWx0Q2xpbmljJz5OYW1hIEtsaW5pay9SdW1haCBTYWtpdDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRIQ29uc3VsdENsaW5pYycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIEl0ZW0nIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSENvbnN1bHRBZGRyZXNzJz5BbGFtYXQgS2xpbmlrL1J1bWFoIFNha2l0PC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhDb25zdWx0QWRkcmVzcycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRm9vdGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogMzUwcHg7Jz4NCiAgICAgICAgICAgIDxmb290ZXI+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9JY29uL1R1cnFvaXNlL2ljb25faGFsb2JjYS5zdmcnPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyJz5QVCBBc3VyYW5zaSBKaXdhIEJDQSB0ZXJkYWZ0YXIgZGFuIGRpYXdhc2kgb2xlaCBPdG9yaXRhcyBKYXNhIEtldWFuZ2FuPC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsJz48L3NwYW4+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogNjBweDsgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IDYwcHg7IGRpc3BsYXk6IGJsb2NrOyc+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9Mb2dvL2xvZ29fYmNhbGlmZV9wcmltYXJ5LnN2Zyc+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0FkZHJlc3MnPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXIgUG9zaXRpb25lclJpZ2h0Jz5QVCBBc3VyYW5zaSBKaXdhIEJDQTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgICAgICAgQ2hhc2UgUGxhemEgTGFudGFpIDIyIHwgSmwuIEplbmQuIFN1ZGlybWFuIEthdiAyMSwgSmFrYXJ0YSAxMjkyMA0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVsZXBvbjogKDAyMSkgMjEgODg4IDAwMCB8IEZha3M6ICgwMjEpIDI5MzQgNzk3NyB8IEVtYWlsOiBjdXN0b21lckBiY2FsaWZlLmNvLmlkDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICAgIDwvaGVhZGVyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsnPjQ8L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRha2VuJyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsnPkFwYWthaCBBbmRhIHBlcm5haCBhdGF1IHNhYXQgaW5pIHNlZGFuZyBtZW5na29uc3Vtc2kgb2JhdCBzZWh1YnVuZ2FuIGtlbGFpbmFuIGtlbGVuamFyIGdvbmRvayAodGlyb2lkKT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRIQ29uc3VtZURydWdZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRIQ29uc3VtZURydWcnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRIQ29uc3VtZURydWdZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSENvbnN1bWVEcnVnTm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRIQ29uc3VtZURydWcnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSENvbnN1bWVEcnVnTm8nPlRpZGFrIChKaWthIOKAnFlh4oCdLCBtb2hvbiBtZW5naXNpIGtvbG9tIGRpIGJhd2FoIGluaSkuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPlRhbmdnYWwgQmVyb2JhdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPk5hbWEgT2JhdDwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPkRvc2lzPC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIENlbnRlcic+RnJla3VlbnNpPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uRGF0ZTEnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSE1lZGljYXRpb25OYW1lMScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhdGlvbkRvc2UxJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uRnJlcXVlbmN5MScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSE1lZGljYXRpb25EYXRlMicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhdGlvbk5hbWUyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uRG9zZTInIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSE1lZGljYXRpb25GcmVxdWVuY3kyJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhdGlvbkRhdGUzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uTmFtZTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSE1lZGljYXRpb25Eb3NlMycgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhdGlvbkZyZXF1ZW5jeTMnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uRGF0ZTQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSE1lZGljYXRpb25OYW1lNCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhdGlvbkRvc2U0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uRnJlcXVlbmN5NCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSE1lZGljYXRpb25EYXRlNScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhdGlvbk5hbWU1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uRG9zZTUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSE1lZGljYXRpb25GcmVxdWVuY3k1JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPlRhbmdnYWw8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5LZXRlcmFuZ2FuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+S2FwYW4gcGVuZ29iYXRhbiBkaW11bGFpPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uU3RhcnREYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uU3RhcnRSZWFzb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+S2FwYW4gcGVuZ29iYXRhbiBkaWhlbnRpa2FuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uU3RvcERhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSE1lZGljYXRpb25TdG9wUmVhc29uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0Jz5Nb2hvbiBqZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgYWxhc2FuIHBlbmdvYmF0YW4gZGliZXJoZW50aWthbi48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTGluZSBGdWxsIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2F0aW9uU3RvcFJlYXNvbkRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPk1vaG9uIGplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaSBqaWthIGFkYSBwZW5nb2JhdGFuIGxhaW5ueWEuPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmUgRnVsbCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhdGlvblN0b3BSZWFzb25PdGhlck1lZGljaW5lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz41PC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWREaWZmZXJlbnRUZXN0Jz5BcGFrYWggQW5kYSBwZXJuYWggbWVsYWt1a2FuIHBlbWVyaWtzYWFuIG1lZGlzIHNlaHVidW5nYW4ga2VsYWluYW4ga2VsZW5qYXIgZ29uZG9rICh0aXJvaWQpPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2FsQ2hlY2tZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhbENoZWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUSE1lZGljYWxDaGVja1llcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhbENoZWNrTm8nIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFRITWVkaWNhbENoZWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhNZWRpY2FsQ2hlY2tObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCc+KEppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbGVuZ2thcGkgaGFzaWwgcGVtZXJpa3NhYW4gcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkpLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5KZW5pcyBQZW1lcmlrc2FhbjwvbGFiZWw+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBDZW50ZXInPlRhbmdnYWw8L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgQ2VudGVyJz5IYXNpbDwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPlQzPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVDNEYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVDNSZXN1bHQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+VDQ8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUNERhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUNFJlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5UU0g8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRUU0hEYXRlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVFNIUmVzdWx0JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkVDRzwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZEVDR0RhdGUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRFQ0dSZXN1bHQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+QmlvcHNpPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nU2hvcnQgU2luZ2xlIEl0ZW0xIE1hcmdpbicgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkQmlvcHN5RGF0ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZEJpb3BzeVJlc3VsdCcgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5TY2FuL01SSS9VU0c8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgSXRlbTEgTWFyZ2luJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFRoeXJvaWRTY2FuTVJJVVNHRGF0ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBJdGVtMSBNYXJnaW4nIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkVGh5cm9pZFNjYW5NUklVU0dSZXN1bHQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkZvb3Rlcicgc3R5bGU9J21hcmdpbi10b3A6IDgwcHg7Jz4NCiAgICAgICAgICAgIDxmb290ZXI+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9JY29uL1R1cnFvaXNlL2ljb25faGFsb2JjYS5zdmcnPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyJz5QVCBBc3VyYW5zaSBKaXdhIEJDQSB0ZXJkYWZ0YXIgZGFuIGRpYXdhc2kgb2xlaCBPdG9yaXRhcyBKYXNhIEtldWFuZ2FuPC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsJz48L3NwYW4+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IDcwcHg7IGRpc3BsYXk6IGJsb2NrOyc+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9Mb2dvL2xvZ29fYmNhbGlmZV9wcmltYXJ5LnN2Zyc+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0FkZHJlc3MnPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXIgUG9zaXRpb25lclJpZ2h0Jz5QVCBBc3VyYW5zaSBKaXdhIEJDQTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgICAgICAgQ2hhc2UgUGxhemEgTGFudGFpIDIyIHwgSmwuIEplbmQuIFN1ZGlybWFuIEthdiAyMSwgSmFrYXJ0YSAxMjkyMA0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVsZXBvbjogKDAyMSkgMjEgODg4IDAwMCB8IEZha3M6ICgwMjEpIDI5MzQgNzk3NyB8IEVtYWlsOiBjdXN0b21lckBiY2FsaWZlLmNvLmlkDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICAgIDwvaGVhZGVyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsnPjY8L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRUaHlyb2lkVEhPcGVyYXRpb24nIHN0eWxlPSdtYXJnaW4tdG9wOiA3MHB4Oyc+QXBha2FoIEFuZGEgcGVybmFoIGRpb3BlcmFzaSBhdGF1IGRpYW5qdXJrYW4gb3BlcmFzaSB1bnR1ayBrZWxhaW5hbiBpbmk\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_gland_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_kelenjargondok.html","FolderName":"20160803","Id":88,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRIaWtpbmdIS0hvd0xvbmcnPk1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSGlraW5nSEtIb3dMb25nJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjMuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRIaWtpbmdIS0ZyZXF1ZW5jeSc+QmVyYXBhIGthbGkgZGFsYW0gMSAoc2F0dSkgYnVsYW4gQW5kYSBtZWxha3VrYW4gb2xhaCByYWdhIGluaT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEhpa2luZ0hLRnJlcXVlbmN5Jz5Nb2hvbiBqZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmksIHRlcm1hc3VrIGppa2Egb2xhaCByYWdhIGluaSBBbmRhIGxha3VrYW4gdGlkYWsgcnV0aW4gZGFsYW0gMSAoc2F0dSkgYnVsYW4uPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEhpa2luZ0hLRnJlcXVlbmN5JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjQuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRIaWtpbmdIS0xvY2F0aW9uJz5EaW1hbmEvbG9rYXNpIHlhbmcgcGFsaW5nIHNlcmluZyBBbmRhIGRhdGFuZ2kgdW50dWsgbWVsYWt1a2FuIG9sYWggcmFnYSBpbmk\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_hiking_IN.html","FileNameIndo":"tertanggung_kuesioneraktivitas_mendaki.html","FolderName":"20160803","Id":89,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKb2ludEF0cml0aXNObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEpvaW50QXRyaXRpc05vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEpvaW50QXRyaXRpcycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKb2ludEF0cml0aXNZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKb2ludEF0cml0aXNZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRBdHJpdGlzJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRBdHJpdGlzRGVzY3JpcHRpb24nPkppa2Eg4oCcWWHigJ0sIG1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpIGJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRBdHJpdGlzRGVzY3JpcHRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mi48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdGdWxsIFdyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEpvaW50QXRyaXRpc0NvbXBsYWluRGF5Jz5LYXBhbiBwZXJ0YW1hIGthbGkga2VsdWhhbiB0ZXJzZWJ1dCBkaXJhc2FrYW4\/PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRKb2ludEF0cml0aXNDb21wbGFpbkRheSc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRKb2ludEF0cml0aXNDb21wbGFpbk1vbnRoJz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEpvaW50QXRyaXRpc0NvbXBsYWluWWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjMuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRKb2ludEF0cml0aXNDb21wbGFpbkFtb3VudCc+U2ViZXJhcGEgc2VyaW5na2FoIGtlbHVoYW4gdGVyc2VidXQgdGltYnVsIGRhbGFtIDEyIGJ1bGFuIHRlcmFraGlyPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEpvaW50QXRyaXRpc0NvbXBsYWluQW1vdW50JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjQuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRKb2ludEF0cml0aXNDb21wbGFpbkxvY2F0aW9uJz5Nb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgZGFuIHBhZGEgYmFnaWFuIHR1YnVoIG1hbmE\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEpvaW50QXRyaXRpc0NvbXBsYWluTG9jYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+NS48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKb2ludEpOTGltaXRlZEFjdGl2aXR5Jz5BcGFrYWggYWt0aXZpdGFzIEFuZGEgbWVuZ2FsYW1pIGhhbWJhdGFuPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRKTkxpbWl0ZWRBY3Rpdml0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRKTkxpbWl0ZWRBY3Rpdml0eU5vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEpvaW50Sk5MaW1pdGVkQWN0aXZpdHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRKTkxpbWl0ZWRBY3Rpdml0eVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEpvaW50Sk5MaW1pdGVkQWN0aXZpdHlZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRKTkxpbWl0ZWRBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEpvaW50Sk5MaW1pdGVkQWN0aXZpdHlEZXNjcmlwdGlvbic+SmlrYSDigJxZYeKAnSwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRKb2ludEpOTGltaXRlZEFjdGl2aXR5RGVzY3JpcHRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Ni48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKb2ludENlcnRhaW5Mb2NhdGlvbic+QXBha2FoIEFuZGEgbWVuZ2FsYW1pIGdhbmdndWFuIGZ1bmdzaSBzZW5kaSBhdGF1IGJhZ2lhbiB0dWJ1aCB0ZXJ0ZW50dSA\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKb2ludENlcnRhaW5Mb2NhdGlvbk5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRDZXJ0YWluTG9jYXRpb25ObycgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKb2ludENlcnRhaW5Mb2NhdGlvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFNpbmdsZSBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKb2ludENlcnRhaW5Mb2NhdGlvblllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEpvaW50Q2VydGFpbkxvY2F0aW9uWWVzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEpvaW50Q2VydGFpbkxvY2F0aW9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRKb2ludENlcnRhaW5Mb2NhdGlvbic+SmlrYSDigJxZYeKAnSwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRKb2ludENlcnRhaW5Mb2NhdGlvbkRlc2NyaXB0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXJGaXggU2luZ2xlIEl0ZW0nPjcuPC9zcGFuPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIEl0ZW0nIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEpvaW50Sk5Db21wbGFpbkRldGFpbCc+TW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLCBrYXBhbiBkYW4gYXBhIHBlbnllYmFiIGRpYWdub3NpcyBkb2t0ZXIgYXRhcyBnYW5nZ3VhbiBzZW5kaSB5YW5nIEFuZGEgZGVyaXRhIHNlcnRhIGFwYSBkaWFnbm9zaXMgdGVyc2VidXQ\\/PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRKb2ludEpOTGFzdENoZWNrVXBEYXknPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRKTkxhc3RDaGVja1VwTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRKTkxhc3RDaGVja1VwWWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjE1Ljwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRKb2ludE9mZkZyb21Xb3JrJz5BcGFrYWggQW5kYSBwZXJuYWggdGlkYWsgbWFzdWsga2VyamEgZGFsYW0gamFuZ2thIHdha3R1IGxhbWEga2FyZW5hIGtvbmRpc2kgaW5pPzwvbGFiZWw+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRPZmZGcm9tV29ya05vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRPZmZGcm9tV29ya05vJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEpvaW50T2ZmRnJvbVdvcmsnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRPZmZGcm9tV29ya1llcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZEpvaW50T2ZmRnJvbVdvcmtZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRPZmZGcm9tV29yaycgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE51bWJlckluZGVudCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRPZmZpY2VPZmZGcm9tV29ya0RheSc+SmlrYSDigJxZYeKAnSwga2FwYW46PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRKb2ludE9mZmljZU9mZkZyb21Xb3JrRGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEpvaW50T2ZmaWNlT2ZmRnJvbVdvcmtNb250aCc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRKb2ludE9mZmljZU9mZkZyb21Xb3JrWWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkSm9pbnRPZmZpY2VPZmZGcm9tV29ya0R1cmF0aW9uJz5EYW4gYmVyYXBhIGxhbWE\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1RpbnkgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEpvaW50T2ZmaWNlT2ZmRnJvbVdvcmtEdXJhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NpbmdsZSBQb3NpdGlvbmVyTGVmdCc+SGFyaTwvc3Bhbj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXJGaXggU2luZ2xlIEl0ZW0nPjE2Ljwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBJdGVtJyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRKb2ludEpOQWRkaXRpb2luYWxJbmZvcm1hdGlvbic+TW9ob24gQW5kYSBtZW1iZXJpa2FuIGluZm9ybWFzaSB0YW1iYWhhbiBsYWluIHlhbmcgbWVudXJ1dCBBbmRhIHBlbnRpbmcgbXVuZ2tpbiBkYXBhdCBtZW1iYW50dSBwcm9zZXMgcGVuZ2FqdWFuIGFzdXJhbnNpIGluaSBkZW5nYW4gbWVsZW5na2FwaSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEpvaW50Sk5BZGRpdGlvbmFsSW5mb3JtYXRpb24nIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25EZWNsYXJhdGlvbic+DQogICAgICAgICAgPGgyPlBlcm55YXRhYW4gRGFuIEt1YXNhPC9oMj4NCiAgICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdOb3RlJz4NCiAgICAgICAgICAgICAgPG9sPg0KICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgIFNheWEvS2FtaSBtZW55YXRha2FuIGJhaHdhIFNheWEvS2FtaSB0ZWxhaCBtZW1haGFtaSBkYW4gbWVueWV0dWp1aSB1bnR1ayBtZW5naXNpIHNlY2FyYSBsZW5na2FwIGRhbiBiZW5hciBzZW11YSBpbmZvcm1hc2kgZGFsYW0NCiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdRdWVzdGlvbm5haXJlVGl0bGUnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgIGluaSBzZXN1YWkgZGVuZ2FuIGtlYWRhYW4gc2ViZW5hcm55YSBzZWJhZ2FpIGJhZ2lhbiBkYXJpIGtvbnRyYWsgYXN1cmFuc2kgSml3YS9LZXNlaGF0YW4vS2VjZWxha2Fhbi4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5TYXlhIG1lbWJlcmkga3Vhc2Ega2VwYWRhIHNldGlhcCBEb2t0ZXIvUnVtYWggU2FraXQvS2xpbmlrL1B1c2tlc21hcy9MYWJvcmF0b3JpdW0sIHBlcnVzYWhhYW4gYXN1cmFuc2kgYXRhdSBwZXJ1c2FoYWFuIHJlYXN1cmFuc2ksIGJhZGFuLCBpbnN0YW5zaS9sZW1iYWdhIGF0YXUgcGloYWsgbGFpbiB5YW5nIG1lbXB1bnlhaSBjYXRhdGFuIHJpd2F5YXQga2VzZWhhdGFuIFNheWEsIHVudHVrIG1lbmd1bmdrYXBrYW4ga2VwYWRhIFBlbmFuZ2d1bmcgbWVuZ2VuYWkgc2VtdWEga2V0ZXJhbmdhbiB0ZW50YW5nIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gU2F5YS48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgbWVydXBha2FuIGhhbCB5YW5nIHRpZGFrIHRlcnBpc2Foa2FuIGRhcmkgU1BBSiBkYW4gYWthbiBtZW5naWthdCBTYXlhLCBQZW5lcmltYSBNYW5mYWF0L0FobGkgV2FyaXMsIGRhbiBrZWx1YXJnYSBTYXlhIChqaWthIGFkYSk8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5LdWFzYSBpbmkgdGV0YXAgYmVybGFrdSBwYWRhIHdha3R1IFNheWEgbWFzaWggaGlkdXAgbWF1cHVuIHNlc3VkYWggU2F5YSBtZW5pbmdnYWwgZHVuaWEuIFNhbGluYW4vZm90b2tvcGkgZGFyaSBzdXJhdCBrdWFzYSBpbmkgc2FtYSBzYWggYmVybGFrdW55YSBzZXBlcnRpIGRva3VtZW4gYXNsaS48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5BcGFiaWxhIGluZm9ybWFzaSB0ZXJzZWJ1dCB5YW5nIFNheWEvS2FtaSBiZXJpa2FuIHRpZGFrIGJlbmFyLCBtYWthIFBlbmFuZ2d1bmcgYmVyaGFrIG1lbWJhdGFsa2FuIFBvbGlzIFNheWEvS2FtaSBzZWphayBhd2FsLjwvbGk+DQogICAgICAgICAgICAgIDwvb2w+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0U2lnbmVkUGxhY2UnPkRpdGFuZGF0YW5nYW5pPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRTaWduZWRQbGFjZScgcmVhZG9ubHk9J3RydWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlU2lnbmVkRGF5Jz5UYW5nZ2FsPC9sYWJlbD4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz48L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVTaWduZWREYXknPjwvdGFibGU+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZE1vbnRoJz48L3RhYmxlPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVTaWduZWRZZWFyJz48L3RhYmxlPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2lnbmF0dXJlIEl0ZW0xJz4NCiAgICAgICAgICAgICAgICA8aW1nPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOYW1lJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFNpZ25hdHVyZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXNjcmlwdGlvbic+DQogICAgICAgICAgICAgICAgICBOYW1hIExlbmdrYXAgJiBUYW5kYSB0YW5nYW4NCiAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgIChDYWxvbikgUGVtZWdhbmcgUG9saXMNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTaWduYXR1cmUgSXRlbTEnPg0KICAgICAgICAgICAgICAgIDxpbWc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05hbWUnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgKENhbG9uKSBUZXJ0YW5nZ3VuZw0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NpZ25hdHVyZSBJdGVtMSc+DQogICAgICAgICAgICAgICAgPGltZz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTmFtZScgaWQ9J1RleHRTYWxlc1NpZ25hdHVyZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdEZXNjcmlwdGlvbic+DQogICAgICAgICAgICAgICAgICBOYW1hIExlbmdrYXAgJiBUYW5kYSB0YW5nYW4NCiAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgIFRlbmFnYSBQZW5qdWFsDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDwvc2VjdGlvbj4NCiAgICAgIDwvZm9ybT4NCiAgICA8L21haW4+DQogICAgPHNlY3Rpb24gaWQ9J1NlY3Rpb25Gb290ZXInPg0KICAgICAgPGZvb3Rlcj4NCiAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0ljb24vVHVycW9pc2UvaWNvbl9oYWxvYmNhLnN2Zyc+DQogICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXInPlBUIEFzdXJhbnNpIEppd2EgQkNBIHRlcmRhZnRhciBkYW4gZGlhd2FzaSBvbGVoIE90b3JpdGFzIEphc2EgS2V1YW5nYW48L3NwYW4+DQogICAgICAgIDxzcGFuIGNsYXNzPSdEZXRhaWwnPjwvc3Bhbj4NCiAgICAgIDwvZm9vdGVyPg0KICAgIDwvc2VjdGlvbj4NCiAgPC9ib2R5Pg0KPC9odG1sPg0K","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_joint_IN.html","FileNameIndo":"tertanggung_kuesionerkesehatan_sendi.html","FolderName":"20160803","Id":90,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_paragliding_IN.html","FileNameIndo":"tertanggung_kuesioneraktivitas_terbanglayang.html","FolderName":"20160803","Id":91,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCiAgPCEtLSBIRUFEIC0tPg0KICA8aGVhZD4NCiAgICA8IS0tIEZPUiBERVZFTE9QTUVOVCAtLT4NCiAgICA8IS0tIEZPUiBERVBMT1lNRU5UIC0tPg0KICAgIDwhLS0gTUVUQSBEQVRBIC0tPg0KICAgIDxtZXRhIGNoYXJzZXQ9J3V0Zi04Jz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSAtIEJMRVNTJyBuYW1lPSdhcHBsaWNhdGlvbi1uYW1lJz4NCiAgICA8bWV0YSBjb250ZW50PSdCQ0EgTGlmZSBFbGVjdHJvbmljIFN1Ym1pc3Npb24uJyBuYW1lPSdkZXNjcmlwdGlvbic+DQogICAgPG1ldGEgY29udGVudD0nQkNBIExpZmUgRWxlY3Ryb25pYyBTdWJtaXNzaW9uLicgbmFtZT0na2V5d29yZHMnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdhdXRob3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0licmFoaW0gQXppeicgbmFtZT0nZGVzaWduZXInPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0NvcHlyaWdodCAyMDE2IEJDQSBMaWZlJyBuYW1lPSdjb3B5cmlnaHQnPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlIEVsZWN0cm9uaWMgU3VibWlzc2lvbi4nIG5hbWU9J2RjdGVybXMuZGVzY3JpcHRpb24nPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLmNyZWF0b3InPg0KICAgIDxtZXRhIGNvbnRlbnQ9J0JDQSBMaWZlJyBuYW1lPSdkY3Rlcm1zLnJpZ2h0c0hvbGRlcic+DQogICAgPG1ldGEgY29udGVudD0nQWxsIHJpZ2h0cyByZXNlcnZlZC4gTm8gcGFydCBvZiB0aGlzIGRvY3VtZW50IG1heSBiZSByZXByb2R1Y2VkIG9yIHRyYW5zbWl0dGVkIGluIGFueSBmb3JtIG9yIGJ5IGFueSBtZWFucywgZWxlY3Ryb25pYywgbWVjaGFuaWNhbCwgcGhvdG9jb3B5aW5nLCByZWNvcmRpbmcsIG9yIG90aGVyd2lzZSwgd2l0aG91dCBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gZnJvbSB0aGUgQXV0aG9yLCBCQ0EgTGlmZS4nIG5hbWU9J2RjdGVybXMucmlnaHRzJz4NCiAgICA8bWV0YSBjb250ZW50PScyMDE2JyBuYW1lPSdkY3Rlcm1zLmRhdGVDb3B5cmlnaHRlZCc+DQogICAgPG1ldGEgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBtaW5pbXVtLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9bm8nIG5hbWU9J3ZpZXdwb3J0Jz4NCiAgICA8IS0tIEZBVklDT04gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iIH0gLS0+DQogICAgPCEtLSAlbGlua3sgOnJlbCA9PiAic2hvcnRjdXQgaWNvbiIsIDpocmVmID0+ICIje3VybFJlc291cmNlfWxvZ29fZmF2aWNvbi5pY28iLCA6dHlwZSA9PiAiaW1hZ2UveC1pY29uIiB9IC0tPg0KICAgIDwhLS0gJWxpbmt7IDpyZWwgPT4gImljb24iLCA6aHJlZiA9PiAiI3t1cmxSZXNvdXJjZX1sb2dvX2Zhdmljb24uaWNvIiwgOnR5cGUgPT4gImltYWdlL3gtaWNvbiIgfSAtLT4NCiAgICA8IS0tIENTUyAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9qcXVlcnkubW9iaWxlLTEuNC41Lm1pbi5jc3MnIGlkPSdjc3NyZXNwb25zaXZlJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9oZWFsdGhxdWVzdGlvbm5haXJlcGRmLWxheW91dC1nZW5lcmFsLmNzcycgaWQ9J2Nzc2xheW91dCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPGxpbmsgaHJlZj0nLi4vLi4vanF1ZXJ5TGlicmFyeS9TdHlsZS9DU1MvaGVhbHRocXVlc3Rpb25uYWlyZXBkZi1mb250LWdlbmVyYWwuY3NzJyBpZD0nY3NzZm9udCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPGxpbmsgaHJlZj0nLi4vLi4vanF1ZXJ5TGlicmFyeS9TdHlsZS9DU1MvaGVhbHRocXVlc3Rpb25uYWlyZXBkZi1pbnB1dC1nZW5lcmFsLmNzcycgaWQ9J2Nzc2lucHV0JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8IS0tICVsaW5reyA6aWQgPT4gImNzc2xpbmsiLCA6aHJlZiA9PiAiI3t1cmxDU1N9I3t1cmxDU1NTZWN0aW9uUHJlZml4fS1saW5rLWdlbmVyYWwuY3NzIiwgOnJlbCA9PiAic3R5bGVzaGVldCIsIDp0eXBlID0+ICJ0ZXh0L2NzcyIgfSAtLT4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9ibGVzcy1mb250c2l6ZS1tZWRpdW0uY3NzJyBpZD0nY3NzZm9udHNpemUnIHJlbD0nc3R5bGVzaGVldCcgdHlwZT0ndGV4dC9jc3MnPg0KICAgIDxsaW5rIGhyZWY9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvU3R5bGUvQ1NTL2hlYWx0aHF1ZXN0aW9ubmFpcmVwZGYtZm9udGZhbWlseS1icHJlcGxheS5jc3MnIGlkPSdjc3Nmb250ZmFtaWx5JyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz4NCiAgICA8bGluayBocmVmPScuLi8uLi9qcXVlcnlMaWJyYXJ5L1N0eWxlL0NTUy9oZWFsdGhxdWVzdGlvbm5haXJlcGRmLXRoZW1lLXR1cnFvaXNlLXN2Zy5jc3MnIGlkPSdjc3N0aGVtZScgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+DQogICAgPCEtLSAlbGlua3sgOmlkID0+ICJjc3NyZXNwb25zaXZlIiwgOmhyZWYgPT4gIiN7dXJsQ1NTfSN7dXJsQ1NTU2VjdGlvblByZWZpeH0tcmVzcG9uc2l2ZS1nZW5lcmFsLmNzcyIsIDpyZWwgPT4gInN0eWxlc2hlZXQiLCA6dHlwZSA9PiAidGV4dC9jc3MiIH0gLS0+DQogICAgPCEtLSBKQVZBIFNDUklQVCAtLT4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnkubW9iaWxlLTEuNC41Lm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnktMS4xMS4xLm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0nLi4vLi4vanF1ZXJ5TGlicmFyeS9KYXZhU2NyaXB0L01pbmltaXplZC9qcXVlcnktbWlncmF0ZS0xLjIuMS5taW4uanMnIHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9Jy4uLy4uL2pxdWVyeUxpYnJhcnkvSmF2YVNjcmlwdC9NaW5pbWl6ZWQvaWJyYWhpbWF6aXoubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2licmFoaW1heml6LWhlYWx0aHF1ZXN0aW9ubmFpcmUubWluLmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPScuLi8uLi9qcXVlcnlMaWJyYXJ5L0phdmFTY3JpcHQvTWluaW1pemVkL2lvcy1pbnRlZ3JhdGlvbi1oZWFsdGhxdWVzdGlvbm5haXJlLm1pbi5qcycgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz48L3NjcmlwdD4NCiAgICA8c2NyaXB0Pg0KICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKQ0KICAgICAgew0KICAgICAgCWltYWdlU2VsZWN0b3IoIi4uLy4uL2pxdWVyeUxpYnJhcnkvUmVzb3VyY2UvIik7DQogICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCiAgICA8dGl0bGU+QkNBIExpZmUgLSBCTEVTUywgSGVhbHRoIFF1ZXN0aW9ubmFpcmUgMSBGb3JtPC90aXRsZT4NCiAgICA8IS0tIEpRVUVSWSAtLT4NCiAgICA8c2NyaXB0Pg0KICAgICAgLy8gSU5JVElBTElaQVRJT04NCiAgICAgIA0KICAgICAgdmFyIHN0cmluZ1BhZ2VUeXBlQ3VycmVudCA9IHN0cmluZ1BhZ2VUeXBlUERGOw0KICAgICAgDQogICAgICANCiAgICAgIC8vIERPQ1VNRU5UIFJFQURZDQogICAgICANCiAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkNCiAgICAgIHsNCiAgICAgIAkvLyBTRUNUSU9OIEdFTkVSQUwNCiAgICAgIA0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRTUEFKTnVtYmVyIiwgMTEsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRQcm9zcGVjdGl2ZUluc3VyZWRGdWxsTmFtZSIsIDE5LCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRnVsbE5hbWUybmQiLCAxOSwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJpcnRoUGxhY2UiLCAxNiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJpcnRoRGF5IiwgMiwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVByb3NwZWN0aXZlSW5zdXJlZEJpcnRoTW9udGgiLCAyLCBib3hUeXBlV2l0aG91dExhYmVsLCBudWxsKTsNCiAgICAgIAlib3hHZW5lcmF0b3IoIiNEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmlydGhZZWFyIiwgNCwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICANCiAgICAgIAkvLyBTRUNUSU9OIE1BTkRBVE9SWQ0KICAgICAgDQogICAgICAJYm94R2VuZXJhdG9yKCIjRGF0ZVNpZ25lZERheSIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVTaWduZWRNb250aCIsIDIsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI0RhdGVTaWduZWRZZWFyIiwgNCwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICANCiAgICAgIAlib3hHZW5lcmF0b3IoIiNUZXh0QWdlbnROYW1lIiwgMTYsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgCWJveEdlbmVyYXRvcigiI1RleHRBZ2VudENvZGUiLCAxMSwgYm94VHlwZVdpdGhvdXRMYWJlbCwgbnVsbCk7DQogICAgICAJYm94R2VuZXJhdG9yKCIjVGV4dFByb2R1Y3RDb2RlIiwgMTEsIGJveFR5cGVXaXRob3V0TGFiZWwsIG51bGwpOw0KICAgICAgDQogICAgICAJLy8gU0VUVVANCiAgICAgIA0KICAgICAgCWZvb3RlclNldHRlckZvckhlYWx0aFF1ZXN0aW9ubmFpcmVQREYoIiIsIDMpOw0KICAgICAgCXRpdGxlU2V0dGVyRm9ySGVhbHRoUXVlc3Rpb25uYWlyZVBERigiS1VFU0lPTkVSIE9MQUhSQUdBIE1PVE9SL1NFUEVEQSBNT1RPUiIpOw0KICAgICAgfSk7DQogICAgPC9zY3JpcHQ+DQogIDwvaGVhZD4NCiAgPCEtLSBCT0RZIC0tPg0KICA8Ym9keSBpZD0nTWFpbic+DQogICAgPCEtLSBIRUFERVIgLS0+DQogICAgPGhlYWRlcj4NCiAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyJz4NCiAgICAgICAgPGltZyBzcmM9Jy4uLy4uL1Jlc291cmNlL0xvZ28vbG9nb19iY2FsaWZlX3ByaW1hcnkuc3ZnJz4NCiAgICAgICAgPGRpdiBjbGFzcz0nQWRkcmVzcyc+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlciBQb3NpdGlvbmVyUmlnaHQnPlBUIEFzdXJhbnNpIEppd2EgQkNBPC9zcGFuPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsIFBvc2l0aW9uZXJSaWdodCc+DQogICAgICAgICAgICBDaGFzZSBQbGF6YSBMYW50YWkgMjIgfCBKbC4gSmVuZC4gU3VkaXJtYW4gS2F2IDIxLCBKYWthcnRhIDEyOTIwDQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICBUZWxlcG9uOiAoMDIxKSAyMSA4ODggMDAwIHwgRmFrczogKDAyMSkgMjkzNCA3OTc3IHwgRW1haWw6IGN1c3RvbWVyQGJjYWxpZmUuY28uaWQNCiAgICAgICAgICA8L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8YnI+DQogICAgICA8L3NlY3Rpb24+DQogICAgICA8aDE+S1VFU0lPTkVSIE9MQUhSQUdBIE1PVE9SIC8gU0VQRURBIE1PVE9SPC9oMT4NCiAgICAgIDxicj4NCiAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uTm90ZSc+DQogICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgIDxwPlBlcmx1IGRpcGVyaGF0aWthbjo8L3A+DQogICAgICAgICAgPG9sPg0KICAgICAgICAgICAgPGxpPldhamliIGRpaXNpIG9sZWggKENhbG9uKSBQZW1lZ2FuZyBQb2xpcyBkYW4vYXRhdSAoQ2Fsb24pIFRlcnRhbmdndW5nIGRlbmdhbiB0aW50YSBoaXRhbSwgaHVydWYgY2V0YWssIGplbGFzIGRhbiBtZW1iZXJpIHRhbmRhICjiiJopIHBhZGEga290YWsgc2VzdWFpIHBpbGloYW4uPC9saT4NCiAgICAgICAgICAgIDxsaT5XYWppYiBtZW5hbmRhdGFuZ2FuaSBzZXRpYXAga29yZWtzaSBwZW51bGlzYW4gKGppa2EgYWRhKS48L2xpPg0KICAgICAgICAgICAgPGxpPlBlbnVsaXNhbiB0YW5nZ2FsIHNlbGFsdSBtZW1wZXJndW5ha2FuIGZvcm1hdCBUYW5nZ2FsLUJ1bGFuLVRhaHVuLjwvbGk+DQogICAgICAgICAgICA8bGk+QXBhYmlsYSBkaXBlcmx1a2FuIGxlbWJhciB0YW1iYWhhbiwgZGFwYXQgbWVtcGVyZ3VuYWthbiBGb3JtdWxpciBQZXJueWF0YWFuL0FtYW5kZW1lbiBVbnR1ayBTUEFKICYgUGVuZ2FqdWFuIFBlbGF5YW5hbiBQb2xpcyB5YW5nIGRpaXNpIGRhbiBkaXRhbmRhdGFuZ2FuaSBvbGVoIChDYWxvbikgUGVtZWdhbmcgUG9saXMsIChDYWxvbikgVGVydGFuZ2d1bmcgZGFuIFRlbmFnYSBQZW5qdWFsLjwvbGk+DQogICAgICAgICAgICA8bGk+QXBhYmlsYSB0ZWxhaCBkaWlzaSBsZW5na2FwIG9sZWggKENhbG9uKSBQZW1lZ2FuZyBQb2xpcyBkYW4vYXRhdSAoQ2Fsb24pIFRlcnRhbmdndW5nIHdhamliIGRpc2VyYWhrYW4ga2UgS2FudG9yIFB1c2F0IFBUIEFzdXJhbnNpIEppd2EgQkNBICjigJxQZW5hbmdndW5n4oCdKS48L2xpPg0KICAgICAgICAgIDwvb2w+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9zZWN0aW9uPg0KICAgIDwvaGVhZGVyPg0KICAgIDwhLS0gTUFJTiAtLT4NCiAgICA8bWFpbj4NCiAgICAgIDxmb3JtPg0KICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkN1c3RvbWVyJz4NCiAgICAgICAgICA8aDI+SS4gRGF0YSAoQ2Fsb24pIFRlcnRhbmdndW5nPC9oMj4NCiAgICAgICAgICA8ZmllbGRzZXQ+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MS48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBXcmFwIFBsYWluIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRTUEFKTnVtYmVyJz5Ob21vciBTdXJhdCBQZW5nYWp1YW4gQXN1cmFuc2kgSml3YTo8L2xhYmVsPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0U1BBSk51bWJlcic+PC90YWJsZT4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQbGFpbiBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFNQQUpOdW1iZXInIHN0eWxlPSdtYXJnaW4tdG9wOiAtMjVweDsnPihTUEFKKS9Qb2xpcyBBc3VyYW5zaTwvbGFiZWw+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mi48L3NwYW4+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUGxhaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEZ1bGxOYW1lJz5OYW1hIExlbmdrYXAgKENhbG9uKSBUZXJ0YW5nZ3VuZzo8L2xhYmVsPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRnVsbE5hbWUnPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUGxhaW4gTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRGdWxsTmFtZScgc3R5bGU9J21hcmdpbi10b3A6IC0yNXB4Oyc+KHNlc3VhaSBkZW5nYW4gS1RQL1Bhc3Bvcik8L2xhYmVsPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkRnVsbE5hbWUybmQnPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mzwvc3Bhbj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBNZWRpdW0gUGxhaW4gUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZEJpcnRoUGxhY2UnPlRlbXBhdCwgVGFuZ2dhbCBsYWhpciAoQ2Fsb24pIFRlcnRhbmdndW5nOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkQmlydGhQbGFjZScgcmVhZG9ubHk9J3RydWUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPiw8L3NwYW4+DQogICAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQcm9zcGVjdGl2ZUluc3VyZWRCaXJ0aERheSc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmlydGhNb250aCc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUHJvc3BlY3RpdmVJbnN1cmVkQmlydGhZZWFyJz48L3RhYmxlPg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZmllbGRzZXQ+DQogICAgICAgIDwvc2VjdGlvbj4NCiAgICAgICAgPCEtLSBGSUVMRFNFVCAtLT4NCiAgICAgICAgPGgyPklJLiBXQUpJQiBESUxFTkdLQVBJIChDQUxPTikgVEVSVEFOR0dVTkc8L2gyPg0KICAgICAgICA8ZmllbGRzZXQgY2xhc3M9J2ZpZWxkc2V0IFdpdGhvdXREb3VibGVEb3QnPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4xLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0xvbmcgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ0FjdGl2aXR5Jz5BcGFrYWggamVuaXMga2VnaWF0YW4gb2xhaCByYWdhIG1vdG9yIHlhbmcgQW5kYSBsYWt1a2FuPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0Jz5Nb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaWJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ0FjdGl2aXR5JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjIuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ1ZlaGljbGVNb2RlbCc+QXBha2FoIGplbmlzIGtlbmRhcmFhbiBiZXJtb3RvciB5YW5nIEFkYSBrZW5kYXJhaT88L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBOdW1iZXJJbmRlbnQgUG9zaXRpb25lckxlZnQnPk1vaG9uIG1lbmplbGFza2FuIHNlY2FyYSByaW5jaSBwYWRhIGtvbG9tIGRpYmF3YWggaW5pLihNb2RlbCwgdGFodW4gcGVtYnVhdGFuLCB1a3VyYW4gbWVzaW4gZGFuIGthdGVnb3JpIHNlY2FyYSB0ZXJwZXJpbmNpKTwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFByb3NwZWN0aXZlSW5zdXJlZFJhY2luZ1JDVmVoaWNsZU1vZGVsJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjMuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBGdWxsIFBvc2l0aW9uZXJMZWZ0Jz5TZWJ1dGthbiB0dWp1YW4ga2VnaWF0YW4gb2xhaCByYWdhIG1vdG9yLyBzZXBlZGEgbW90b3IgeWFuZyBBbmRhIGxha3VrYW4gOjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uIE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJMZWZ0JyBpZD0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ0FjdGl2aXR5UHVycG9zZUVudGVydGFpbm1lbnQnIG5hbWU9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUmFjaW5nUkNBY3Rpdml0eVB1cnBvc2UnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZW50ZXJ0YWlubWVudCc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ0FjdGl2aXR5UHVycG9zZUVudGVydGFpbm1lbnQnPkhpYnVyYW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUmFjaW5nUkNBY3Rpdml0eVB1cnBvc2VBbWF0ZXVyJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFJhY2luZ1JDQWN0aXZpdHlQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2FtYXRldXInPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUmFjaW5nUkNBY3Rpdml0eVB1cnBvc2VBbWF0ZXVyJz5BbWF0aXI8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUmFjaW5nUkNBY3Rpdml0eVB1cnBvc2VDb21wZXRpdGlvbicgbmFtZT0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ0FjdGl2aXR5UHVycG9zZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdjb21wZXRpdGlvbic+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ0FjdGl2aXR5UHVycG9zZUNvbXBldGl0aW9uJz5QZXJsb21iYWFuPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFJhY2luZ1JDQWN0aXZpdHlQdXJwb3NlUHJvZmVzc2lvbmFsJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFJhY2luZ1JDQWN0aXZpdHlQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3Byb2Zlc3Npb25hbCc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ0FjdGl2aXR5UHVycG9zZVByb2Zlc3Npb25hbCc+UHJvZmVzaW9uYWw8L2xhYmVsPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyTGVmdCcgaWQ9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUmFjaW5nUkNBY3Rpdml0eVB1cnBvc2VTcG9uc29yJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFJhY2luZ1JDQWN0aXZpdHlQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3Nwb25zb3InPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUHJvc3BlY3RpdmVJbnN1cmVkUmFjaW5nUkNBY3Rpdml0eVB1cnBvc2VTcG9uc29yJz5TcG9uc29yPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nUmFkaW9CdXR0b24gTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lckxlZnQnIGlkPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFJhY2luZ1JDQWN0aXZpdHlQdXJwb3NlT3RoZXJzJyBuYW1lPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFJhY2luZ1JDQWN0aXZpdHlQdXJwb3NlJyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblByb3NwZWN0aXZlSW5zdXJlZFJhY2luZ1JDQWN0aXZpdHlQdXJwb3NlT3RoZXJzJz5MYWlubnlhLCBzZWJ1dGthbjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0xpbmVEb3QgTG9uZyBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkUmFjaW5nUkNBY3Rpdml0eVB1cnBvc2VPdGhlckRlc2MnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+NC48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UHJvc3BlY3RpdmVJbnN1cmVkUmFjaW5nUkNTdGlsbEFjdGl2ZSc+QmVyYXBhIGxhbWEgQW5kYSBha3RpZiBkYWxhbSBvbGFoIHJhZ2EgaW5pPzwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTG9uZyBTaW5nbGUgTnVtYmVySW5kZW50IFBvc2l0aW9uZXJMZWZ0Jz5Nb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaWJhd2FoIGluaS48L2xhYmVsPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nRnVsbCBTaW5nbGUgSXRlbScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ1N0aWxsQWN0aXZlJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjUuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRSYWNpbmdSQ1BsYWNlJz5EaSBtYW5hIEFuZGEgbWVsYWt1a2FuIHBlcmxvbWJhYW4\\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_racing_IN.html","FileNameIndo":"tertanggung_kuesioneraktivitas_balapmotor.html","FolderName":"20160803","Id":92,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_traveling_IN.html","FileNameIndo":"tertanggung_kuesioneraktivitas_perjalanankeluarnegeri.html","FolderName":"20160803","Id":93,"SPAJId":1,"SPAJSection":"IMG_IN","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nTWVkaXVtRml4IEl0ZW0nPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbkhlYWx0aFllcyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uSGVhbHRoWWVzJyBuYW1lPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25IZWFsdGgnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uSGVhbHRoTm8nPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbkhlYWx0aE5vJyBuYW1lPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25IZWFsdGgnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nSnVzdGlmeSBJdGVtJyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbldpdGhvdXRTZWNyZWN5WWVzJz40LiBBcGFrYWggc3VkYWggZGlqZWxhc2thbiBrZXBhZGEgQ2Fsb24gVGVydGFuZ2d1bmcvQ2Fsb24gUGVtZWdhbmcgUG9saXMgdW50dWsgbWVuamF3YWIgc2VsdXJ1aCBwZXJ0YW55YWFuIGRhbGFtIFNQQUogZGVuZ2FuIGJlbmFyIGRhbiB0YW5wYSBhZGEgaGFsIHlhbmcgZGlyYWhhc2lha2FuPzwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J01lZGl1bUZpeCBJdGVtJz4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25XaXRob3V0U2VjcmVjeVllcyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uV2l0aG91dFNlY3JlY3lZZXMnIG5hbWU9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbldpdGhvdXRTZWNyZWN5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbldpdGhvdXRTZWNyZWN5Tm8nPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbldpdGhvdXRTZWNyZWN5Tm8nIG5hbWU9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbldpdGhvdXRTZWNyZWN5JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgSnVzdGlmeSBJdGVtJyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbkRlbnlDbGFpbVllcyc+NS4gQXBha2FoIHN1ZGFoIGRpamVsYXNrYW4ga2VwYWRhIENhbG9uIFBlbWVnYW5nIFBvbGlzIGJhaHdhIGphd2FiYW4geWFuZyB0aWRhayBiZW5hciBha2FuIGJlcmFraWJhdCBiYXRhbG55YSBwZXJqYW5qaWFuIGFzdXJhbnNpIGppd2EgaW5pIGRhbiBQZW5hbmdndW5nIGJlcmhhayBtZW5vbGFrIEtsYWltIHlhbmcgZGlhanVrYW4\/PC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nTWVkaXVtRml4IEl0ZW0nPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbkRlbnlDbGFpbVllcyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uRGVueUNsYWltWWVzJyBuYW1lPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25EZW55Q2xhaW0nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uRGVueUNsYWltTm8nPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbkRlbnlDbGFpbU5vJyBuYW1lPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25EZW55Q2xhaW0nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBKdXN0aWZ5IEl0ZW0nIGZvcj0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uU3RpbGxDb25zaWRlcmF0aW9uWWVzJz4NCiAgICAgICAgICAgICAgICA2LiBBcGFrYWggc3VkYWggZGlqZWxhc2thbiBrZXBhZGEgQ2Fsb24gUGVtZWdhbmcgUG9saXMgYmFod2EgamF3YWJhbiBrZXB1dHVzYW4NCiAgICAgICAgICAgICAgICA8aT5VbmRlcndyaXRpbmc8L2k+DQogICAgICAgICAgICAgICAgYXRhcyBwZW5nYWp1YW4gcGVybW9ob25hbiBhc3VyYW5zaSBqaXdhIGluaSBkYXBhdCBkaXRvbGFrLCBkaXR1bmRhLCBkaWtlbmFrYW4gdGFtYmFoYW4gUHJlbWkgYXRhdSBkaXR1cnVua2FuIFVhbmcgUGVydGFuZ2d1bmdhbm55YT8NCiAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nTWVkaXVtRml4IEl0ZW0nPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvblN0aWxsQ29uc2lkZXJhdGlvblllcyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uU3RpbGxDb25zaWRlcmF0aW9uWWVzJyBuYW1lPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25TdGlsbENvbnNpZGVyYXRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uU3RpbGxDb25zaWRlcmF0aW9uTm8nPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvblN0aWxsQ29uc2lkZXJhdGlvbk5vJyBuYW1lPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25TdGlsbENvbnNpZGVyYXRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBKdXN0aWZ5IEl0ZW0nIGZvcj0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uRmFjZVRvRmFjZVllcyc+Ny4gQXBha2FoIEFuZGEgYmVydGVtdSBhdGF1IG1lbGloYXQgbGFuZ3N1bmcgQ2Fsb24gVGVydGFuZ2d1bmcvQ2Fsb24gUGVtZWdhbmcgUG9saXMgcGFkYSBzYWF0IHBlbmdpc2lhbiBhdGF1IHBlbmFuZGF0YW5nYW5hbiBTUEFKPyAoUGVuYW5kYXRhbmdhbmFuIFNQQUogaGFydXMgZGloYWRhcGFuIFRlbmFnYSBQZW5qdWFsKS48L2xhYmVsPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdNZWRpdW1GaXggSXRlbSc+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uRmFjZVRvRmFjZVllcyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uRmFjZVRvRmFjZVllcycgbmFtZT0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uRmFjZVRvRmFjZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25GYWNlVG9GYWNlTm8nPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbkZhY2VUb0ZhY2VObycgbmFtZT0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uRmFjZVRvRmFjZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0l0ZW0gQ29sdW1uJyBzdHlsZT0nd2lkdGg6IDUwJTsnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdGdWxsIEp1c3RpZnkgSXRlbScgZm9yPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb242MERheXNMaW1pdFllcyc+OC4gQXBha2FoIHN1ZGFoIGRpamVsYXNrYW4ga2VwYWRhIENhbG9uIFBlbWVnYW5nIFBvbGlzIGJhaHdhIHBlbmdhanVhbiBhc3VyYW5zaSBha2FuIGRpYW5nZ2FwIGJhdGFsLCBhcGFiaWxhIHBlcnN5YXJhdGFuIHBlbmdhanVhbiBhc3VyYW5zaSBqaXdhIHRpZGFrIGRpbGVuZ2thcGkgZGFsYW0gd2FrdHUgNjAgKGVuYW0gcHVsdWgpIEhhcmkgS2FsZW5kZXIgc2VqYWsgU1BBSiB0ZXJkYWZ0YXIgZGkgS2FudG9yIFB1c2F0IEJDQSBMaWZlPzwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J01lZGl1bUZpeCBJdGVtJz4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb242MERheXNMaW1pdFllcyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uNjBEYXlzTGltaXRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbjYwRGF5c0xpbWl0JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbjYwRGF5c0xpbWl0Tm8nPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbjYwRGF5c0xpbWl0Tm8nIG5hbWU9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbjYwRGF5c0xpbWl0JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgSnVzdGlmeSBJdGVtJyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvblNlbGZWZXJpZmllZFllcyc+OS4gQXBha2FoIEFuZGEgdGVsYWggbWVsYWt1a2FuIHZlcmlmaWthc2kgdGVyaGFkYXAgaWRlbnRpdGFzIGRpcmkgZGFuIGtlbGVuZ2thcGFuIGRva3VtZW4gbGFpbm55YSB5YW5nIHRlbGFoIGRpYmVyaWthbiBrZXBhZGEgQW5kYT88L2xhYmVsPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdNZWRpdW1GaXggSXRlbSc+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uU2VsZlZlcmlmaWVkWWVzJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25TZWxmVmVyaWZpZWRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvblNlbGZWZXJpZmllZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25TZWxmVmVyaWZpZWRObyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uU2VsZlZlcmlmaWVkTm8nIG5hbWU9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvblNlbGZWZXJpZmllZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdGdWxsIEp1c3RpZnkgSXRlbScgZm9yPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25UaGlyZFBhcnR5WWVzJz4xMC4gQXBha2FoIGFkYSBwaWhhayBsYWluIHNlbGFpbiBDYWxvbiBQZW1lZ2FuZyBQb2xpcy8gQ2Fsb24gVGVydGFuZ2d1bmcgeWFuZyBtZW1pbnRhIGF0YXUgYmVya2VwZW50aW5nYW4gYXRhdSBtZW5naW5zdHJ1a3Npa2FuIHVudHVrIG1lbmdhanVrYW4gcGVybW9ob25hbiBhc3VyYW5zaSBpbmk\/IEppa2Eg4oCcWWHigJ0gYXBha2FoIEFuZGEgdGVsYWggbWVtaW50YSBDYWxvbiBQZW1lZ2FuZyBQb2xpcyB1bnR1ayBtZWxha3VrYW4gZm9ybXVsaXIgUGloYWsgS2V0aWdhPzwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J01lZGl1bUZpeCBJdGVtJz4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25UaGlyZFBhcnR5WWVzJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25UaGlyZFBhcnR5WWVzJyBuYW1lPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25UaGlyZFBhcnR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvblRoaXJkUGFydHlObyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uVGhpcmRQYXJ0eU5vJyBuYW1lPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25UaGlyZFBhcnR5JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgSnVzdGlmeSBJdGVtJyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbkNvbnNpdHV0aW9uWWVzJz4xMS4gQXBha2FoIHN1ZGFoIGRpamVsYXNrYW4ga2VwYWRhIENhbG9uIFBlbWVnYW5nIFBvbGlzIGJhaHdhIFBlbmVyaW1hIE1hbmZhYXQgeWFuZyBkaXR1bmp1aywgc3VkYWggc2VzdWFpIGRlbmdhbiBwZXJhdHVyYW4gcGVydW5kYW5nLXVuZGFuZ2FuIHlhbmcgYmVybGFrdSBkaSBJbmRvbmVzaWE\/PC9sYWJlbD4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nTWVkaXVtRml4IEl0ZW0nPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbkNvbnNpdHV0aW9uWWVzJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25Db25zaXR1dGlvblllcycgbmFtZT0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uQ29uc2l0dXRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyUmlnaHQnIGZvcj0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uQ29uc2l0dXRpb25Obyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uQ29uc2l0dXRpb25ObycgbmFtZT0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uQ29uc2l0dXRpb24nIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb25Db25zaXR1dGlvblllcyc+DQogICAgICAgICAgICAgIDxiPg0KICAgICAgICAgICAgICAgIDEyLiBLaHVzdXMgdW50dWsgcHJvZHVrIGRlbmdhbiBtYW5mYWF0DQogICAgICAgICAgICAgICAgPGk+VGVybWluYWwgSWxsbmVzcyAoVEkpOjwvaT4NCiAgICAgICAgICAgICAgPC9iPg0KICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBKdXN0aWZ5IEl0ZW0nIGZvcj0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uOTBEYXlzTGltaXRZZXMnPmEuIEFwYWthaCBzdWRhaCBkaWplbGFza2FuIGJhaHdhIHRlcmRhcGF0IG1hc2EgdHVuZ2d1IEtsYWltIHNlbGFtYSA5MCAoc2VtYmlsYW4gcHVsdWgpIEhhcmkgS2FsZW5kZXIgc2VqYWsgVGFuZ2dhbCBNdWxhaSBBc3VyYW5zaSBhdGF1IHNlamFrIHRhbmdnYWwgcGVtdWxpaGFuIFBvbGlzIHRlcmFraGlyPzwvbGFiZWw+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J01lZGl1bUZpeCBJdGVtJz4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1JhZGlvQnV0dG9uIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblNhbGVzRGVjbGFyYXRpb245MERheXNMaW1pdFllcyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25TYWxlc0RlY2xhcmF0aW9uOTBEYXlzTGltaXRZZXMnIG5hbWU9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbjkwRGF5c0xpbWl0JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nUmFkaW9CdXR0b24gUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbjkwRGF5c0xpbWl0Tm8nPllhPC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbjkwRGF5c0xpbWl0Tm8nIG5hbWU9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbjkwRGF5c0xpbWl0JyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgSnVzdGlmeSBJdGVtJyBmb3I9J1JhZGlvQnV0dG9uU2FsZXNEZWNsYXJhdGlvbkJhc2ljU3VtQXNzdXJlZFllcyc+Yi4gQXBha2FoIHN1ZGFoIGRpamVsYXNrYW4gYmFod2EgbWFuZmFhdCBUZXJtaW5hbCBJbGxuZXNzIHNlYmVzYXIgMjAlIFVhbmcgUGVydGFuZ2d1bmdhbiBhdGF1IG1ha3NpbWFsIFJwIDMsMDAwLDAwMCwwMDAsLSAodGlnYSBtaWxpYXIgcnVwaWFoKSBwZXIgVGVydGFuZ2d1bmc\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_spajpdf_salesdeclaration.html","FileNameIndo":"page_spajpdf_salesdeclaration.html","FolderName":"20160803","Id":94,"SPAJId":1,"SPAJSection":"AF","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbiBQb3NpdGlvbmVyTGVmdCc+DQogICAgICAgICAgICA8aW5wdXQgaWQ9J1JhZGlvQnV0dG9uVGhpcmRQYXJ0eVByZW1pUGF5b3JSZWxhdGlvbnNoaXBTcG91c2UnIG5hbWU9J1JhZGlvQnV0dG9uVGhpcmRQYXJ0eVByZW1pUGF5b3JSZWxhdGlvbnNoaXAnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc3BvdXNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFNob3J0IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uVGhpcmRQYXJ0eVByZW1pUGF5b3JSZWxhdGlvbnNoaXBTcG91c2UnPlN1YW1pIC8gSXN0cmk8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGlkPSdSYWRpb0J1dHRvblRoaXJkUGFydHlQcmVtaVBheW9yUmVsYXRpb25zaGlwQ2hpbGQnIG5hbWU9J1JhZGlvQnV0dG9uVGhpcmRQYXJ0eVByZW1pUGF5b3JSZWxhdGlvbnNoaXAnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nY2hpbGQnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgU2hvcnQgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25UaGlyZFBhcnR5UHJlbWlQYXlvclJlbGF0aW9uc2hpcENoaWxkJz5BbmFrPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UaGlyZFBhcnR5UHJlbWlQYXlvclJlbGF0aW9uc2hpcFBhcmVudCcgbmFtZT0nUmFkaW9CdXR0b25UaGlyZFBhcnR5UHJlbWlQYXlvclJlbGF0aW9uc2hpcCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdwYXJlbnQnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lckxlZnQnPjwvZGl2Pg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdTaW5nbGUgU2hvcnQgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25UaGlyZFBhcnR5UHJlbWlQYXlvclJlbGF0aW9uc2hpcFBhcmVudCc+T3JhbmcgVHVhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UaGlyZFBhcnR5UHJlbWlQYXlvclJlbGF0aW9uc2hpcFNpYmxpbmcnIG5hbWU9J1JhZGlvQnV0dG9uVGhpcmRQYXJ0eVByZW1pUGF5b3JSZWxhdGlvbnNoaXAnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc2libGluZyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyTGVmdCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1NpbmdsZSBTaG9ydCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdSYWRpb0J1dHRvblRoaXJkUGFydHlQcmVtaVBheW9yUmVsYXRpb25zaGlwU2libGluZyc+U2F1ZGFyYSBLYW5kdW5nPC9sYWJlbD4NCiAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgIDxpbnB1dCBpZD0nUmFkaW9CdXR0b25UaGlyZFBhcnR5UHJlbWlQYXlvclJlbGF0aW9uc2hpcE90aGVyJyBuYW1lPSdSYWRpb0J1dHRvblRoaXJkUGFydHlQcmVtaVBheW9yUmVsYXRpb25zaGlwJyB0eXBlPSdyYWRpbycgdmFsdWU9J290aGVyJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJMZWZ0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFNob3J0IFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uVGhpcmRQYXJ0eVByZW1pUGF5b3JSZWxhdGlvbnNoaXBPdGhlcic+TGFpbm55YSwgc2VidXRrYW48L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFRoaXJkUGFydHlQcmVtaVBheW9yUmVsYXRpb25zaGlwT3RoZXInIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFBsYWluIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+My48L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBsYWluIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uVGhpcmRQYXJ0eUJlbmVmaWNpYXJ5WWVzJz5NZW1pbnRhIGhhayBhdGFzIG1hbmZhYXQgUG9saXM\","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_healthquestionnairepdf_thirdparty.html","FileNameIndo":"page_healthquestionnairepdf_thirdparty.html","FolderName":"20160803","Id":95,"SPAJId":1,"SPAJSection":"TP","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"},{"__type":"SPAJHTMLFormModel:#HtmlGeneratorServices.Models","Base64File":"\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJEaXNzb3JkZXJObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJEaXNzb3JkZXJObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJCYWNrYm9uZUJCRGlzc29yZGVyJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJEaXNzb3JkZXJZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJCYWNrYm9uZUJCRGlzc29yZGVyWWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJEaXNzb3JkZXInIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTnVtYmVySW5kZW50IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+SmlrYSDigJxZYeKAnSwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlckJhY2tib25lQkJEaXNzb3JkZXJEZXNjcmlwdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4yLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUG9saWN5SG9sZGVyQmFja2JvbmVCQkZpcnN0Q29tcGxhaW4nPkthcGFuIHBlcnRhbWEga2FsaSBrZWx1aGFuIHRlcnNlYnV0IGRpcmFzYWthbj88L2xhYmVsPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckJhY2tib25lQkJGaXJzdENvbXBsYWluRGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckJhY2tib25lQkJGaXJzdENvbXBsYWluTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQmFja2JvbmVCQkZpcnN0Q29tcGxhaW5ZZWFyJz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Mzwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVDb21wbGFpbkFtb3VudERheSc+U2ViZXJhcGEgc2VyaW5na2FoIGtlbHVoYW4gdGVyc2VidXQgdGltYnVsIGRhbGFtIDEyIGJ1bGFuIHRlcmFraGlyPzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdMb25nIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1RleHRQb2xpY3lIb2xkZXJCYWNrYm9uZUNvbXBsYWluQW1vdW50JyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjQ8L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdGdWxsIFdyYXAgUG9zaXRpb25lckxlZnQnIGZvcj0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJCYWNrYm9uZUJCUGFpbkxvY2F0aW9uJz5Nb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgZGFuIHBhZGEgYmFnaWFuIHR1YnVoIG1hbmE\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQlBhaW5Mb2NhdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz41PC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eVllcyc+QXBha2FoIGFrdGl2aXRhcyBBbmRhIG1lbmdhbGFtaSBoYW1iYXRhbj88L2xhYmVsPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J1JhZGlvQnV0dG9uJz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eU5vJz5UaWRhazwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Bvc2l0aW9uZXJSaWdodCcgaWQ9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eU5vJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJMaW1pdGVkQWN0aXZpdHknIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQm94Um91bmQgUG9zaXRpb25lclJpZ2h0Jz48L2Rpdj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBTaW5nbGUgUG9zaXRpb25lclJpZ2h0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eVllcyc+WWE8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJMaW1pdGVkQWN0aXZpdHlZZXMnIG5hbWU9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTnVtYmVySW5kZW50IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+SmlrYSDigJxZYeKAnSwgbW9ob24gbWVuamVsYXNrYW4gc2VjYXJhIHJpbmNpIHBhZGEga29sb20gZGkgYmF3YWggaW5pLjwvbGFiZWw+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckJhY2tib25lQkJMaW1pdGVkQWN0aXZpdHlEZXNjcmlwdGlvbic+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkxpbWl0ZWRBY3Rpdml0eURlc2NyaXB0aW9uJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjYuPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nRnVsbCBXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVQb2xpY3lIb2xkZXJCYWNrYm9uZUJCRmlyc3RMaW1pdGVkQWN0aXZpdHlEYXknPkthcGFuIG1lbmdhbGFtaSBoYW1iYXRhbiA\/PC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJCYWNrYm9uZUJCRmlyc3RMaW1pdGVkQWN0aXZpdHlEYXknPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQmFja2JvbmVCQkZpcnN0TGltaXRlZEFjdGl2aXR5TW9udGgnPjwvdGFibGU+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPi88L3NwYW4+DQogICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlUG9saWN5SG9sZGVyQmFja2JvbmVCQkZpcnN0TGltaXRlZEFjdGl2aXR5WWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjc8L3NwYW4+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkNhdXNlJz5Nb2hvbiBtZW5qZWxhc2thbiBzZWNhcmEgcmluY2kgcGFkYSBrb2xvbSBkaSBiYXdhaCBpbmkgbWVudXJ1dCBEb2t0ZXIgYXBhIHBlbnllYmFiIGRpYWdub3NpcyAgZ2FuZ2d1YW4gdHVsYW5nIGJlbGFrYW5nIHRlcnNlYnV0PyAoS2VjZWxha2FhbiwgUHJvc2VzIHBlbnVhYW4sIGtlY2VsYWthYW4gc2V3YWt0dSBiZXJvbGFocmFnYSwgZGFuIHNlYmFnYWlueWEpLjwvbGFiZWw+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlckJhY2tib25lQkJDYXVzZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uRm9vdGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogMTYwcHg7Jz4NCiAgICAgICAgICAgIDxmb290ZXI+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9JY29uL1R1cnFvaXNlL2ljb25faGFsb2JjYS5zdmcnPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nSGVhZGVyJz5QVCBBc3VyYW5zaSBKaXdhIEJDQSB0ZXJkYWZ0YXIgZGFuIGRpYXdhc2kgb2xlaCBPdG9yaXRhcyBKYXNhIEtldWFuZ2FuPC9zcGFuPg0KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGV0YWlsJz48L3NwYW4+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgICA8L3NlY3Rpb24+DQogICAgICAgICAgPGhlYWRlcj4NCiAgICAgICAgICAgIDxzZWN0aW9uIGlkPSdTZWN0aW9uSGVhZGVyJyBzdHlsZT0nbWFyZ2luLXRvcDogNzBweDsgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IDcwcHg7IGRpc3BsYXk6IGJsb2NrOyc+DQogICAgICAgICAgICAgIDxpbWcgc3JjPScuLi8uLi9SZXNvdXJjZS9Mb2dvL2xvZ29fYmNhbGlmZV9wcmltYXJ5LnN2Zyc+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J0FkZHJlc3MnPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdIZWFkZXIgUG9zaXRpb25lclJpZ2h0Jz5QVCBBc3VyYW5zaSBKaXdhIEJDQTwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCBQb3NpdGlvbmVyUmlnaHQnPg0KICAgICAgICAgICAgICAgICAgQ2hhc2UgUGxhemEgTGFudGFpIDIyIHwgSmwuIEplbmQuIFN1ZGlybWFuIEthdiAyMSwgSmFrYXJ0YSAxMjkyMA0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVsZXBvbjogKDAyMSkgMjEgODg4IDAwMCB8IEZha3M6ICgwMjEpIDI5MzQgNzk3NyB8IEVtYWlsOiBjdXN0b21lckBiY2FsaWZlLmNvLmlkDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgICAgIDwvaGVhZGVyPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdOdW1iZXIgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBzdHlsZT0nbWFyZ2luLXRvcDogNjBweDsnPjguPC9zcGFuPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQlhSYXlZZXMnIHN0eWxlPSdtYXJnaW4tdG9wOiA2MHB4Oyc+QXBha2FoIEFuZGEgcGVybmFoIG1lbmphbGFuaSBYLXJheSwgTVJJLCBhdGF1IHBlbWVyaWtzYWFuIGxhaW5ueWE\\/PC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckJhY2tib25lQkJCb3R0b20yRG9jdG9yTmFtZSc+TmFtYSBMZW5na2FwIERva3Rlcjo8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdGdWxsIFNpbmdsZSBJdGVtJyBpZD0nVGV4dFBvbGljeUhvbGRlckJhY2tib25lQkJCb3R0b20yRG9jdG9yTmFtZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCBOdW1iZXJJbmRlbnQnPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRQb2xpY3lIb2xkZXJCYWNrYm9uZUJCQm90dG9tMkRvY3RvclRlbGVwaG9uZSc+Tm8uIFRlbGVwb24vSGFuZHBob25lOjwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkJvdHRvbTJEb2N0b3JUZWxlcGhvbmUnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQgTnVtYmVySW5kZW50Jz4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nTWVkaXVtIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkJvdHRvbTJDbGluaWNOYW1lJz5OYW1hIEtsaW5pay9SdW1haCBTYWtpdDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkJvdHRvbTJDbGluaWNOYW1lJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckJhY2tib25lQkJCb3R0b20yQ2xpbmljQWRkcmVzcyc+QWxhbWF0IEtsaW5pay9SdW1haCBTYWtpdDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkJvdHRvbTJDbGluaWNBZGRyZXNzJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjEzLjwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J01lZGl1bSBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGZvcj0nVGV4dFBvbGljeUhvbGRlckJhY2tib25lQkJDb250cm9sQW1vdW50Jz5TZWJlcmFwYSBzZXJpbmcgQW5kYSBrb250cm9sPzwvbGFiZWw+DQogICAgICAgICAgPGlucHV0IGNsYXNzPSdTaG9ydCBTaW5nbGUgUG9zaXRpb25lckxlZnQnIGlkPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkNvbnRyb2xBbW91bnQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIE1hcmdpbiBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkNvbnRyb2xBbW91bnQnPmthbGkgcGVyPC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1Nob3J0IFNpbmdsZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J1NlbGVjdFBvbGljeUhvbGRlckJhY2tib25lQkJDb250cm9sQW1vdW50UGVyaW9kJyB0eXBlPSd0ZXh0Jz4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjE0Ljwvc3Bhbj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdEYXRlUG9saWN5SG9sZGVyQmFja2JvbmVCQkxhc3RDb25zdWx0RGF5Jz5LYXBhbiB0ZXJha2hpciBrYWxpIEFuZGEga29udHJvbD88L2xhYmVsPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckJhY2tib25lQkJMYXN0Q29uc3VsdERheSc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJCYWNrYm9uZUJCTGFzdENvbnN1bHRNb250aCc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJCYWNrYm9uZUJCTGFzdENvbnN1bHRZZWFyJz48L3RhYmxlPg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nTnVtYmVyIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+MTU8L3NwYW4+DQogICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1JhZGlvQnV0dG9uUG9saWN5SG9sZGVyQmFja2JvbmVCQkFic2VudCc+QXBha2FoIEFuZGEgcGVybmFoIHRpZGFrIG1hc3VrIGtlcmphIGRhbGFtIGphbmdrYSB3YWt0dSBsYW1hIGthcmVuYSBrb25kaXNpIGluaSA\/PC9sYWJlbD4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSdSYWRpb0J1dHRvbic+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJBYnNlbnRObyc+VGlkYWs8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdQb3NpdGlvbmVyUmlnaHQnIGlkPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJBYnNlbnRObycgbmFtZT0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJCYWNrYm9uZUJCQWJzZW50JyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0JveFJvdW5kIFBvc2l0aW9uZXJSaWdodCc+PC9kaXY+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J1dyYXAgU2luZ2xlIFBvc2l0aW9uZXJSaWdodCcgZm9yPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJBYnNlbnRZZXMnPllhPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0nUG9zaXRpb25lclJpZ2h0JyBpZD0nUmFkaW9CdXR0b25Qb2xpY3lIb2xkZXJCYWNrYm9uZUJCQWJzZW50WWVzJyBuYW1lPSdSYWRpb0J1dHRvblBvbGljeUhvbGRlckJhY2tib25lQkJBYnNlbnQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZSc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdCb3hSb3VuZCBQb3NpdGlvbmVyUmlnaHQnPjwvZGl2Pg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDxicj4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J051bWJlckluZGVudCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkppa2Eg4oCcWWHigJ0sIGthcGFuPC9sYWJlbD4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJCYWNrYm9uZUJCQWJzZW50RGF5Jz48L3RhYmxlPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVBvbGljeUhvbGRlckJhY2tib25lQkJBYnNlbnRNb250aCc+PC90YWJsZT4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICA8dGFibGUgY2xhc3M9J0JveFNxdWFyZSBQb3NpdGlvbmVyTGVmdCcgaWQ9J0RhdGVQb2xpY3lIb2xkZXJCYWNrYm9uZUJCQWJzZW50WWVhcic+PC90YWJsZT4NCiAgICAgICAgICA8bGFiZWwgY2xhc3M9J051bWJlckluZGVudCBTaW5nbGUgUG9zaXRpb25lckxlZnQnPkRhbiBiZXJhcGEgbGFtYSA\/PC9sYWJlbD4NCiAgICAgICAgICA8aW5wdXQgY2xhc3M9J1RpbnkgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFBvbGljeUhvbGRlckJhY2tib25lQkJBYnNlbnRBbW91bnQnIHR5cGU9J3RleHQnPg0KICAgICAgICAgIDxsYWJlbCBjbGFzcz0nU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz5IYXJpPC9sYWJlbD4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9J051bWJlciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjE2PC9zcGFuPg0KICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRhaW5lckZpdCc+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J0Z1bGwgV3JhcCBQb3NpdGlvbmVyTGVmdCcgZm9yPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkFkZGl0aW9uYWxJbmZvcm1hdGlvbic+TW9ob24gQW5kYSBtZW1iZXJpa2FuIGluZm9ybWFzaSB0YW1iYWhhbiBsYWluIHlhbmcgbWVudXJ1dCBBbmRhIHBlbnRpbmcgbXVuZ2tpbiBkYXBhdCBtZW1iYW50dSBwcm9zZXMgcGVuZ2FqdWFuIGFzdXJhbnNpIGluaSBkZW5nYW4gbWVsZW5na2FwaSBrb2xvbSBkaSBiYXdhaCBpbmkuPC9sYWJlbD4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8YnI+DQogICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGFpbmVyRml0IE51bWJlckluZGVudCc+DQogICAgICAgICAgICA8aW5wdXQgY2xhc3M9J0Z1bGwgU2luZ2xlIEl0ZW0nIGlkPSdUZXh0UG9saWN5SG9sZGVyQmFja2JvbmVCQkFkZGl0aW9uYWxJbmZvcm1hdGlvbicgdHlwZT0ndGV4dCc+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPGJyPg0KICAgICAgICA8L2ZpZWxkc2V0Pg0KICAgICAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkRlY2xhcmF0aW9uJz4NCiAgICAgICAgICA8aDI+UGVybnlhdGFhbiBEYW4gS3Vhc2E8L2gyPg0KICAgICAgICAgIDxmaWVsZHNldD4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9J05vdGUnPg0KICAgICAgICAgICAgICA8b2w+DQogICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgU2F5YS9LYW1pIG1lbnlhdGFrYW4gYmFod2EgU2F5YS9LYW1pIHRlbGFoIG1lbWFoYW1pIGRhbiBtZW55ZXR1anVpIHVudHVrIG1lbmdpc2kgc2VjYXJhIGxlbmdrYXAgZGFuIGJlbmFyIHNlbXVhIGluZm9ybWFzaSBkYWxhbQ0KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1F1ZXN0aW9ubmFpcmVUaXRsZSc+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgaW5pIHNlc3VhaSBkZW5nYW4ga2VhZGFhbiBzZWJlbmFybnlhIHNlYmFnYWkgYmFnaWFuIGRhcmkga29udHJhayBhc3VyYW5zaSBKaXdhL0tlc2VoYXRhbi9LZWNlbGFrYWFuLg0KICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPGxpPlNheWEgbWVtYmVyaSBrdWFzYSBrZXBhZGEgc2V0aWFwIERva3Rlci9SdW1haCBTYWtpdC9LbGluaWsvUHVza2VzbWFzL0xhYm9yYXRvcml1bSwgcGVydXNhaGFhbiBhc3VyYW5zaSBhdGF1IHBlcnVzYWhhYW4gcmVhc3VyYW5zaSwgYmFkYW4sIGluc3RhbnNpL2xlbWJhZ2EgYXRhdSBwaWhhayBsYWluIHlhbmcgbWVtcHVueWFpIGNhdGF0YW4gcml3YXlhdCBrZXNlaGF0YW4gU2F5YSwgdW50dWsgbWVuZ3VuZ2thcGthbiBrZXBhZGEgUGVuYW5nZ3VuZyBtZW5nZW5haSBzZW11YSBrZXRlcmFuZ2FuIHRlbnRhbmcgY2F0YXRhbiByaXdheWF0IGtlc2VoYXRhbiBTYXlhLjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSBtZXJ1cGFrYW4gaGFsIHlhbmcgdGlkYWsgdGVycGlzYWhrYW4gZGFyaSBTUEFKIGRhbiBha2FuIG1lbmdpa2F0IFNheWEsIFBlbmVyaW1hIE1hbmZhYXQvQWhsaSBXYXJpcywgZGFuIGtlbHVhcmdhIFNheWEgKGppa2EgYWRhKTwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkt1YXNhIGluaSB0ZXRhcCBiZXJsYWt1IHBhZGEgd2FrdHUgU2F5YSBtYXNpaCBoaWR1cCBtYXVwdW4gc2VzdWRhaCBTYXlhIG1lbmluZ2dhbCBkdW5pYS4gU2FsaW5hbi9mb3Rva29waSBkYXJpIHN1cmF0IGt1YXNhIGluaSBzYW1hIHNhaCBiZXJsYWt1bnlhIHNlcGVydGkgZG9rdW1lbiBhc2xpLjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkFwYWJpbGEgaW5mb3JtYXNpIHRlcnNlYnV0IHlhbmcgU2F5YS9LYW1pIGJlcmlrYW4gdGlkYWsgYmVuYXIsIG1ha2EgUGVuYW5nZ3VuZyBiZXJoYWsgbWVtYmF0YWxrYW4gUG9saXMgU2F5YS9LYW1pIHNlamFrIGF3YWwuPC9saT4NCiAgICAgICAgICAgICAgPC9vbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J1RleHRTaWduZWRQbGFjZSc+RGl0YW5kYXRhbmdhbmk8L2xhYmVsPg0KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdNZWRpdW0gU2luZ2xlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nVGV4dFNpZ25lZFBsYWNlJyByZWFkb25seT0ndHJ1ZScgdHlwZT0ndGV4dCc+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+PC9zcGFuPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdXcmFwIFBvc2l0aW9uZXJMZWZ0JyBmb3I9J0RhdGVTaWduZWREYXknPlRhbmdnYWw8L2xhYmVsPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9J1NlcGFyYXRvciBTaW5nbGUgUG9zaXRpb25lckxlZnQnPjwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZERheSc+PC90YWJsZT4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdTZXBhcmF0b3IgU2luZ2xlIFBvc2l0aW9uZXJMZWZ0Jz4vPC9zcGFuPg0KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdCb3hTcXVhcmUgUG9zaXRpb25lckxlZnQnIGlkPSdEYXRlU2lnbmVkTW9udGgnPjwvdGFibGU+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0nU2VwYXJhdG9yIFNpbmdsZSBQb3NpdGlvbmVyTGVmdCc+Lzwvc3Bhbj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nQm94U3F1YXJlIFBvc2l0aW9uZXJMZWZ0JyBpZD0nRGF0ZVNpZ25lZFllYXInPjwvdGFibGU+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250YWluZXJGaXQnPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdTaWduYXR1cmUgSXRlbTEnPg0KICAgICAgICAgICAgICAgIDxpbWc+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J05hbWUnIGlkPSdUZXh0UG9saWN5SG9sZGVyU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgKENhbG9uKSBQZW1lZ2FuZyBQb2xpcw0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1NpZ25hdHVyZSBJdGVtMSc+DQogICAgICAgICAgICAgICAgPGltZz4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTmFtZScgaWQ9J1RleHRQcm9zcGVjdGl2ZUluc3VyZWRTaWduYXR1cmUnPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nRGVzY3JpcHRpb24nPg0KICAgICAgICAgICAgICAgICAgTmFtYSBMZW5na2FwICYgVGFuZGEgdGFuZ2FuDQogICAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgICAoQ2Fsb24pIFRlcnRhbmdndW5nDQogICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nU2lnbmF0dXJlIEl0ZW0xJz4NCiAgICAgICAgICAgICAgICA8aW1nPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdOYW1lJyBpZD0nVGV4dFNhbGVzU2lnbmF0dXJlJz48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J0Rlc2NyaXB0aW9uJz4NCiAgICAgICAgICAgICAgICAgIE5hbWEgTGVuZ2thcCAmIFRhbmRhIHRhbmdhbg0KICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgVGVuYWdhIFBlbmp1YWwNCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8YnI+DQogICAgICAgICAgPC9maWVsZHNldD4NCiAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgPC9mb3JtPg0KICAgIDwvbWFpbj4NCiAgICA8c2VjdGlvbiBpZD0nU2VjdGlvbkZvb3Rlcic+DQogICAgICA8Zm9vdGVyPg0KICAgICAgICA8aW1nIHNyYz0nLi4vLi4vUmVzb3VyY2UvSWNvbi9UdXJxb2lzZS9pY29uX2hhbG9iY2Euc3ZnJz4NCiAgICAgICAgPHNwYW4gY2xhc3M9J0hlYWRlcic+UFQgQXN1cmFuc2kgSml3YSBCQ0EgdGVyZGFmdGFyIGRhbiBkaWF3YXNpIG9sZWggT3Rvcml0YXMgSmFzYSBLZXVhbmdhbjwvc3Bhbj4NCiAgICAgICAgPHNwYW4gY2xhc3M9J0RldGFpbCc+PC9zcGFuPg0KICAgICAgPC9mb290ZXI+DQogICAgPC9zZWN0aW9uPg0KICA8L2JvZHk+DQo8L2h0bWw+DQo=","DateCreated":"\/Date(1473267600000+0700)\/","FileName":"page_activityquestionnairepdf_backbone.html","FileNameIndo":"pemegangpolis_kuesionerkesehatan_tulangbelakang.html","FolderName":"20160803","Id":96,"SPAJId":1,"SPAJSection":"IMG_PH","Status":"A","ValidDate":"\/Date(1473267600000+0700)\/"}]}